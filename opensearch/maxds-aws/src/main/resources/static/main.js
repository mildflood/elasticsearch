(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/_dialogmodal/dialogmodal.component.html":
/*!*********************************************************!*\
  !*** ./src/app/_dialogmodal/dialogmodal.component.html ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"jw-modal\">\r\n    <div class=\"jw-modal-body\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n<div class=\"jw-modal-background\"></div>"

/***/ }),

/***/ "./src/app/_dialogmodal/dialogmodal.component.less":
/*!*********************************************************!*\
  !*** ./src/app/_dialogmodal/dialogmodal.component.less ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/* MODAL STYLES\n-------------------------------*/\njw-modal {\n  /* modals are hidden by default */\n  display: none;\n}\njw-modal .jw-modal {\n  /* modal container fixed across whole screen */\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  /* z-index must be higher than .jw-modal-background */\n  z-index: 800;\n  /* enables scrolling for tall modals */\n  overflow: auto;\n}\njw-modal .jw-modal .jw-modal-body {\n  padding: 20px;\n  background: #fff;\n  min-width: 600px;\n  max-width: 80%;\n  /* margin exposes part of the modal background */\n  margin: 200px;\n}\njw-modal .jw-modal-background {\n  /* modal background fixed across whole screen */\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  /* semi-transparent black  */\n  background-color: #000;\n  opacity: 0.65;\n  /* z-index must be below .jw-modal and above everything else  */\n  z-index: 700;\n}\nbody.jw-modal-open {\n  /* body overflow is hidden to hide main scrollbar when modal window is open */\n  overflow: hidden;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvX2RpYWxvZ21vZGFsL2RpYWxvZ21vZGFsLmNvbXBvbmVudC5sZXNzIiwic3JjL2FwcC9fZGlhbG9nbW9kYWwvQzovRGV2L2dpdC9vcGVuc2VhcmNoL21heGRzLWF3cy9tYXhkcy13ZWIvc3JjL2FwcC9fZGlhbG9nbW9kYWwvZGlhbG9nbW9kYWwuY29tcG9uZW50Lmxlc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Z0NBQ2dDO0FDQ2hDO0VEQ0UsaUNBQWlDO0VDQy9CLGFBQUE7QURDSjtBQ0hBO0VES0UsOENBQThDO0VDQ3hDLGVBQUE7RUFDQSxNQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxPQUFBO0VEQ04scURBQXFEO0VDRS9DLFlBQUE7RURBTixzQ0FBc0M7RUNHaEMsY0FBQTtBRERSO0FDZkE7RUFtQlksYUFBQTtFQUNBLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0VERFYsZ0RBQWdEO0VDSXRDLGFBQUE7QURGWjtBQ3ZCQTtFRHlCRSwrQ0FBK0M7RUNNekMsZUFBQTtFQUNBLE1BQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLE9BQUE7RURKTiw0QkFBNEI7RUNPdEIsc0JBQUE7RUFDQSxhQUFBO0VETE4sK0RBQStEO0VDUXpELFlBQUE7QUROUjtBQ1VBO0VEUkUsNkVBQTZFO0VDVTNFLGdCQUFBO0FEUkoiLCJmaWxlIjoic3JjL2FwcC9fZGlhbG9nbW9kYWwvZGlhbG9nbW9kYWwuY29tcG9uZW50Lmxlc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBNT0RBTCBTVFlMRVNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuanctbW9kYWwge1xuICAvKiBtb2RhbHMgYXJlIGhpZGRlbiBieSBkZWZhdWx0ICovXG4gIGRpc3BsYXk6IG5vbmU7XG59XG5qdy1tb2RhbCAuanctbW9kYWwge1xuICAvKiBtb2RhbCBjb250YWluZXIgZml4ZWQgYWNyb3NzIHdob2xlIHNjcmVlbiAqL1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgLyogei1pbmRleCBtdXN0IGJlIGhpZ2hlciB0aGFuIC5qdy1tb2RhbC1iYWNrZ3JvdW5kICovXG4gIHotaW5kZXg6IDgwMDtcbiAgLyogZW5hYmxlcyBzY3JvbGxpbmcgZm9yIHRhbGwgbW9kYWxzICovXG4gIG92ZXJmbG93OiBhdXRvO1xufVxuanctbW9kYWwgLmp3LW1vZGFsIC5qdy1tb2RhbC1ib2R5IHtcbiAgcGFkZGluZzogMjBweDtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgbWluLXdpZHRoOiA2MDBweDtcbiAgbWF4LXdpZHRoOiA4MCU7XG4gIC8qIG1hcmdpbiBleHBvc2VzIHBhcnQgb2YgdGhlIG1vZGFsIGJhY2tncm91bmQgKi9cbiAgbWFyZ2luOiAyMDBweDtcbn1cbmp3LW1vZGFsIC5qdy1tb2RhbC1iYWNrZ3JvdW5kIHtcbiAgLyogbW9kYWwgYmFja2dyb3VuZCBmaXhlZCBhY3Jvc3Mgd2hvbGUgc2NyZWVuICovXG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICAvKiBzZW1pLXRyYW5zcGFyZW50IGJsYWNrICAqL1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICBvcGFjaXR5OiAwLjY1O1xuICAvKiB6LWluZGV4IG11c3QgYmUgYmVsb3cgLmp3LW1vZGFsIGFuZCBhYm92ZSBldmVyeXRoaW5nIGVsc2UgICovXG4gIHotaW5kZXg6IDcwMDtcbn1cbmJvZHkuanctbW9kYWwtb3BlbiB7XG4gIC8qIGJvZHkgb3ZlcmZsb3cgaXMgaGlkZGVuIHRvIGhpZGUgbWFpbiBzY3JvbGxiYXIgd2hlbiBtb2RhbCB3aW5kb3cgaXMgb3BlbiAqL1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuIiwiLyogTU9EQUwgU1RZTEVTXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmp3LW1vZGFsIHtcbiAgICAvKiBtb2RhbHMgYXJlIGhpZGRlbiBieSBkZWZhdWx0ICovXG4gICAgZGlzcGxheTogbm9uZTtcblxuICAgIC5qdy1tb2RhbCB7XG4gICAgICAgIC8qIG1vZGFsIGNvbnRhaW5lciBmaXhlZCBhY3Jvc3Mgd2hvbGUgc2NyZWVuICovXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgIC8qIHotaW5kZXggbXVzdCBiZSBoaWdoZXIgdGhhbiAuanctbW9kYWwtYmFja2dyb3VuZCAqL1xuICAgICAgICB6LWluZGV4OiA4MDA7XG5cbiAgICAgICAgLyogZW5hYmxlcyBzY3JvbGxpbmcgZm9yIHRhbGwgbW9kYWxzICovXG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuXG4gICAgICAgIC5qdy1tb2RhbC1ib2R5IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICAgICAgbWluLXdpZHRoOiA2MDBweDtcbiAgICAgICAgICAgIG1heC13aWR0aDogODAlO1xuXG4gICAgICAgICAgICAvKiBtYXJnaW4gZXhwb3NlcyBwYXJ0IG9mIHRoZSBtb2RhbCBiYWNrZ3JvdW5kICovXG4gICAgICAgICAgICBtYXJnaW46IDIwMHB4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmp3LW1vZGFsLWJhY2tncm91bmQge1xuICAgICAgICAvKiBtb2RhbCBiYWNrZ3JvdW5kIGZpeGVkIGFjcm9zcyB3aG9sZSBzY3JlZW4gKi9cbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGxlZnQ6IDA7XG5cbiAgICAgICAgLyogc2VtaS10cmFuc3BhcmVudCBibGFjayAgKi9cbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICAgICAgb3BhY2l0eTogMC42NTtcblxuICAgICAgICAvKiB6LWluZGV4IG11c3QgYmUgYmVsb3cgLmp3LW1vZGFsIGFuZCBhYm92ZSBldmVyeXRoaW5nIGVsc2UgICovXG4gICAgICAgIHotaW5kZXg6IDcwMDtcbiAgICB9XG59XG5cbmJvZHkuanctbW9kYWwtb3BlbiB7XG4gICAgLyogYm9keSBvdmVyZmxvdyBpcyBoaWRkZW4gdG8gaGlkZSBtYWluIHNjcm9sbGJhciB3aGVuIG1vZGFsIHdpbmRvdyBpcyBvcGVuICovXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbiJdfQ== */"

/***/ }),

/***/ "./src/app/_dialogmodal/dialogmodal.component.ts":
/*!*******************************************************!*\
  !*** ./src/app/_dialogmodal/dialogmodal.component.ts ***!
  \*******************************************************/
/*! exports provided: DialogModalComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogModalComponent", function() { return DialogModalComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _dialogmodal_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dialogmodal.service */ "./src/app/_dialogmodal/dialogmodal.service.ts");



var DialogModalComponent = /** @class */ (function () {
    function DialogModalComponent(dialogModalService, el) {
        this.dialogModalService = dialogModalService;
        this.el = el;
        this.element = el.nativeElement;
    }
    DialogModalComponent.prototype.ngOnInit = function () {
        var _this = this;
        // ensure id attribute exists
        if (!this.id) {
            console.error('modal must have an id');
            return;
        }
        // move element to bottom of page (just before </body>) so it can be displayed above everything else
        document.body.appendChild(this.element);
        // close modal on background click
        this.element.addEventListener('click', function (el) {
            if (el.target.className === 'jw-modal') {
                _this.close();
            }
        });
        // add self (this modal instance) to the modal service so it's accessible from controllers
        this.dialogModalService.add(this);
    };
    // remove self from modal service when component is destroyed
    DialogModalComponent.prototype.ngOnDestroy = function () {
        this.dialogModalService.remove(this.id);
        this.element.remove();
    };
    // open modal
    DialogModalComponent.prototype.open = function () {
        this.element.style.display = 'block';
        document.body.classList.add('jw-modal-open');
    };
    // close modal
    DialogModalComponent.prototype.close = function () {
        this.element.style.display = 'none';
        document.body.classList.remove('jw-modal-open');
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], DialogModalComponent.prototype, "id", void 0);
    DialogModalComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'jw-modal',
            template: __webpack_require__(/*! ./dialogmodal.component.html */ "./src/app/_dialogmodal/dialogmodal.component.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./dialogmodal.component.less */ "./src/app/_dialogmodal/dialogmodal.component.less")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_dialogmodal_service__WEBPACK_IMPORTED_MODULE_2__["DialogModalService"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
    ], DialogModalComponent);
    return DialogModalComponent;
}());



/***/ }),

/***/ "./src/app/_dialogmodal/dialogmodal.module.ts":
/*!****************************************************!*\
  !*** ./src/app/_dialogmodal/dialogmodal.module.ts ***!
  \****************************************************/
/*! exports provided: DialogModalModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogModalModule", function() { return DialogModalModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _dialogmodal_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dialogmodal.component */ "./src/app/_dialogmodal/dialogmodal.component.ts");




var DialogModalModule = /** @class */ (function () {
    function DialogModalModule() {
    }
    DialogModalModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
            declarations: [_dialogmodal_component__WEBPACK_IMPORTED_MODULE_3__["DialogModalComponent"]],
            exports: [_dialogmodal_component__WEBPACK_IMPORTED_MODULE_3__["DialogModalComponent"]]
        })
    ], DialogModalModule);
    return DialogModalModule;
}());



/***/ }),

/***/ "./src/app/_dialogmodal/dialogmodal.service.ts":
/*!*****************************************************!*\
  !*** ./src/app/_dialogmodal/dialogmodal.service.ts ***!
  \*****************************************************/
/*! exports provided: DialogModalService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogModalService", function() { return DialogModalService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var DialogModalService = /** @class */ (function () {
    function DialogModalService() {
        this.modals = [];
    }
    DialogModalService.prototype.add = function (modal) {
        // add modal to array of active modals
        this.modals.push(modal);
    };
    DialogModalService.prototype.remove = function (id) {
        // remove modal from array of active modals
        this.modals = this.modals.filter(function (x) { return x.id !== id; });
    };
    DialogModalService.prototype.open = function (id) {
        // open modal specified by id
        var modal = this.modals.find(function (x) { return x.id === id; });
        modal.open();
    };
    DialogModalService.prototype.close = function (id) {
        // close modal specified by id
        var modal = this.modals.find(function (x) { return x.id === id; });
        modal.close();
    };
    DialogModalService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({ providedIn: 'root' })
    ], DialogModalService);
    return DialogModalService;
}());



/***/ }),

/***/ "./src/app/_dialogmodal/index.ts":
/*!***************************************!*\
  !*** ./src/app/_dialogmodal/index.ts ***!
  \***************************************/
/*! exports provided: DialogModalModule, DialogModalService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dialogmodal_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialogmodal.module */ "./src/app/_dialogmodal/dialogmodal.module.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogModalModule", function() { return _dialogmodal_module__WEBPACK_IMPORTED_MODULE_0__["DialogModalModule"]; });

/* harmony import */ var _dialogmodal_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dialogmodal.service */ "./src/app/_dialogmodal/dialogmodal.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogModalService", function() { return _dialogmodal_service__WEBPACK_IMPORTED_MODULE_1__["DialogModalService"]; });





/***/ }),

/***/ "./src/app/accutacytest/accuracyTest.css":
/*!***********************************************!*\
  !*** ./src/app/accutacytest/accuracyTest.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "input.customcheckbox{\r\n    width: 20px !important;\r\n    height: 20px !important;\r\n    margin: -9px 0px 31px 5px;\r\n  }\r\n\r\n  .text-align-right {\r\n    text-align: right !important;\r\n  }\r\n\r\n  .display-none {\r\n    display: none;\r\n  }\r\n\r\n\r\n  \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYWNjdXRhY3l0ZXN0L2FjY3VyYWN5VGVzdC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxzQkFBc0I7SUFDdEIsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtFQUMzQjs7RUFFQTtJQUNFLDRCQUE0QjtFQUM5Qjs7RUFFQTtJQUNFLGFBQWE7RUFDZiIsImZpbGUiOiJzcmMvYXBwL2FjY3V0YWN5dGVzdC9hY2N1cmFjeVRlc3QuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW5wdXQuY3VzdG9tY2hlY2tib3h7XHJcbiAgICB3aWR0aDogMjBweCAhaW1wb3J0YW50O1xyXG4gICAgaGVpZ2h0OiAyMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBtYXJnaW46IC05cHggMHB4IDMxcHggNXB4O1xyXG4gIH1cclxuXHJcbiAgLnRleHQtYWxpZ24tcmlnaHQge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcclxuICB9XHJcblxyXG4gIC5kaXNwbGF5LW5vbmUge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcblxyXG5cclxuICAiXX0= */"

/***/ }),

/***/ "./src/app/accutacytest/accuracyTest.html":
/*!************************************************!*\
  !*** ./src/app/accutacytest/accuracyTest.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\" strokeWidth=\"8\"\r\n        fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n    <p-messages [value]=\"msgs\"></p-messages>\r\n</div>\r\n<div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{errorMsg}}</strong>\r\n</div>\r\n\r\n\r\n<div class=\"col-lg-12\">\r\n    <div class=\"col-lg-6\">\r\n        <form (ngSubmit)=\"onSubmit(dt)\" style=\"text-align: left;\">\r\n\r\n            <p-autoComplete joyrideStep=\"searchCompany\" title=\"Company Name\"\r\n                text=\"This is where a user can enter a desired Company name or CIK. \" [style]=\"{'width':'420px' }\"\r\n                [inputStyle]=\"{'width':'420px'} \" placeholder=\"Search Company\" [dropdown]=\"false\"\r\n                [suggestions]=\"filteredCompany\" name=\"companyName\" [forceSelection]=\"true\"\r\n                (onSelect)=\"onCompanyNameChange($event)\"\r\n                (completeMethod)=\"searchCompany($event)\" [(ngModel)]=\"accuracyTest.companyName\">\r\n            </p-autoComplete>\r\n            <span style=\"width: 5px; padding-left: 10px;\"></span>\r\n            <p-autoComplete placeholder=\"Select Year\" [dropdown]=\"true\" [suggestions]=\"filteredYears\" name=\"year\"\r\n                joyrideStep=\"year\" title=\"Year\" [stepContent]=\"yearContent\" (completeMethod)=\"searchYears($event)\"\r\n                (onSelect)=\"onYearChange($event)\"\r\n                [(ngModel)]=\"accuracyTest.year\">\r\n            </p-autoComplete>\r\n            <span style=\"width: 5px; padding-left: 10px;\"></span>\r\n            <button joyrideStep=\"runTest\" title=\"Run Test\" text=\"This button executes the accuracy test.\"\r\n                class=\"btn btn-primary\" label=\"Save\" style=\"margin:3px\" (click)=\"dt.reset()\"> Run Test</button>\r\n\r\n        </form>\r\n    </div>\r\n    <div class=\"col-lg-5\" *ngIf=\"showTitle\">\r\n\r\n        <button class=\"btn btn-primary pull-left\" label=\"Export\" (click)=\"openlink()\">\r\n            Filing Url</button>\r\n\r\n        <button class=\"btn btn-primary pull-right\" label=\"Export\" style=\"margin-left:8px\"\r\n            (click)=\"exportTableToCSV(dt)\">\r\n            Export</button>\r\n        <button class=\"btn btn-primary pull-right\" label=\"Save\" style=\"margin-left:8px\"\r\n            (click)=\"saveAccuracyTestData()\">\r\n            Save</button>\r\n        <button class=\"btn btn-primary pull-right\" label=\"Research\" style=\"margin-left:8px\"\r\n            (click)=\"openResearchLink()\">\r\n            Research</button>\r\n\r\n\r\n    </div>\r\n    <div class=\"col-lg-1\"></div>\r\n</div>\r\n\r\n<div class=\"col-lg-12\" [ngClass]=\"{'display-none': !showTitle}\">\r\n    <div class=\"col-lg-6\">\r\n\r\n        <span *ngIf=\"showTitle\">{{accuracyTest.companyName}} 10-K</span> <a (click)=\"openlink()\"\r\n            style=\"cursor: pointer;\"><u>{{fillingURL}}</u></a>\r\n        <div [innerHTML]=\"htmlcontent\" style=\"border: black 1px solid; overflow: auto; max-height: 800px;\"></div>\r\n    </div>\r\n    <div class=\"col-lg-6\">\r\n        <div class=\"table-responsive\">\r\n\r\n            <p-table #dt [columns]=\"cols\" [value]=\"accuracyTestList\" [(selection)]=\"selectedAccuracyTest\"\r\n                [paginator]=\"false\" [rows]=\"10\" exportFilename=\"accuracyTestData\">\r\n\r\n\r\n                <ng-template pTemplate=\"header\" let-columns>\r\n                    <tr>\r\n\r\n                        <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColum\r\n                            [ngStyle]=\"{'width': col.width}\" [pSortableColumn]=\"col.field\">\r\n                            <div pTooltip=\"Click to sort {{col.header}}\">\r\n                                {{col.header}}\r\n                                <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                                    ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                    ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                            </div>\r\n                        </th>\r\n\r\n                    </tr>\r\n                </ng-template>\r\n\r\n                <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-col let-rowIndex>\r\n                    <tr>\r\n\r\n                        <td *ngFor=\"let col of columns\" [ngStyle]=\"loadBackgroundColors(col,rowData)\"\r\n                            [ngClass]=\"(col.field === 'csTermValue' || col.field === 'value') ? 'text-align-right' : null\">\r\n                            <span *ngIf=\" col.header==='CS'\" style=\" width: 8em\">\r\n                                {{rowData[col.field]}}</span>\r\n                            <span *ngIf=\"col.field==='csTermValue'\">\r\n                                {{rowData[col.field] | number}}</span>\r\n                            <span *ngIf=\"col.field==='isCheckedCS'\">\r\n                                <input type=\"checkbox\" class=\"form-check-input customcheckbox\"\r\n                                    (click)=\"csCheckboxselect($event,rowData)\" />\r\n                            </span>\r\n                            <span *ngIf=\"col.header==='MAXDS'\">\r\n                                <a href=\"javascript:void(0)\" (click)=\"goManageTermPage(rowData[col.field])\">\r\n                                  {{rowData[col.field]}}\r\n                                </a>\r\n                            </span>\r\n                            <!--<span *ngIf=\"col.header==='MAXDS'\"> {{rowData[col.field]}}</span>-->\r\n                            <span *ngIf=\"col.field==='value'\">\r\n                                {{rowData[col.field] | number}}</span>\r\n                            <span *ngIf=\"col.header==='Resolved Expression'\"> {{rowData[col.field]}}</span>\r\n                            <span *ngIf=\"col.field==='isCheckedMaxDS'\">\r\n                                <input type=\"checkbox\" class=\"form-check-input customcheckbox\"\r\n                                    (click)=\"maxDsCheckboxselect($event,rowData)\" />\r\n                            </span>\r\n                            <span *ngIf=\"col.header==='Notes'\">\r\n                                <input type=\"text\" value=\"\" style=\"width: 5em;\" [(ngModel)]=\"rowData[col.field]\" />\r\n                            </span>\r\n                        </td>\r\n                    </tr>\r\n                </ng-template>\r\n            </p-table>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #yearContent>\r\n    <div>This is where the user can select a desired year. </div>\r\n    <div>Default is current year.\r\n    </div>\r\n</ng-template>\r\n"

/***/ }),

/***/ "./src/app/accutacytest/accuracyTestComponent.ts":
/*!*******************************************************!*\
  !*** ./src/app/accutacytest/accuracyTestComponent.ts ***!
  \*******************************************************/
/*! exports provided: AccuracyTestComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyTestComponent", function() { return AccuracyTestComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _accuracyTestService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./accuracyTestService */ "./src/app/accutacytest/accuracyTestService.ts");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _accuracytestitem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./accuracytestitem */ "./src/app/accutacytest/accuracytestitem.ts");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! primeng/table */ "./node_modules/primeng/table.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(primeng_table__WEBPACK_IMPORTED_MODULE_7__);









var AccuracyTestComponent = /** @class */ (function () {
    function AccuracyTestComponent(profileService, accuracyTestService, router, domsanitizer) {
        this.profileService = profileService;
        this.accuracyTestService = accuracyTestService;
        this.router = router;
        this.domsanitizer = domsanitizer;
        this.progressSpinner = false;
        this.msgs = [];
        this.subscription = [];
        this.accuracytestdata = { items: [] };
        this.years = [];
        this.researchurl = "https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=";
        this.accuracyTest = { year: (new Date()).getFullYear(), companyName: "" };
        this.showTitle = false;
        this.selectedAccuracyTest = [];
        this.accuracyDataItem = { notes: "", isCheckedCS: false, isCheckedMaxDS: false };
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
    }
    AccuracyTestComponent.prototype.loadBackgroundColors = function (column, data) {
        if (data.csTermId === null && data.termId !== null) {
            return { 'background-color': 'white' };
        }
        if (column.field === 'value') {
            if (data.csTermValue === data.value) {
                return { 'background-color': '#00B800' };
            }
            else {
                if ((this.calculatePercentage(data.csTermValue, data.value) < 1.05) && (this.calculatePercentage(data.csTermValue, data.value) > 0)) {
                    return { 'background-color': 'orange' };
                }
                else {
                    return { 'background-color': 'red' };
                }
            }
        }
        else {
            return { 'background-color': 'white' };
        }
    };
    AccuracyTestComponent.prototype.calculatePercentage = function (csValue, mxdsValue) {
        var difPerAvg = (mxdsValue / csValue);
        if (mxdsValue > csValue) {
            difPerAvg = (mxdsValue / csValue);
        }
        else {
            difPerAvg = (csValue / mxdsValue);
        }
        //(maxds/csvalue)*100
        //console.log(difPerAvg);
        return difPerAvg;
    };
    AccuracyTestComponent.prototype.ngOnInit = function () {
        for (var i = 0; i < 5; i++) {
            this.years.push((new Date().getFullYear() - i) + '');
        }
        console.log('accuracyTestComponent : calling ngOnInit...');
        this.cols = [
            { field: 'csTermId', header: 'CS', hidden: false, exportable: true, width: '8%' },
            { field: 'csTermValue', header: this.accuracyTest.year, exportable: true, width: '17%' },
            { field: 'isCheckedCS', header: '', hidden: false, exportable: true, width: '5%' },
            { field: 'termId', header: 'MAXDS', hidden: false, exportable: true, width: '8%' },
            { field: 'value', header: this.accuracyTest.year, hidden: false, exportable: true, width: '17%' },
            { field: 'isCheckedMaxDS', header: '', hidden: false, exportable: true, width: '5%' },
            { field: 'resolvedExpression', header: 'Resolved Expression', exportable: true, width: '29%' },
            { field: 'notes', header: 'Notes', hidden: false, exportable: true, width: '10%' }
        ];
        this.exportColumns = this.cols.map(function (col) { return ({ title: col.header, dataKey: col.field }); });
        this.getCompanyNames();
        if (sessionStorage.getItem('accuracyTest.companyName') !== null) {
            this.accuracyTest.companyName = sessionStorage.getItem('accuracyTest.companyName');
        }
        if (sessionStorage.getItem('accuracyTest.year') !== null) {
            this.accuracyTest.year = JSON.parse(sessionStorage.getItem('accuracyTest.year'));
        }
    };
    AccuracyTestComponent.prototype.onCompanyNameChange = function ($event) {
        console.log(this.accuracyTest.companyName);
        sessionStorage.setItem('accuracyTest.companyName', $event);
    };
    AccuracyTestComponent.prototype.onYearChange = function ($event) {
        console.log(this.accuracyTest.year);
        sessionStorage.setItem('accuracyTest.year', JSON.stringify($event));
    };
    AccuracyTestComponent.prototype.exportTableToCSV = function (table) {
        table.exportCSV();
    };
    AccuracyTestComponent.prototype.csCheckboxselect = function (event, rowdata) {
        var _this = this;
        rowdata.isCheckedCS = event.target.checked;
        if (this.selectedAccuracyTest.length == 0) {
            this.selectedAccuracyTest.push(rowdata);
        }
        else {
            this.selectedAccuracyTest.forEach(function (item) {
                if (item.termId.indexOf(rowdata.termId) == -1 && !item.isCheckedMaxDS) {
                    _this.selectedAccuracyTest.push(rowdata);
                }
                else {
                    if (!event.target.checked && !item.isCheckedMaxDS) {
                        _this.selectedAccuracyTest.splice(rowdata);
                    }
                }
            });
        }
        console.log(this.selectedAccuracyTest);
    };
    AccuracyTestComponent.prototype.maxDsCheckboxselect = function (event, rowdata) {
        var _this = this;
        rowdata.isCheckedMaxDS = event.target.checked;
        if (this.selectedAccuracyTest.length == 0) {
            this.selectedAccuracyTest.push(rowdata);
        }
        else {
            this.selectedAccuracyTest.forEach(function (item) {
                if (item.termId.indexOf(rowdata.termId) == -1 && !item.isCheckedCS) {
                    _this.selectedAccuracyTest.push(rowdata);
                }
                else {
                    if (!event.target.checked && !item.isCheckedCS) {
                        _this.selectedAccuracyTest.splice(rowdata);
                    }
                }
            });
        }
        console.log(this.selectedAccuracyTest);
    };
    AccuracyTestComponent.prototype.saveAccuracyTestData = function () {
        var _this = this;
        this.showError = false;
        console.log(this.selectedAccuracyTest);
        var items = [];
        this.selectedAccuracyTest.forEach(function (selectedItem) {
            _this.accuracydata = new _accuracytestitem__WEBPACK_IMPORTED_MODULE_6__["AccuracyTestItem"]();
            _this.accuracydata.csTermId = selectedItem.csTermId;
            _this.accuracydata.csTermValue = selectedItem.csTermValue;
            _this.accuracydata.isCheckedCS = selectedItem.isCheckedCS;
            _this.accuracydata.isCheckedMaxDS = selectedItem.isCheckedMaxDS;
            _this.accuracydata.resolvedExpression = selectedItem.resolvedExpression;
            _this.accuracydata.termId = selectedItem.termId;
            _this.accuracydata.notes = selectedItem.notes;
            items.push(_this.accuracydata);
        });
        this.accuracytestdata.items = items;
        this.accuracyTestService.saveAccuracyTestData(this.accuracytestdata).subscribe(function (response) {
            _this.onSubmit(null);
        }, function (error) { return console.log(error); });
    };
    AccuracyTestComponent.prototype.searchYears = function () {
        this.filteredYears = [];
        for (var i = 0; i < this.years.length; i++) {
            var year = this.years[i];
            this.filteredYears.push(year);
        }
    };
    AccuracyTestComponent.prototype.onSubmit = function (dt) {
        var _this = this;
        this.showError = false;
        if (this.accuracyTest.companyName === undefined || this.accuracyTest.companyName === null || this.accuracyTest.companyName === "") {
            this.showError = true;
            this.errorMsg = 'Please Select Company to Run Test';
            return;
        }
        this.progressSpinner = true;
        this.msgs = [{ severity: 'info', summary: '"Processing in progress!"', detail: '' }];
        this.dt.columns[1].header = this.accuracyTest.year;
        this.dt.columns[4].header = this.accuracyTest.year;
        this.dt.reset();
        this.accuracyTestService.runAccuracyTest(this.getTermIdOrEntityName(this.accuracyTest.companyName), this.accuracyTest.year).subscribe(function (response) {
            _this.accuracyTestList = [];
            _this.getFilingUrl();
            var HTMLfillingURL = response.filingUrl;
            _this.progressSpinner = false;
            _this.msgs = [{ severity: 'info', summary: '"Processing completed!"', detail: '' }];
            // this.accuracyTestList = response.items;
            setInterval(function () {
                _this.msgs = [];
            }, 50000);
            response.items.forEach(function (item) {
                var resolvedValue;
                if (item.resolvedExpression != null) {
                    resolvedValue = _this.differenceBtnAccu(item.resolvedExpression);
                    //item.resolvedValue = resolvedValue;
                }
                else {
                    resolvedValue = "0";
                    //item.resolvedValue = resolvedValue;
                }
                _this.accuracyTestList.push({
                    termId: item.termId, csTermValue: item.csTermValue, resolvedExpression: item.resolvedExpression,
                    value: item.value, csTermId: item.csTermId, notes: item.notes, isCheckedCS: item.isCheckedCS, isCheckedMaxDS: item.isCheckedMaxDS
                });
            });
            console.log("#######################################################33");
            console.log(_this.accuracyTestList);
            console.log("#######################################################33");
            _this.accuracyTestService.fillingHTMLView(HTMLfillingURL).subscribe(function (response) {
                _this.htmlcontent = _this.domsanitizer.bypassSecurityTrustHtml(response.resultObject);
                //this.htmlcontent = this.domsanitizer.bypassSecurityTrustResourceUrl(response.resultObject);
                //this.htmlcontent = this.domsanitizer.bypassSecurityTrustStyle(response.resultObject);
                //this.htmlcontent = this.domsanitizer.bypassSecurityTrustScript(response.resultObject);
                _this.showTitle = true;
            }, function (error) { return console.log(error); });
        }, function (error) { return console.log(error); });
    };
    ;
    AccuracyTestComponent.prototype.exportAccuracyResults = function () {
        var _this = this;
        this.accuracyTestService.exportAccuracyResults(this.getTermIdOrEntityName(this.accuracyTest.companyName), this.accuracyTest.companyName, this.accuracyTest.year.toString()).subscribe(function (response) {
            console.log(response);
            var blob = new Blob([response], { type: 'text/csv' });
            var url = window.URL.createObjectURL(blob);
            window.open(url);
            _this.showTitle = true;
        });
    };
    AccuracyTestComponent.prototype.differenceBtnAccu = function (value) {
        return value.substr(value.indexOf("=") + 1);
    };
    AccuracyTestComponent.prototype.populateColor = function (record) {
        return "red";
    };
    AccuracyTestComponent.prototype.getTermIdOrEntityName = function (inputValue) {
        var outputValue = inputValue.substring((inputValue.indexOf("(") + 1), inputValue.indexOf(")"));
        return outputValue;
    };
    AccuracyTestComponent.prototype.openTermLink = function (data) {
        var url = 'https://www.sec.gov/Archives/edgar/data/' + data.cik + '/' + data.accession + '-index.htm';
        console.log(url);
        window.open(url, "_blank");
    };
    AccuracyTestComponent.prototype.searchCompany = function (event) {
        this.filteredCompany = [];
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i].name;
            if ((cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) || (cname != null && cname.toLowerCase().includes(event.query.toLowerCase()))) {
                this.filteredCompany.push(cname);
            }
        }
    };
    AccuracyTestComponent.prototype.getCompanyNames = function () {
        var _this = this;
        this.profileService.getCoompanyNames().subscribe(function (response) {
            _this.companyList = [];
            console.log(response);
            response.forEach(function (preferences) {
                _this.companyList.push({ name: preferences });
            });
        }, function (error) { return console.log(error); });
    };
    AccuracyTestComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    AccuracyTestComponent.prototype.openResearchLink = function () {
        var cik = this.getTermIdOrEntityName(this.accuracyTest.companyName);
        window.open(this.researchurl + cik, "_blank");
    };
    AccuracyTestComponent.prototype.openlink = function () {
        window.open(this.fillingURL, "_blank");
    };
    AccuracyTestComponent.prototype.getFilingUrl = function (termId) {
        var _this = this;
        var reqData = {
            companyId: this.accuracyTest.companyName.slice(this.accuracyTest.companyName.indexOf('(') + 1, this.accuracyTest.companyName.indexOf(')')),
            year: this.accuracyTest.year,
            termId: termId ? termId : null
        };
        this.accuracyTestService.getFilingUrl(reqData).subscribe(function (res) {
            if (res && res._body) {
                if (termId) {
                    window.open(res._body, "_blank");
                }
                else {
                    _this.fillingURL = res._body;
                }
            }
        }, function (error) { return console.log(error); });
    };
    AccuracyTestComponent.prototype.goManageTermPage = function (termId) {
        sessionStorage.setItem('accuracyTest.presetTermId', termId);
        //window.open('#/manageTerm', '_self');
        window.open('#/manageTerm', '_blank').focus();
        //sessionStorage is not shared among browser tabs
        sessionStorage.removeItem('accuracyTest.presetTermId');
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(primeng_table__WEBPACK_IMPORTED_MODULE_7__["Table"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", primeng_table__WEBPACK_IMPORTED_MODULE_7__["Table"])
    ], AccuracyTestComponent.prototype, "dt", void 0);
    AccuracyTestComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-accuracy-test',
            template: __webpack_require__(/*! ./accuracyTest.html */ "./src/app/accutacytest/accuracyTest.html"),
            styles: [__webpack_require__(/*! ./accuracyTest.css */ "./src/app/accutacytest/accuracyTest.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_profile_service__WEBPACK_IMPORTED_MODULE_4__["ProfileService"], _accuracyTestService__WEBPACK_IMPORTED_MODULE_3__["AccuracyTestService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _angular_platform_browser__WEBPACK_IMPORTED_MODULE_5__["DomSanitizer"]])
    ], AccuracyTestComponent);
    return AccuracyTestComponent;
}());



/***/ }),

/***/ "./src/app/accutacytest/accuracyTestService.ts":
/*!*****************************************************!*\
  !*** ./src/app/accutacytest/accuracyTestService.ts ***!
  \*****************************************************/
/*! exports provided: AccuracyTestService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyTestService", function() { return AccuracyTestService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");





var AccuracyTestService = /** @class */ (function () {
    function AccuracyTestService(http /*, private request: HttpRequest<any>, private response: HttpResponse<any>*/) {
        this.http = http;
        this.FILINGURL = 'api/getFilingUrl';
        this.FILINGURLS = 'api/getFilingUrls';
        this.LOADACCUDATAURL = "/api/AccuracyTest";
        this.FILLINGHTMLDATAURL = "/api/AccuracyTestGetHtml";
        this.DOWNLOADDATAURL = "/api/download/accuracyTestResults";
        this.SAVEACCURACYDATA = "api/AccuracyTest/save";
    }
    AccuracyTestService.prototype.runAccuracyTest = function (cik, fiscalYear) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        return this.http.get("" + (this.LOADACCUDATAURL + "/" + cik + "/" + fiscalYear), { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            console.log(data);
            return data;
        }));
    };
    AccuracyTestService.prototype.fillingHTMLView = function (fillingUrl) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        return this.http.post("" + this.FILLINGHTMLDATAURL, fillingUrl, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            console.log(data);
            return data;
        }));
    };
    AccuracyTestService.prototype.saveAccuracyTestData = function (accuracyTestData) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        return this.http.post("" + this.SAVEACCURACYDATA, accuracyTestData, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            console.log(data);
            return data;
        }));
    };
    AccuracyTestService.prototype.exportAccuracyResults = function (cik, companyName, fiscalYear) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        /* headers.append('Content-Type', 'application/json');
         headers.append("Access-Control-Allow-Origin", "*");*/
        return this.http.post("" + (this.DOWNLOADDATAURL + "/" + companyName + "/" + cik + "/" + fiscalYear), { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response;
            console.log(data);
            return data;
        }));
    };
    AccuracyTestService.prototype.getFilingUrl = function (reqData) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var url;
        if (reqData) {
            if (reqData.termId) {
                url = "" + (this.FILINGURLS + "/" + reqData.companyId + "/" + reqData.year + "/" + reqData.termId);
            }
            else {
                url = "" + (this.FILINGURL + "/" + reqData.companyId + "/" + reqData.year);
            }
        }
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        return this.http.get(url, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response;
            console.log(data);
            return data;
        }));
    };
    AccuracyTestService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"] /*, private request: HttpRequest<any>, private response: HttpResponse<any>*/])
    ], AccuracyTestService);
    return AccuracyTestService;
}());



/***/ }),

/***/ "./src/app/accutacytest/accuracytestitem.ts":
/*!**************************************************!*\
  !*** ./src/app/accutacytest/accuracytestitem.ts ***!
  \**************************************************/
/*! exports provided: AccuracyTestItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccuracyTestItem", function() { return AccuracyTestItem; });
var AccuracyTestItem = /** @class */ (function () {
    function AccuracyTestItem() {
    }
    return AccuracyTestItem;
}());



/***/ }),

/***/ "./src/app/admin/admin.html":
/*!**********************************!*\
  !*** ./src/app/admin/admin.html ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n\r\n    <h2 style=\"background-color:lightblue; width: 100%; text-align: center;\"> Admin Upload</h2>\r\n\r\n</div>\r\n<div>\r\n    <p-messages [value]=\"msgs\"></p-messages>\r\n</div>\r\n<div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{errorMsg}}</strong>\r\n</div>\r\n<div style=\" margin: 0px 10px; \">\r\n    <div class=\"row\" style=\"margin-bottom: 10px;\">\r\n        <div class=\"col-3\">\r\n            <label>\r\n                Select a lookup reference CSV file to upload:\r\n            </label>\r\n            <p-fileUpload name=\"file\" customUpload=\"true\" (uploadHandler)=\"onUpload($event)\">\r\n                <ng-template pTemplate=\"content\">\r\n                    <ul *ngIf=\"uploadedFiles.length\">\r\n                        <li *ngFor=\"let file of uploadedFiles\">{{file.name}} - {{file.size}} bytes</li>\r\n                    </ul>\r\n                </ng-template>\r\n            </p-fileUpload>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <div class=\"row\">\r\n                <div class=\"col-2\">\r\n                    <div class=\"admin-card\">\r\n                        <div class=\"admin-card-header\">\r\n                            <h1><b>Term Count</b></h1>\r\n                        </div>\r\n                        <div class=\"admin-card-container\">\r\n                            <h3><b>{{termList.length}}</b></h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-2\">\r\n                    <div class=\"admin-card\">\r\n                        <div class=\"admin-card-header\">\r\n                            <h1><b>Entity Count</b></h1>\r\n                        </div>\r\n                        <div class=\"admin-card-container\">\r\n                            <h3><b>{{entityList.length}}</b></h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\" style=\"margin-top: 10px;\" *ngIf=\"reportData.length > 0\">\r\n        <div class=\"col-12\">\r\n            <p-table #reportDataTable [columns]=\"reportDataCols\" [value]=\"reportData\" [responsive]=\" true\"\r\n                [resizableColumns]=\"true\" columnResizeMode=\"expand\" p-dataTable\r\n                (onFilter)=\"updatePagenationCount($event)\">\r\n\r\n                <ng-template pTemplate=\"header\" let-columns>\r\n                    <tr>\r\n                        <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn\r\n                            [pSortableColumn]=\"col.field\">\r\n                            <div pTooltip=\"Click to sort {{col.header}}\">\r\n                                {{col.header}}\r\n                                <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                                    ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                    ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                            </div>\r\n                        </th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                            <div *ngIf=\"col.field !== ''\">\r\n                                <input *ngSwitchCase=\"col.field\" pInputText type=\"text\" placeholder=\"Search\"\r\n                                    [value]=\"reportDataTable.filters[col.field] ? reportDataTable.filters[col.field].value : ''\"\r\n                                    (input)=\"reportDataTable.filter($event.target.value, col.field, col.filterMatchMode); \r\n                            onFilter($event.target.value, col.field, col.filterMatchMode);updatePagenationCount($event)\"\r\n                                    style=\"width: 150px\">\r\n                            </div>\r\n                        </th>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-index=\"rowIndex\">\r\n                    <tr [pSelectableRow]=\"rowData\">\r\n\r\n                        <td *ngFor=\"let col of columns\">\r\n                            <span *ngIf=\"col.header ==='Collection Name'\">\r\n                                <a [href]=\"rowData['collectionURL']\" target=\"_blank\">{{rowData[col.field]}}</a>\r\n                            </span>\r\n                            <span *ngIf=\"col.header !=='Collection Name'\">\r\n                                {{rowData[col.field]}}</span>\r\n                        </td>\r\n                    </tr>\r\n                </ng-template>\r\n\r\n            </p-table>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/adminComponent.ts":
/*!*****************************************!*\
  !*** ./src/app/admin/adminComponent.ts ***!
  \*****************************************/
/*! exports provided: AdminComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdminComponent", function() { return AdminComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");






var AdminComponent = /** @class */ (function () {
    function AdminComponent(utils, router, utilService, profileService) {
        this.utils = utils;
        this.router = router;
        this.utilService = utilService;
        this.profileService = profileService;
        this.subscription = [];
        this.uploadedFiles = [];
        this.msgs = [];
        this.errorMsg = '';
        this.termList = [];
        this.entityList = [];
        this.reportData = [];
        this.reportDataCols = [
            { field: 'rowNumber', header: 'Row Number', width: '10%' },
            { field: 'profileID', header: 'Profile Id', width: '30%' },
            { field: 'collectionType', header: 'Collection Type', width: '30%' },
            { field: 'collectionName', header: 'Collection Name', width: '30%' }
        ];
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
    }
    AdminComponent.prototype.ngOnInit = function () {
        var _this = this;
        var isAdmin = localStorage.getItem("isAdmin");
        if (isAdmin == "null") {
            this.router.navigate(['/home']);
        }
        console.log('adminComponent : calling ngOnInit...');
        Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["forkJoin"])(this.utilService.getTermRuleList(), this.utilService.getCompleteCompanyList(), this.profileService.getReportData()).subscribe(function (_a) {
            var termList = _a[0], entityList = _a[1], reportData = _a[2];
            _this.termList = termList ? termList : [];
            _this.entityList = entityList ? entityList : [];
            if (reportData && reportData.length > 0) {
                reportData.forEach(function (value, index) {
                    value['rowNumber'] = index;
                    _this.reportData.push(value);
                });
            }
        });
    };
    AdminComponent.prototype.onUpload = function (event) {
        var _this = this;
        this.errorMsg = "";
        this.showError = false;
        this.msgs = [];
        var file = event.files[0];
        // for(let file of event.files) {
        //   file = file;
        //     this.uploadedFiles.push(file);
        // }
        //var f = document.getElementById('myFileField').files[0];
        //Take the first selected file
        var fd = new FormData();
        fd.append('file', event.files[0]);
        this.utils.uploadLookupReferenceFile(fd).subscribe(function (response) {
            if (response) {
                _this.msgs = [{ severity: 'info', summary: 'Admin Operation', detail: 'Successfully uploaded file ' + file.name + ' to server.' }];
            }
            else {
                _this.errorMsg = 'Error, Failed to upload file to server.';
                _this.showError = true;
            }
        }, function errorCallback(response) {
            this.errorMsg = 'Error, Failed to upload file to server.';
            this.showError = true;
        });
        // this.messageService.add({severity: 'info', summary: 'File Uploaded', detail: ''});
    };
    AdminComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    AdminComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'admin-page',
            template: __webpack_require__(/*! ./admin.html */ "./src/app/admin/admin.html"),
            styles: [__webpack_require__(/*! ../app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utils_utilService__WEBPACK_IMPORTED_MODULE_3__["UtilService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _utils_utilService__WEBPACK_IMPORTED_MODULE_3__["UtilService"], app_services_profile_service__WEBPACK_IMPORTED_MODULE_5__["ProfileService"]])
    ], AdminComponent);
    return AdminComponent;
}());



/***/ }),

/***/ "./src/app/app.component.css":
/*!***********************************!*\
  !*** ./src/app/app.component.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n\r\n.column1 {\r\n    float: left;\r\n    width: 30%;\r\n    text-align: right;\r\n    padding: 10px\r\n}\r\n.column2 {\r\n  float: right;\r\n  width: 70%;\r\n  text-align: left;\r\n  padding: 10px\r\n}\r\n/* Clear floats after the columns */\r\n.row:after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n}\r\ninput.customcheckbox{\r\n  width: 20px !important;\r\n  height: 20px !important;\r\n}\r\n.rotate{\r\n  /* writing-mode: vertical-rl; */\r\n  font-size: small;\r\n  overflow: auto!important;\r\n  word-wrap: break-word;\r\n  text-overflow: ellipsis !important;\r\n  white-space: normal !important;\r\n  text-align: center !important;\r\n  vertical-align: middle !important;\r\n  transform: rotate(300deg);\r\n}\r\nth.row-header {\r\n  padding: 0 10px;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n.column1 {\r\n  float: left;\r\n  width: 30%;\r\n  text-align: right;\r\n  padding: 10px\r\n}\r\n.column2 {\r\nfloat: right;\r\nwidth: 70%;\r\ntext-align: left;\r\npadding: 10px\r\n}\r\n/* Clear floats after the columns */\r\n.row:after {\r\n  content: \"\";\r\n  display: table;\r\n  clear: both;\r\n}\r\n.expcolumn {\r\n  float: left;\r\n  width: 33.33%;\r\n  padding: 10px;\r\n  height: 300px; \r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n/* Create three equal columns that floats next to each other */\r\n.exprcolumn {\r\n  float: left;\r\n  width: 33.33%;\r\n  padding: 10px;\r\n  height: 50%; \r\n}\r\n::ng-deep .ui-tree-container {\r\n  color: blue;\r\n}\r\n::ng-deep .pi-arrow-right::before {\r\n   content: \"\\F067\";\r\n}\r\n::ng-deep .pi-arrow-down::before {\r\n   content: \"\\F068\";\r\n}\r\n.conceptcolumn {\r\n  float: left;\r\n  width: 45%;\r\n  text-align: left;\r\n  padding: 10px\r\n}\r\n.conceptcolumn1 {\r\n  float: left;\r\n  width: 10%;\r\n  text-align: left;\r\n  padding: 10px\r\n}\r\n.conceptcolumn2 {\r\n  float: left;\r\n  width: 5%;\r\n  text-align: left;\r\n  padding: 10px\r\n}\r\n.conceptcolumn3 {\r\n  float: left;\r\n \r\n  text-align: left;\r\n  padding: 5px\r\n}\r\n::ng-deep p-dialog .ui-dialog {\r\n  overflow: scroll;\r\n  max-height: 100%;\r\n}\r\n.well.selectionCount {\r\n  background: #843534;\r\n  color:white;\r\n}\r\n.admin-card {\r\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n  transition: 0.3s;\r\n  width: 100%;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  \r\n}\r\n.admin-card-header {\r\n\tbackground-color: #d3d2d899;\r\n    border-radius: 5px 5px 0px 0px;\r\n    padding: 5px 0px;\r\n}\r\n.admin-card:hover {\r\n  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n}\r\n.admin-card-container {\r\n  padding: 2px 16px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0E7SUFDSSxXQUFXO0lBQ1gsVUFBVTtJQUNWLGlCQUFpQjtJQUNqQjtBQUNKO0FBQ0E7RUFDRSxZQUFZO0VBQ1osVUFBVTtFQUNWLGdCQUFnQjtFQUNoQjtBQUNGO0FBQ0EsbUNBQW1DO0FBQ25DO0lBQ0ksV0FBVztJQUNYLGNBQWM7SUFDZCxXQUFXO0FBQ2Y7QUFDQTtFQUNFLHNCQUFzQjtFQUN0Qix1QkFBdUI7QUFDekI7QUFFQTtFQUNFLCtCQUErQjtFQUMvQixnQkFBZ0I7RUFDaEIsd0JBQXdCO0VBQ3hCLHFCQUFxQjtFQUNyQixrQ0FBa0M7RUFDbEMsOEJBQThCO0VBQzlCLDZCQUE2QjtFQUM3QixpQ0FBaUM7RUFHakMseUJBQXlCO0FBQzNCO0FBQ0E7RUFDRSxlQUFlO0VBQ2YsNkJBQTZCO0FBQy9CO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsVUFBVTtFQUNWLGlCQUFpQjtFQUNqQjtBQUNGO0FBQ0E7QUFDQSxZQUFZO0FBQ1osVUFBVTtBQUNWLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0VBQ0UsV0FBVztFQUNYLGNBQWM7RUFDZCxXQUFXO0FBQ2I7QUFDQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2IsYUFBYTtFQUNiLGFBQWE7QUFDZjtBQUNBO0VBQ0Usc0JBQXNCO0FBQ3hCO0FBR0EsOERBQThEO0FBQzlEO0VBQ0UsV0FBVztFQUNYLGFBQWE7RUFDYixhQUFhO0VBQ2IsV0FBVztBQUNiO0FBRUE7RUFDRSxXQUFXO0FBQ2I7QUFFQTtHQUNHLGdCQUFnQjtBQUNuQjtBQUVBO0dBQ0csZ0JBQWdCO0FBQ25CO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsVUFBVTtFQUNWLGdCQUFnQjtFQUNoQjtBQUNGO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsVUFBVTtFQUNWLGdCQUFnQjtFQUNoQjtBQUNGO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsU0FBUztFQUNULGdCQUFnQjtFQUNoQjtBQUNGO0FBQ0E7RUFDRSxXQUFXOztFQUVYLGdCQUFnQjtFQUNoQjtBQUNGO0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCO0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsV0FBVztBQUNiO0FBRUE7RUFDRSx1Q0FBdUM7RUFDdkMsZ0JBQWdCO0VBQ2hCLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsa0JBQWtCOztBQUVwQjtBQUVBO0NBQ0MsMkJBQTJCO0lBQ3hCLDhCQUE4QjtJQUM5QixnQkFBZ0I7QUFDcEI7QUFFQTtFQUNFLHdDQUF3QztBQUMxQztBQUdBO0VBQ0UsaUJBQWlCO0FBQ25CIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcblxyXG4uY29sdW1uMSB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIHBhZGRpbmc6IDEwcHhcclxufVxyXG4uY29sdW1uMiB7XHJcbiAgZmxvYXQ6IHJpZ2h0O1xyXG4gIHdpZHRoOiA3MCU7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBwYWRkaW5nOiAxMHB4XHJcbn1cclxuLyogQ2xlYXIgZmxvYXRzIGFmdGVyIHRoZSBjb2x1bW5zICovXHJcbi5yb3c6YWZ0ZXIge1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4gICAgY2xlYXI6IGJvdGg7XHJcbn1cclxuaW5wdXQuY3VzdG9tY2hlY2tib3h7XHJcbiAgd2lkdGg6IDIwcHggIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDIwcHggIWltcG9ydGFudDtcclxufVxyXG5cclxuLnJvdGF0ZXtcclxuICAvKiB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsOyAqL1xyXG4gIGZvbnQtc2l6ZTogc21hbGw7XHJcbiAgb3ZlcmZsb3c6IGF1dG8haW1wb3J0YW50O1xyXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcclxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcyAhaW1wb3J0YW50O1xyXG4gIHdoaXRlLXNwYWNlOiBub3JtYWwgIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlICFpbXBvcnRhbnQ7XHJcbiAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDMwMGRlZyk7XHJcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzMDBkZWcpO1xyXG4gIHRyYW5zZm9ybTogcm90YXRlKDMwMGRlZyk7XHJcbn1cclxudGgucm93LWhlYWRlciB7XHJcbiAgcGFkZGluZzogMCAxMHB4O1xyXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjO1xyXG59XHJcbi5jb2x1bW4xIHtcclxuICBmbG9hdDogbGVmdDtcclxuICB3aWR0aDogMzAlO1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gIHBhZGRpbmc6IDEwcHhcclxufVxyXG4uY29sdW1uMiB7XHJcbmZsb2F0OiByaWdodDtcclxud2lkdGg6IDcwJTtcclxudGV4dC1hbGlnbjogbGVmdDtcclxucGFkZGluZzogMTBweFxyXG59XHJcbi8qIENsZWFyIGZsb2F0cyBhZnRlciB0aGUgY29sdW1ucyAqL1xyXG4ucm93OmFmdGVyIHtcclxuICBjb250ZW50OiBcIlwiO1xyXG4gIGRpc3BsYXk6IHRhYmxlO1xyXG4gIGNsZWFyOiBib3RoO1xyXG59XHJcbi5leHBjb2x1bW4ge1xyXG4gIGZsb2F0OiBsZWZ0O1xyXG4gIHdpZHRoOiAzMy4zMyU7XHJcbiAgcGFkZGluZzogMTBweDtcclxuICBoZWlnaHQ6IDMwMHB4OyBcclxufVxyXG4qIHtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5cclxuLyogQ3JlYXRlIHRocmVlIGVxdWFsIGNvbHVtbnMgdGhhdCBmbG9hdHMgbmV4dCB0byBlYWNoIG90aGVyICovXHJcbi5leHByY29sdW1uIHtcclxuICBmbG9hdDogbGVmdDtcclxuICB3aWR0aDogMzMuMzMlO1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgaGVpZ2h0OiA1MCU7IFxyXG59XHJcblxyXG46Om5nLWRlZXAgLnVpLXRyZWUtY29udGFpbmVyIHtcclxuICBjb2xvcjogYmx1ZTtcclxufVxyXG5cclxuOjpuZy1kZWVwIC5waS1hcnJvdy1yaWdodDo6YmVmb3JlIHtcclxuICAgY29udGVudDogXCJcXEYwNjdcIjtcclxufVxyXG5cclxuOjpuZy1kZWVwIC5waS1hcnJvdy1kb3duOjpiZWZvcmUge1xyXG4gICBjb250ZW50OiBcIlxcRjA2OFwiO1xyXG59XHJcbi5jb25jZXB0Y29sdW1uIHtcclxuICBmbG9hdDogbGVmdDtcclxuICB3aWR0aDogNDUlO1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgcGFkZGluZzogMTBweFxyXG59XHJcbi5jb25jZXB0Y29sdW1uMSB7XHJcbiAgZmxvYXQ6IGxlZnQ7XHJcbiAgd2lkdGg6IDEwJTtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIHBhZGRpbmc6IDEwcHhcclxufVxyXG4uY29uY2VwdGNvbHVtbjIge1xyXG4gIGZsb2F0OiBsZWZ0O1xyXG4gIHdpZHRoOiA1JTtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIHBhZGRpbmc6IDEwcHhcclxufVxyXG4uY29uY2VwdGNvbHVtbjMge1xyXG4gIGZsb2F0OiBsZWZ0O1xyXG4gXHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBwYWRkaW5nOiA1cHhcclxufVxyXG5cclxuOjpuZy1kZWVwIHAtZGlhbG9nIC51aS1kaWFsb2cge1xyXG4gIG92ZXJmbG93OiBzY3JvbGw7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLndlbGwuc2VsZWN0aW9uQ291bnQge1xyXG4gIGJhY2tncm91bmQ6ICM4NDM1MzQ7XHJcbiAgY29sb3I6d2hpdGU7XHJcbn1cclxuXHJcbi5hZG1pbi1jYXJkIHtcclxuICBib3gtc2hhZG93OiAwIDRweCA4cHggMCByZ2JhKDAsMCwwLDAuMik7XHJcbiAgdHJhbnNpdGlvbjogMC4zcztcclxuICB3aWR0aDogMTAwJTtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIFxyXG59XHJcblxyXG4uYWRtaW4tY2FyZC1oZWFkZXIge1xyXG5cdGJhY2tncm91bmQtY29sb3I6ICNkM2QyZDg5OTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweCA1cHggMHB4IDBweDtcclxuICAgIHBhZGRpbmc6IDVweCAwcHg7XHJcbn1cclxuXHJcbi5hZG1pbi1jYXJkOmhvdmVyIHtcclxuICBib3gtc2hhZG93OiAwIDhweCAxNnB4IDAgcmdiYSgwLDAsMCwwLjIpO1xyXG59XHJcblxyXG5cclxuLmFkbWluLWNhcmQtY29udGFpbmVyIHtcclxuICBwYWRkaW5nOiAycHggMTZweDtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/app.component.html":
/*!************************************!*\
  !*** ./src/app/app.component.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!--The whole content below can be removed with the new code.-->\r\n\r\n\r\n\r\n<div>\r\n  <div *ngIf=\"showmenu\">\r\n    <app-header></app-header>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n</div>"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var app_services_login_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/services/login.service */ "./src/app/services/login.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _ng_idle_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ng-idle/core */ "./node_modules/@ng-idle/core/fesm5/ng-idle-core.js");
/* harmony import */ var _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ng-idle/keepalive */ "./node_modules/@ng-idle/keepalive/fesm5/ng-idle-keepalive.js");
/* harmony import */ var ngx_joyride__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-joyride */ "./node_modules/ngx-joyride/fesm5/ngx-joyride.js");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var app_utils_utilService__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/utils/utilService */ "./src/app/utils/utilService.ts");









var AppComponent = /** @class */ (function () {
    function AppComponent(login, router, idle, keepalive, joyrideService, utilService, profileService) {
        this.login = login;
        this.router = router;
        this.idle = idle;
        this.keepalive = keepalive;
        this.joyrideService = joyrideService;
        this.utilService = utilService;
        this.profileService = profileService;
        this.title = 'Maxds application';
        this.showmenu = true;
        this.username = '';
        this.timedOut = false;
        this.lastPing = null;
        this.onUserNameChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.login.userId = localStorage.getItem("userid");
        // localStorage.clear();
    }
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])('onUserNameChange'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], AppComponent.prototype, "onUserNameChange", void 0);
    AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./app.component.html */ "./src/app/app.component.html"),
            styles: [__webpack_require__(/*! ./app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_login_service__WEBPACK_IMPORTED_MODULE_2__["LoginService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], _ng_idle_core__WEBPACK_IMPORTED_MODULE_4__["Idle"], _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_5__["Keepalive"],
            ngx_joyride__WEBPACK_IMPORTED_MODULE_6__["JoyrideService"], app_utils_utilService__WEBPACK_IMPORTED_MODULE_8__["UtilService"], app_services_profile_service__WEBPACK_IMPORTED_MODULE_7__["ProfileService"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _app_routing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app.routing */ "./src/app/app.routing.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! primeng/table */ "./node_modules/primeng/table.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(primeng_table__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! primeng/tooltip */ "./node_modules/primeng/tooltip.js");
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(primeng_tooltip__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var primeng_chart__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! primeng/chart */ "./node_modules/primeng/chart.js");
/* harmony import */ var primeng_chart__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(primeng_chart__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ng-idle/keepalive */ "./node_modules/@ng-idle/keepalive/fesm5/ng-idle-keepalive.js");
/* harmony import */ var angular2_moment__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! angular2-moment */ "./node_modules/angular2-moment/index.js");
/* harmony import */ var angular2_moment__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(angular2_moment__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var primeng_treetable__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! primeng/treetable */ "./node_modules/primeng/treetable.js");
/* harmony import */ var primeng_treetable__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(primeng_treetable__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var angular_morris_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! angular-morris-js */ "./node_modules/angular-morris-js/esm5/angular-morris-js.js");
/* harmony import */ var angular2_draggable__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! angular2-draggable */ "./node_modules/angular2-draggable/fesm5/angular2-draggable.js");
/* harmony import */ var ngx_joyride__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ngx-joyride */ "./node_modules/ngx-joyride/fesm5/ngx-joyride.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! primeng/primeng */ "./node_modules/primeng/primeng.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(primeng_primeng__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _home_homeComponent__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./home/homeComponent */ "./src/app/home/homeComponent.ts");
/* harmony import */ var _home_homeService__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./home/homeService */ "./src/app/home/homeService.ts");
/* harmony import */ var _profile_profile_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./profile/profile.component */ "./src/app/profile/profile.component.ts");
/* harmony import */ var _services_profile_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var _export_exportComponent__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./export/exportComponent */ "./src/app/export/exportComponent.ts");
/* harmony import */ var _export_exportService__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./export/exportService */ "./src/app/export/exportService.ts");
/* harmony import */ var _accutacytest_accuracyTestComponent__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./accutacytest/accuracyTestComponent */ "./src/app/accutacytest/accuracyTestComponent.ts");
/* harmony import */ var _accutacytest_accuracyTestService__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./accutacytest/accuracyTestService */ "./src/app/accutacytest/accuracyTestService.ts");
/* harmony import */ var _manageTerm_manageTermComponent__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./manageTerm/manageTermComponent */ "./src/app/manageTerm/manageTermComponent.ts");
/* harmony import */ var _manageTerm_manageTermService__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./manageTerm/manageTermService */ "./src/app/manageTerm/manageTermService.ts");
/* harmony import */ var _processingTerms_processingTermsComponent__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./processingTerms/processingTermsComponent */ "./src/app/processingTerms/processingTermsComponent.ts");
/* harmony import */ var _processingTerms_processingTermsService__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./processingTerms/processingTermsService */ "./src/app/processingTerms/processingTermsService.ts");
/* harmony import */ var _admin_adminComponent__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./admin/adminComponent */ "./src/app/admin/adminComponent.ts");
/* harmony import */ var _submitFeedback_submitFeedbackComponent__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./submitFeedback/submitFeedbackComponent */ "./src/app/submitFeedback/submitFeedbackComponent.ts");
/* harmony import */ var _submitFeedback_submitFeedbackService__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./submitFeedback/submitFeedbackService */ "./src/app/submitFeedback/submitFeedbackService.ts");
/* harmony import */ var _status_statusComponent__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./status/statusComponent */ "./src/app/status/statusComponent.ts");
/* harmony import */ var _status_statusService__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./status/statusService */ "./src/app/status/statusService.ts");
/* harmony import */ var _domain_status__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./domain/status */ "./src/app/domain/status.ts");
/* harmony import */ var _domain_termMap__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./domain/termMap */ "./src/app/domain/termMap.ts");
/* harmony import */ var _domain_home__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./domain/home */ "./src/app/domain/home.ts");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var _domain_mappedEntity__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./domain/mappedEntity */ "./src/app/domain/mappedEntity.ts");
/* harmony import */ var _domain_termRule__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./domain/termRule */ "./src/app/domain/termRule.ts");
/* harmony import */ var _domain_editExpression__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./domain/editExpression */ "./src/app/domain/editExpression.ts");
/* harmony import */ var _domain_termMapInformation__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./domain/termMapInformation */ "./src/app/domain/termMapInformation.ts");
/* harmony import */ var _domain_groupTermMapInformation__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./domain/groupTermMapInformation */ "./src/app/domain/groupTermMapInformation.ts");
/* harmony import */ var _term_results_term_results_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./term-results/term-results.component */ "./src/app/term-results/term-results.component.ts");
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./login/login.component */ "./src/app/login/login.component.ts");
/* harmony import */ var _header_header_component__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./header/header.component */ "./src/app/header/header.component.ts");
/* harmony import */ var _featurehome_featurehome_component__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./featurehome/featurehome.component */ "./src/app/featurehome/featurehome.component.ts");
/* harmony import */ var _featurehome_resizable_directive__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./featurehome/resizable.directive */ "./src/app/featurehome/resizable.directive.ts");
/* harmony import */ var angular_split__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! angular-split */ "./node_modules/angular-split/fesm5/angular-split.js");
/* harmony import */ var _featurehome_highlight_pipe__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./featurehome/highlight.pipe */ "./src/app/featurehome/highlight.pipe.ts");
/* harmony import */ var angular_d3_tree__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! angular-d3-tree */ "./node_modules/angular-d3-tree/fesm5/angular-d3-tree.js");
/* harmony import */ var _profile_create_profile_create_profile_component__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./profile/create-profile/create-profile.component */ "./src/app/profile/create-profile/create-profile.component.ts");
/* harmony import */ var _profile_share_preferences_share_preferences_component__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./profile/share-preferences/share-preferences.component */ "./src/app/profile/share-preferences/share-preferences.component.ts");
/* harmony import */ var _dialogmodal__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./_dialogmodal */ "./src/app/_dialogmodal/index.ts");


























































var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
            declarations: [
                _home_homeComponent__WEBPACK_IMPORTED_MODULE_21__["HomeComponent"],
                _profile_profile_component__WEBPACK_IMPORTED_MODULE_23__["ProfileComponent"],
                _profile_create_profile_create_profile_component__WEBPACK_IMPORTED_MODULE_55__["CreateProfileComponent"],
                _export_exportComponent__WEBPACK_IMPORTED_MODULE_25__["ExportComponent"],
                _accutacytest_accuracyTestComponent__WEBPACK_IMPORTED_MODULE_27__["AccuracyTestComponent"],
                _manageTerm_manageTermComponent__WEBPACK_IMPORTED_MODULE_29__["ManageTermComponent"],
                _processingTerms_processingTermsComponent__WEBPACK_IMPORTED_MODULE_31__["ProcessingTermsComponent"],
                _admin_adminComponent__WEBPACK_IMPORTED_MODULE_33__["AdminComponent"],
                _submitFeedback_submitFeedbackComponent__WEBPACK_IMPORTED_MODULE_34__["SubmitFeedbackComponent"],
                _status_statusComponent__WEBPACK_IMPORTED_MODULE_36__["StatusComponent"],
                _app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"],
                _login_login_component__WEBPACK_IMPORTED_MODULE_48__["LoginComponent"],
                _header_header_component__WEBPACK_IMPORTED_MODULE_49__["HeaderComponent"],
                _featurehome_featurehome_component__WEBPACK_IMPORTED_MODULE_50__["FeaturehomeComponent"],
                _term_results_term_results_component__WEBPACK_IMPORTED_MODULE_47__["TermResultsComponent"],
                _featurehome_resizable_directive__WEBPACK_IMPORTED_MODULE_51__["ResizableDirective"],
                _featurehome_highlight_pipe__WEBPACK_IMPORTED_MODULE_53__["HighlightPipe"],
                _profile_share_preferences_share_preferences_component__WEBPACK_IMPORTED_MODULE_56__["SharePreferencesComponent"]
            ],
            imports: [
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormsModule"], _angular_http__WEBPACK_IMPORTED_MODULE_7__["HttpModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["AccordionModule"], _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__["BrowserAnimationsModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["RadioButtonModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["CardModule"],
                _app_routing__WEBPACK_IMPORTED_MODULE_8__["routing"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["DialogModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["MultiSelectModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["CheckboxModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["DropdownModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["ButtonModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["PanelModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["TabViewModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_6__["ReactiveFormsModule"],
                primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["SidebarModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["PaginatorModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["ProgressSpinnerModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["InputTextareaModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["TriStateCheckboxModule"], primeng_table__WEBPACK_IMPORTED_MODULE_11__["TableModule"], primeng_tooltip__WEBPACK_IMPORTED_MODULE_12__["TooltipModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["TreeModule"], primeng_chart__WEBPACK_IMPORTED_MODULE_13__["ChartModule"],
                primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["ConfirmDialogModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["MessageModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["MessagesModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["CalendarModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["ListboxModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["AutoCompleteModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["SelectButtonModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["SliderModule"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["InputSwitchModule"],
                primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["FileUploadModule"], _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClientModule"], _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_14__["NgIdleKeepaliveModule"].forRoot(), angular2_moment__WEBPACK_IMPORTED_MODULE_15__["MomentModule"], primeng_treetable__WEBPACK_IMPORTED_MODULE_16__["TreeTableModule"], ngx_joyride__WEBPACK_IMPORTED_MODULE_19__["JoyrideModule"].forRoot(),
                angular_split__WEBPACK_IMPORTED_MODULE_52__["AngularSplitModule"].forRoot(), angular_d3_tree__WEBPACK_IMPORTED_MODULE_54__["AngularD3TreeLibModule"], angular_morris_js__WEBPACK_IMPORTED_MODULE_17__["MorrisJsModule"], angular2_draggable__WEBPACK_IMPORTED_MODULE_18__["AngularDraggableModule"], _dialogmodal__WEBPACK_IMPORTED_MODULE_57__["DialogModalModule"]
            ],
            providers: [_home_homeService__WEBPACK_IMPORTED_MODULE_22__["HomeService"], _services_profile_service__WEBPACK_IMPORTED_MODULE_24__["ProfileService"], _export_exportService__WEBPACK_IMPORTED_MODULE_26__["ExportService"], _accutacytest_accuracyTestService__WEBPACK_IMPORTED_MODULE_28__["AccuracyTestService"], _manageTerm_manageTermService__WEBPACK_IMPORTED_MODULE_30__["ManageTermService"], _processingTerms_processingTermsService__WEBPACK_IMPORTED_MODULE_32__["ProcessingTermsService"], _submitFeedback_submitFeedbackService__WEBPACK_IMPORTED_MODULE_35__["SubmitFeedbackService"], _status_statusService__WEBPACK_IMPORTED_MODULE_37__["StatusService"], _utils_utilService__WEBPACK_IMPORTED_MODULE_41__["UtilService"],
                primeng_api__WEBPACK_IMPORTED_MODULE_9__["ConfirmationService"], primeng_primeng__WEBPACK_IMPORTED_MODULE_20__["MessageModule"], _domain_status__WEBPACK_IMPORTED_MODULE_38__["Status"], _domain_termMap__WEBPACK_IMPORTED_MODULE_39__["TermMap"], _domain_home__WEBPACK_IMPORTED_MODULE_40__["Home"], _domain_mappedEntity__WEBPACK_IMPORTED_MODULE_42__["MappedEntity"], _status_statusService__WEBPACK_IMPORTED_MODULE_37__["StatusService"], _domain_termRule__WEBPACK_IMPORTED_MODULE_43__["TermRule"], _domain_editExpression__WEBPACK_IMPORTED_MODULE_44__["EditExpression"], _domain_termMapInformation__WEBPACK_IMPORTED_MODULE_45__["TermMapInformation"], _domain_groupTermMapInformation__WEBPACK_IMPORTED_MODULE_46__["GroupTermMapInformation"],
                { provide: _angular_common__WEBPACK_IMPORTED_MODULE_10__["LocationStrategy"], useClass: _angular_common__WEBPACK_IMPORTED_MODULE_10__["HashLocationStrategy"] }, _header_header_component__WEBPACK_IMPORTED_MODULE_49__["HeaderComponent"]],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"]]
        })
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/app.routing.ts":
/*!********************************!*\
  !*** ./src/app/app.routing.ts ***!
  \********************************/
/*! exports provided: routing */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "routing", function() { return routing; });
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _home_homeComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./home/homeComponent */ "./src/app/home/homeComponent.ts");
/* harmony import */ var _profile_profile_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./profile/profile.component */ "./src/app/profile/profile.component.ts");
/* harmony import */ var _export_exportComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./export/exportComponent */ "./src/app/export/exportComponent.ts");
/* harmony import */ var _accutacytest_accuracyTestComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./accutacytest/accuracyTestComponent */ "./src/app/accutacytest/accuracyTestComponent.ts");
/* harmony import */ var _manageTerm_manageTermComponent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./manageTerm/manageTermComponent */ "./src/app/manageTerm/manageTermComponent.ts");
/* harmony import */ var _processingTerms_processingTermsComponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./processingTerms/processingTermsComponent */ "./src/app/processingTerms/processingTermsComponent.ts");
/* harmony import */ var _admin_adminComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./admin/adminComponent */ "./src/app/admin/adminComponent.ts");
/* harmony import */ var _submitFeedback_submitFeedbackComponent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./submitFeedback/submitFeedbackComponent */ "./src/app/submitFeedback/submitFeedbackComponent.ts");
/* harmony import */ var _status_statusComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./status/statusComponent */ "./src/app/status/statusComponent.ts");
/* harmony import */ var _term_results_term_results_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./term-results/term-results.component */ "./src/app/term-results/term-results.component.ts");
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./login/login.component */ "./src/app/login/login.component.ts");
/* harmony import */ var _header_header_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./header/header.component */ "./src/app/header/header.component.ts");
/* harmony import */ var _featurehome_featurehome_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./featurehome/featurehome.component */ "./src/app/featurehome/featurehome.component.ts");
/* harmony import */ var _resolvers_completecompanylist_resolver_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resolvers/completecompanylist-resolver.service */ "./src/app/resolvers/completecompanylist-resolver.service.ts");
/* harmony import */ var _resolvers_termlist_resolver_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resolvers/termlist-resolver.service */ "./src/app/resolvers/termlist-resolver.service.ts");
/* harmony import */ var _resolvers_termrulecategorylist_resolver_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resolvers/termrulecategorylist-resolver.service */ "./src/app/resolvers/termrulecategorylist-resolver.service.ts");

















var routes = [
    { path: '', redirectTo: 'home', pathMatch: 'full', runGuardsAndResolvers: 'always' },
    { path: 'home', component: _featurehome_featurehome_component__WEBPACK_IMPORTED_MODULE_13__["FeaturehomeComponent"], runGuardsAndResolvers: 'always',
        resolve: { completeCompanyList: _resolvers_completecompanylist_resolver_service__WEBPACK_IMPORTED_MODULE_14__["CompleteCompanylistResolverService"],
            termRuleList: _resolvers_termlist_resolver_service__WEBPACK_IMPORTED_MODULE_15__["TermlistResolverService"],
            termRuleCategoryList: _resolvers_termrulecategorylist_resolver_service__WEBPACK_IMPORTED_MODULE_16__["TermRuleCategoryListResolverService"] } },
    // { path: 'home', component: HomeComponent, runGuardsAndResolvers: 'always'},
    { path: 'header', component: _header_header_component__WEBPACK_IMPORTED_MODULE_12__["HeaderComponent"], runGuardsAndResolvers: 'always' },
    { path: 'maxds', component: _home_homeComponent__WEBPACK_IMPORTED_MODULE_1__["HomeComponent"], runGuardsAndResolvers: 'always' },
    { path: 'termresults', component: _term_results_term_results_component__WEBPACK_IMPORTED_MODULE_10__["TermResultsComponent"], runGuardsAndResolvers: 'always' },
    { path: 'profile', component: _profile_profile_component__WEBPACK_IMPORTED_MODULE_2__["ProfileComponent"], runGuardsAndResolvers: 'always' },
    { path: 'export', component: _export_exportComponent__WEBPACK_IMPORTED_MODULE_3__["ExportComponent"], runGuardsAndResolvers: 'always',
        resolve: { completeCompanyList: _resolvers_completecompanylist_resolver_service__WEBPACK_IMPORTED_MODULE_14__["CompleteCompanylistResolverService"],
            termRuleList: _resolvers_termlist_resolver_service__WEBPACK_IMPORTED_MODULE_15__["TermlistResolverService"] } },
    { path: 'accuracyTest', component: _accutacytest_accuracyTestComponent__WEBPACK_IMPORTED_MODULE_4__["AccuracyTestComponent"], runGuardsAndResolvers: 'always' },
    { path: 'manageTerm', component: _manageTerm_manageTermComponent__WEBPACK_IMPORTED_MODULE_5__["ManageTermComponent"], runGuardsAndResolvers: 'always' },
    { path: 'processTerm', component: _processingTerms_processingTermsComponent__WEBPACK_IMPORTED_MODULE_6__["ProcessingTermsComponent"], runGuardsAndResolvers: 'always' },
    { path: 'admin', component: _admin_adminComponent__WEBPACK_IMPORTED_MODULE_7__["AdminComponent"], runGuardsAndResolvers: 'always' },
    { path: 'status', component: _status_statusComponent__WEBPACK_IMPORTED_MODULE_9__["StatusComponent"], runGuardsAndResolvers: 'always' },
    { path: 'submit', component: _submitFeedback_submitFeedbackComponent__WEBPACK_IMPORTED_MODULE_8__["SubmitFeedbackComponent"], runGuardsAndResolvers: 'always' },
    { path: 'logout', component: _login_login_component__WEBPACK_IMPORTED_MODULE_11__["LoginComponent"], runGuardsAndResolvers: 'always' },
    { path: 'login', component: _login_login_component__WEBPACK_IMPORTED_MODULE_11__["LoginComponent"], runGuardsAndResolvers: 'always' }
];
var routing = _angular_router__WEBPACK_IMPORTED_MODULE_0__["RouterModule"].forRoot(routes, { onSameUrlNavigation: 'reload' });


/***/ }),

/***/ "./src/app/domain/editExpression.ts":
/*!******************************************!*\
  !*** ./src/app/domain/editExpression.ts ***!
  \******************************************/
/*! exports provided: EditExpression */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditExpression", function() { return EditExpression; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var EditExpression = /** @class */ (function () {
    function EditExpression() {
        this.expression = '';
        this.axisExpression = '';
        this.memberExpression = '';
        this.type = '';
        this.conceptName = null;
        this.NamedAxisList = [];
        this.NamedMemberList = [];
        this.conceptMatchMultipleList = [];
        this.virtualFactMemberExclusionList = [];
        this.virtualFactAxis = null;
        this.virtualFactMemberExclusions = [];
        this.dimensionExpressionSets = [];
        this.balType = null;
        this.perType = null;
        this.containsWords = [];
        this.doesNotContainsWords = [];
        this.usePositiveValuesOnly = false;
        this.useNegativeValuesOnly = false;
        this.reverseNegativeValues = false;
        this.formulaList = [];
    }
    EditExpression = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], EditExpression);
    return EditExpression;
}());



/***/ }),

/***/ "./src/app/domain/groupTermMapInformation.ts":
/*!***************************************************!*\
  !*** ./src/app/domain/groupTermMapInformation.ts ***!
  \***************************************************/
/*! exports provided: GroupTermMapInformation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupTermMapInformation", function() { return GroupTermMapInformation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _termMapInformation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./termMapInformation */ "./src/app/domain/termMapInformation.ts");



var GroupTermMapInformation = /** @class */ (function () {
    function GroupTermMapInformation(termMap) {
        this.termMap = termMap;
        this.isEditing = false;
        this.isTermRule = true;
    }
    GroupTermMapInformation = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_termMapInformation__WEBPACK_IMPORTED_MODULE_2__["TermMapInformation"]])
    ], GroupTermMapInformation);
    return GroupTermMapInformation;
}());



/***/ }),

/***/ "./src/app/domain/home.ts":
/*!********************************!*\
  !*** ./src/app/domain/home.ts ***!
  \********************************/
/*! exports provided: Home */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Home", function() { return Home; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var Home = /** @class */ (function () {
    function Home() {
        this.children = [];
    }
    Home.prototype.homeCols = function () {
        this.homeCol = [
            { field: 'rank', header: 'Rank', width: '12%' },
            { field: 'type', header: 'Type', width: '25%' },
            { field: 'expression', header: 'Expression', width: '58%' },
            { field: 'options', header: 'Options', width: '15%' },
        ];
        return this.homeCol;
    };
    Home.prototype.modalExpressioncols = function () {
        return [
            { field: 'rank', header: 'Rank', width: '12%' },
            { field: 'type', header: 'Type', width: '25%' },
            { field: 'expression', header: 'Expression', width: '58%' }
        ];
    };
    Home.prototype.homeEntityCols = function () {
        this.homeEntityCol = [
            { field: 'cik', header: 'Cik', width: '10%' },
            { field: 'companyName', header: 'Company Name', width: '20%' },
            { field: 'viewResultLink', header: 'View Result Link', width: '15%' },
            { field: 'validationStatus', header: 'Validation Status', width: '15%' },
            { field: 'researchLink', header: 'Research Link', width: '15%' },
            { field: 'fsqvLink', header: 'FSQV Link', width: '15%' },
            { field: 'processTermLink', header: 'Process Term Link', width: '10%' },
        ];
        return this.homeEntityCol;
    };
    Home = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], Home);
    return Home;
}());



/***/ }),

/***/ "./src/app/domain/mappedEntity.ts":
/*!****************************************!*\
  !*** ./src/app/domain/mappedEntity.ts ***!
  \****************************************/
/*! exports provided: MappedEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MappedEntity", function() { return MappedEntity; });
var MappedEntity = /** @class */ (function () {
    function MappedEntity() {
    }
    return MappedEntity;
}());



/***/ }),

/***/ "./src/app/domain/status.ts":
/*!**********************************!*\
  !*** ./src/app/domain/status.ts ***!
  \**********************************/
/*! exports provided: Status */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Status", function() { return Status; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var Status = /** @class */ (function () {
    function Status() {
    }
    Status.prototype.statusCols = function () {
        this.statusCol = [
            { field: 'termId', header: 'Term ID', width: '10%' },
            { field: 'userName', header: 'User Name', width: '8%' },
            { field: 'logStatus', header: 'Status', width: '8%' },
            { field: 'noOfEntitiesBeingProcessed', header: 'Entity Count', width: '8%' },
            { field: 'lastModified', header: 'Last Modified', width: '10%' },
            { field: 'processingTimeInSec', header: 'Duration in Sec', width: '4%' },
            { field: 'description', header: 'Description', width: '40%' },
        ];
        return this.statusCol;
    };
    Status = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], Status);
    return Status;
}());



/***/ }),

/***/ "./src/app/domain/termMap.ts":
/*!***********************************!*\
  !*** ./src/app/domain/termMap.ts ***!
  \***********************************/
/*! exports provided: TermMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TermMap", function() { return TermMap; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var TermMap = /** @class */ (function () {
    function TermMap() {
    }
    TermMap.prototype.termMapCols = function () {
        this.termMapCol = [
            { field: 'termId', header: 'Term ID', group: 'Maxds', isDisplayed: true },
            { field: 'name', header: 'Term Name', group: 'Maxds', isDisplayed: true },
            { field: 'description', header: 'Description', group: 'Maxds', isDisplayed: true },
        ];
        return this.termMapCol;
    };
    TermMap = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], TermMap);
    return TermMap;
}());



/***/ }),

/***/ "./src/app/domain/termMapInformation.ts":
/*!**********************************************!*\
  !*** ./src/app/domain/termMapInformation.ts ***!
  \**********************************************/
/*! exports provided: TermMapInformation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TermMapInformation", function() { return TermMapInformation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var TermMapInformation = /** @class */ (function () {
    function TermMapInformation() {
    }
    TermMapInformation = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], TermMapInformation);
    return TermMapInformation;
}());



/***/ }),

/***/ "./src/app/domain/termRule.ts":
/*!************************************!*\
  !*** ./src/app/domain/termRule.ts ***!
  \************************************/
/*! exports provided: TermRule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TermRule", function() { return TermRule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var TermRule = /** @class */ (function () {
    function TermRule() {
        this.id = '';
        this.termId = '';
        this.name = '';
        this.description = '';
        this.type = '';
        this.periodType = '';
        this.includeInAccuracyTests = false;
        this.lastModified = new Date();
        this.order = 0;
        this.processingStatus = 'NotProcessed';
        this.priorityGroup = '';
        this.financialStatement = "Uncategorized";
        this.expressions = [];
        this.validationExpressions = [];
        this.derivedZeroExpressions = [];
        this.overrides = [];
    }
    TermRule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], TermRule);
    return TermRule;
}());



/***/ }),

/***/ "./src/app/export/export.html":
/*!************************************!*\
  !*** ./src/app/export/export.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\" strokeWidth=\"8\"\r\n        fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n    <h2 style=\"background-color:lightblue; width: 100%; text-align: center;\"> Export</h2>\r\n\r\n</div>\r\n<div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{errorMsg}}</strong>\r\n</div>\r\n\r\n<p-tabView [(activeIndex)]=\"activeIndex\">\r\n    <p-tabPanel header=\"Select Companies\" leftIcon=\"pi pi-calendar\">\r\n        <div class=\"row\">\r\n            <div class=\"column\" style=\"width: 60%\">\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n\r\n                        <label>Company: </label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-autoComplete [(ngModel)]=\"companyName\" name=\"companyName\" [size]=\"50\"\r\n                            [suggestions]=\"filteredCompany\" (completeMethod)=\"searchCompany($event)\"\r\n                            placeholder=\"Search Company\" [size]=\"50\" [dropdown]=\"true\" joyrideStep=\"companyName\"\r\n                            (onSelect)=\"onCompanyNameChange($event)\"\r\n                            title=\"Company Name\"\r\n                            text=\"This is where the user preforms a search for their desired company.\">\r\n                        </p-autoComplete>\r\n\r\n                        <button pButton type=\"button\" label=\"Go To Peer Goup\" class=\"ui-button-rounded\"\r\n                            joyrideStep=\"goToPeer\" title=\"Go To Peer\"\r\n                            text=\"By clicking this button, the Division, Sector Industry, and Filer Category will be automatically populated for a selected company.\"\r\n                            (click)=\"goToPeer($event)\"></button>&nbsp;&nbsp;\r\n                        <button type=\"button\" pButton (click)=\"resetCompanies()\" icon=\"pi pi-times\"\r\n                            Class=\"ui-button-danger\" pTooltip=\"Reset Selected Companies\"></button>&nbsp;\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n\r\n                        <label>\r\n                            Division:</label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filtereddivision\" placeholder=\"Select Division\" [(ngModel)]=\"division\"\r\n                            [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                            (onChange)=\"divisionChange($event, false)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                            filter=\"true\" joyrideStep=\"division\" title=\"Division\" [stepContent]=\"divisionSection\">\r\n                        </p-dropdown>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n\r\n                        <label>\r\n                            Sector:</label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filteredsector\" placeholder=\"Select Sector\" [(ngModel)]=\"sector\"\r\n                            [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                            (onChange)=\"sectorChange($event, false)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                            joyrideStep=\"sector\" title=\"Sector\" [stepContent]=\"sectorDropdown\" filter=\"true\">\r\n                        </p-dropdown>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        <label>Industry: </label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                            [showClear]=\"true\" dropdownIcon=\"pi pi-chevron-down\"\r\n                            (onChange)=\"industryChange($event, false)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                            joyrideStep=\"industry\" title=\"Industry\" [stepContent]=\"industryDropdown\" filter=\"true\"\r\n                            [style]=\"{'width':'400px'}\"></p-dropdown>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        <label>Filer Category:</label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                            placeholder=\"Select Filer Category\" [showClear]=\"true\"\r\n                            (onChange)=\"filerChange($event, false)\" [virtualScroll]=\"true\" joyrideStep=\"filerCategory\"\r\n                            title=\"Filer Category\" [stepContent]=\"filerDropdown\" [itemSize]=\"31\" filter=\"true\"\r\n                            [style]=\"{'width':'400px'}\"></p-dropdown>&nbsp; {{categoryCount}}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column2\" *ngFor=\"let industry of entitiesList; let i = index\">\r\n                        <!-- <button class=\"fa fa-minus-square\"></button>\r\n                                                <p-checkbox name=\"group2\" value=\"industry.industry\" (ngClick)=\"selectEntitiesWithSicCode(industry, selectedEntities)\" inputId=\"technology\"></p-checkbox>\r\n\r\n                                                    <label for=\"sicSector\">{{industry.industry}}</label> -->\r\n\r\n                        <div class=\"checkbox\">\r\n                            <button alt=\"Expand or Collapse companies list\"\r\n                                (click)=\"entitiesList[i].collapse=!entitiesList[i].collapse; show(industry)\">\r\n                                <span *ngIf=\"entitiesList[i].collapse\">\r\n                                    <i class=\"fa fa-minus-square\" aria-hidden=\"true\"></i>\r\n                                </span><span [hidden]=\"entitiesList[i].collapse\">\r\n                                    <i class=\"fa fa-plus-square\" aria-hidden=\"true\"></i>\r\n\r\n                                </span></button> &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <!-- <input id=\"sicSector\" type=\"checkbox\" ng-model=\"industry.selected\" (click)=\"selectEntitiesWithSicCode(industry, selectedEntities)\"> -->\r\n                            <p-checkbox value=\"industry\" [(ngModel)]=\"industry.check\" binary=\"true\" inputId=\"industry\"\r\n                                (onChange)=\"selectEntitiesWithSicCode(industry.industry, entitiesList[i].entities, industry.check)\">\r\n                            </p-checkbox>\r\n                            <label for=\"sicSector\">{{industry.industry}}</label>\r\n                            <div class=\"col-lg-offset-1\" *ngIf=\"entitiesList[i].collapse\">\r\n                                <div *ngFor=\"let entity of entitiesList\">\r\n                                    <div class=\"checkbox\" *ngIf=\"entity.industry ===industry.industry \">\r\n                                        <!-- <input id=\"companyList\" type=\"checkbox\" (click)=\"toggle(entity, selectedEntities)\"\r\n                                                                                          ><label for=\"companyList\">{{entity.companyName}}</label> -->\r\n                                        <div *ngFor=\"let e of entity.entities; let ind = index\">\r\n                                            <p-checkbox [(ngModel)]=\"e.check\" binary=\"true\" value=\"entity\"\r\n                                                inputId=\"entity\" (click)=\"isSelected(e)\"></p-checkbox>\r\n                                            <label for=\"companyList\">{{e.companyName}}</label>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"column2\" style=\"width: 40%; background-color: lightgrey; overflow: scroll; height: 500px; \">\r\n                <!-- This is for Sidebox -->\r\n                <div\r\n                    style=\"color: white;background-color: darkslategray;text-align: center;padding-bottom: 5px;padding-top: 5px\">\r\n                    Selected Companies</div>\r\n\r\n                <div style=\"background-color: white\">\r\n                    <div *ngFor=\"let entity of selectedEntities \">\r\n                        {{entity.companyName}}\r\n                        <button alt=\"Remove company from selected list.\" type=\"button\" (click)=\"isSelected(entity)\">\r\n                            <span class=\"glyphicon glyphicon-trash\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <button alt=\"Remove all companies from selected list.\" *ngIf=\"selectedEntities.length > 0\"\r\n                        (click)=\"removeSelectedEntities()\">Remove Companies</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"Select Terms\">\r\n\r\n        <div class=\"row\">\r\n\r\n            <div class=\"column1\">\r\n                <label>Term: </label>\r\n\r\n            </div>\r\n            <div class=\"column2\">\r\n                <p-autoComplete [(ngModel)]=\"termInput\" [suggestions]=\"filteredTerms\" field=\"name\"\r\n                    (completeMethod)=\"filterTerm($event)\" joyrideStep=\"termInput\" title=\"Term\"\r\n                    (onSelect)=\"onTermChange($event)\"\r\n                    text=\"The term search is where a user can search for desired terms.\" (onClear)=\"filterTerm($event)\"\r\n                    [size]=\"39\" placeholder=\"Search Term\" [minLength]=\"1\">\r\n\r\n                </p-autoComplete>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"column1\">\r\n                <button pButton type=\"button\" label=\"Select All Terms\" class=\"ui-button-rounded\"\r\n                    joyrideStep=\"selectAllTerms\" title=\"Select All Terms\"\r\n                    text=\"If the user chooses this option, all terms will be selected\"\r\n                    (click)=\"selectAllTerms()\"></button>\r\n            </div>\r\n            <div class=\"column2\">\r\n                <button pButton type=\"button\" label=\"Deselect All Terms\" class=\"ui-button-rounded\"\r\n                    joyrideStep=\"deselectAllTerms\" title=\"Deselect All Terms\"\r\n                    text=\"The user can select this button to deselect all terms. \"\r\n                    (click)=\"deselectAllTerms()\"></button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n\r\n            <div class=\"col-lg-7\" style=\"height: 700px; overflow-y: auto;\">\r\n\r\n                <table class=\"table\">\r\n                    <tbody>\r\n                        <tr *ngFor=\"let term of terms\" style=\"text-align: left\">\r\n                            <p-checkbox [(ngModel)]=\"term.check\" binary=\"true\" value=\"term\" inputId=\"term\"\r\n                                (click)=\"isTermSelected(term)\"></p-checkbox>\r\n                            <label for=\"term\">{{term.termId}} - {{term.name}}</label>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n\r\n            <div class=\"col-lg-5\" style=\"background-color: lightgrey; height: 700px; \">\r\n                <div\r\n                    style=\"color: white;background-color: darkslategray;text-align: center;padding-bottom: 5px;padding-top: 5px\">\r\n                    Selected KPIs</div>\r\n\r\n                <div style=\"background-color: white\">\r\n                    <div *ngFor=\"let term of selectedTerms \">\r\n                        {{term.termId}} - {{term.name}}\r\n                        <button alt=\"Remove term from selected list.\" type=\"button\" (click)=\"isTermSelected(term)\">\r\n                            <span class=\"glyphicon glyphicon-trash\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <button pButton type=\"button\" label=\"Remove Terms\" class=\"ui-button-rounded\"\r\n                        *ngIf=\"selectedTerms.length > 0\" (click)=\"removeSelectedTerms()\"></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- <div>\r\n                <button pButton type=\"button\" label=\"Select All Terms\" class=\"ui-button-rounded\" (click)=\"selectAllTerms()\"></button>\r\n\r\n        </div> -->\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"Export Data\">\r\n        <div style=\"height: 92.5vh;\">\r\n            <as-split direction=\"vertical\">\r\n                <as-split-area>\r\n                    <div class=\"row\">\r\n                        <div class=\"expcolumn\" style=\"width: 25%\">\r\n                            <div class=\"ui-g-6\">\r\n                                <!-- <div class=\"well well-sm selectionCount\">\r\n                                                    <div class=\"checkbox\">\r\n                                                            <p-checkbox binary=\"true\"  label=\"Quarterly\" [(ngModel)]=\"quarterly\" inputId=\"quarterly\"></p-checkbox>\r\n                                                    </div>\r\n                                                </div> -->\r\n                                <div class=\"well well-sm selectionCount\">\r\n                                    <div class=\"checkbox\">\r\n                                        <p-checkbox binary=\"true\" label=\"Annual\" [(ngModel)]=\"annual\"\r\n                                            joyrideStep=\"annual\" title=\"Annual\"\r\n                                            (onChange)=\"onAnnualChange($event)\"\r\n                                            text=\"This box is checked by default and annual results for a company will be displayed if left selected. \"\r\n                                            inputId=\"annual\">\r\n                                        </p-checkbox>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div class=\"expcolumn\">\r\n                            <div>\r\n                                <label>\r\n                                    Reporting Periods:\r\n                                </label>&nbsp;&nbsp;\r\n                                <h3>{{rangeValues[0] + ' - ' + rangeValues[1]}}</h3>\r\n                                <p-slider [(ngModel)]=\"rangeValues\" [min]=\"minYear\" [max]=\"maxYear\" [step]=\"1\"\r\n                                    [style]=\"{'width':'14em'}\" [range]=\"true\" (onChange)=\"yearSlideChange($event)\">\r\n                                </p-slider>\r\n\r\n\r\n                            </div>\r\n                            <div style=\"padding: 5px;\">\r\n                                <p-dropdown [options]=\"years\" [(ngModel)]=\"year\" placeholder=\"Select Year\"\r\n                                    [showClear]=\"true\" (onChange)=\"yearChange($event)\" [virtualScroll]=\"true\"\r\n                                    joyrideStep=\"selectYear\" title=\"Select year\"\r\n                                    text=\"Here the user can select a specific year by using the dropdown or multiple years by using the slider. \"\r\n                                    [style]=\"{'width':'200px'}\"></p-dropdown>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"expcolumn\">\r\n                            <div class=\"col-lg-6\">\r\n                                <div class=\"well selectionCount\" aria-describedby=\"Selected companies count\">\r\n                                    Companies Selected :\r\n                                    {{selectedOver === true ? 'ALL' :  selectedEntities.length=== 0 ? 'None': selectedEntities.length}}\r\n                                </div>\r\n                                <div class=\"well selectionCount\" aria-describedby=\"Selected KPIs count\">\r\n                                    KPIs Selected : {{selectedTerms.length}}\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-lg-6\">\r\n                                <div class=\"well well-sm selectionCount\">\r\n                                    <div class=\"checkbox\">\r\n                                        <p-checkbox label=\"Override selected companies, include all companies\"\r\n                                            [(ngModel)]=\"selectedOver\" binary=\"true\" joyrideStep=\"overrideSelected \"\r\n                                            (onChange)=\"onAllCompanyChange($event)\"\r\n                                            title=\"Override selected companies, include all companies\"\r\n                                            text=\"Override selected companies, include all companies\" inputId=\"over\">\r\n                                        </p-checkbox>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div class=\"well well-sm selectionCount\">\r\n                                    <div class=\"checkbox\">\r\n                                        <p-checkbox label=\"Include Validation Info\" [(ngModel)]=\"selectedVal\"\r\n                                            joyrideStep=\"includeValidationInfo\" title=\"Include Validation Info\"\r\n                                            (onChange)=\"onValidationChange($event)\"\r\n                                            text=\"The user can select this option if they want to return validation information for the selected results. \"\r\n                                            inputId=\"selectedVal\" binary=\"true\">\r\n                                        </p-checkbox>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n\r\n                        <label>\r\n                            Export Data Type:\r\n                        </label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <p-inputSwitch [(ngModel)]=\"termRes\" joyrideStep=\"termResults\" title=\"Term Results\"\r\n                            text=\"Term Results\" (onChange)=\"termChange($event)\"> </p-inputSwitch>\r\n                        &nbsp;&nbsp;<label> Term Results</label>&nbsp;&nbsp;\r\n                        <p-inputSwitch [(ngModel)]=\"covStat\" joyrideStep=\"coverageStats\" title=\"Coverage Status\"\r\n                            text=\"The user can select the Coverage status for selected terms by choosing this slider.\"\r\n                            (onChange)=\"covChange($event)\"></p-inputSwitch>\r\n                        &nbsp;&nbsp;<label>Coverage Stats </label>&nbsp;&nbsp;\r\n                        <p-inputSwitch *ngIf=\"termRes\" [(ngModel)]=\"quatCheck\" joyrideStep=\"quarterly\" title=\"Quarterly\"\r\n                            text=\"The user can select this option if they want to return quarterly results in addition to the annual data.\"\r\n                            (onChange)=\"quaterlyChange($event)\">\r\n                        </p-inputSwitch>&nbsp;&nbsp;<label *ngIf=\"termRes\">Quarterly </label>\r\n\r\n                    </div>\r\n                </as-split-area>\r\n                <as-split-area>\r\n                    <as-split direction=\"vertical\">\r\n                        <as-split-area>\r\n                            <div style=\"background-color:#ccc;\">\r\n                                <label style=\"float: left\">\r\n                                    Data Preview :\r\n                                </label> <button pButton type=\"button\" label=\"Refresh Data\" class=\"ui-button-warning\"\r\n                                    style=\"text-align: center\" (click)=\"refreshData();\"></button>\r\n\r\n                            </div>\r\n\r\n                            <div *ngIf=\"termRes\">\r\n\r\n                                <p-table #exportTable [columns]=\"exportDataCols\" [value]=\"exportData\"\r\n                                    [responsive]=\" true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                                    columnResizeMode=\"expand\" [reorderableColumns]=\"true\" selectionMode=\"single\"\r\n                                    [(selection)]=\"termId\" dataKey=\"termId\" p-dataTable exportFilename=\"{{expFileName}}\"\r\n                                    paginatorPosition=\"top\" [paginator]=\"true\" [rows]=\"10\"\r\n                                    paginatorTemplate=\"{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {Exporters}\"\r\n                                    [showCurrentPageReport]=\"true\" (onPage)=\"pagenation($event)\"\r\n                                    currentPageReportTemplate=\"Showing {{num}} to {{first}} of {{total}}\">\r\n                                    <ng-template pTemplate=\"caption\">\r\n                                        <div class=\"ui-helper-clearfix\" style=\"text-align: left\" *ngIf=\"exportData\">\r\n                                            <button pButton type=\"button\" label=\"Export\" class=\"ui-button-warning\"\r\n                                                style=\"float: right;  padding-right: 10px;\"\r\n                                                (click)=\"downloadTermResData(expFileName)\"></button>\r\n                                            <input type=\"text\" pInputText [(ngModel)]=\"expFileName\"\r\n                                                style=\"float: right;  padding-right: 10px;\" size=\"30\" />\r\n                                            <label style=\"float: right; padding-right: 10px;\"> Set Name :</label>\r\n\r\n                                        </div>\r\n\r\n                                    </ng-template>\r\n\r\n\r\n                                    <ng-template pTemplate=\"header\" let-columns>\r\n                                        <tr>\r\n                                            <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn\r\n                                                [pSortableColumn]=\"col.field\">\r\n                                                <div pTooltip=\"Click to sort {{col.header}}\">\r\n                                                    {{col.header}}\r\n                                                    <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                                                        ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                                        ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                                                </div>\r\n                                            </th>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                                                <div *ngIf=\"col.field !== ''\">\r\n                                                    <input *ngSwitchCase=\"col.field\" pInputText type=\"text\"\r\n                                                        placeholder=\"Search\"\r\n                                                        [value]=\"exportTable.filters[col.field] ? exportTable.filters[col.field].value : ''\"\r\n                                                        (input)=\"exportTable.filter($event.target.value, col.field, col.filterMatchMode);\"\r\n                                                        style=\"width: 150px\">\r\n                                                </div>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </ng-template>\r\n                                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\"\r\n                                        let-index=\"rowIndex\">\r\n                                        <tr style=\"word-break:break-all\">\r\n                                            <td>\r\n                                                {{rowData.company}}\r\n                                            </td>\r\n                                            <td>\r\n                                                {{rowData.reportingPeriod}}\r\n                                            </td>\r\n                                            <td>\r\n                                                {{rowData.periodEndDate}}\r\n                                            </td>\r\n                                            <td tabindex=\"0\" *ngFor=\"let val of rowData.termResultValues\">\r\n                                                {{val}}\r\n                                            </td>\r\n\r\n                                        </tr>\r\n                                    </ng-template>\r\n\r\n                                </p-table>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"covStat\">\r\n                                <p-table #covTable [columns]=\"coverageDataCols\" [value]=\"coverageStats\"\r\n                                    [responsive]=\" true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                                    columnResizeMode=\"expand\" [reorderableColumns]=\"true\" selectionMode=\"single\"\r\n                                    [(selection)]=\"termId\" dataKey=\"termId\" p-dataTable exportFilename=\"{{covFileName}}\"\r\n                                    paginatorPosition=\"top\" [paginator]=\"true\" [rows]=\"10\"\r\n                                    paginatorTemplate=\"{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {Exporters}\"\r\n                                    [showCurrentPageReport]=\"true\" (onPage)=\"covPagenation($event)\"\r\n                                    currentPageReportTemplate=\"Showing {{covNum}} to {{covFirst}} of {{covTotal}}\">\r\n\r\n                                    <ng-template pTemplate=\"caption\">\r\n                                        <div class=\"ui-helper-clearfix\" style=\"text-align: left\" *ngIf=\"coverageStats\">\r\n                                            <button pButton type=\"button\" label=\"Export\" class=\"ui-button-warning\"\r\n                                                style=\"float: right;  padding-right: 10px;\"\r\n                                                (click)=\"downloadCovData(covFileName)\"></button>\r\n                                            <input type=\"text\" pInputText [(ngModel)]=\"covFileName\"\r\n                                                style=\"float: right;  padding-right: 10px;\" size=\"30\" />\r\n                                            <label style=\"float: right; padding-right: 10px;\"> Set Name :</label>\r\n\r\n                                        </div>\r\n                                    </ng-template>\r\n                                    <ng-template pTemplate=\"header\" let-columns>\r\n                                        <tr>\r\n                                            <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn\r\n                                                [pSortableColumn]=\"col.field\">\r\n                                                <div pTooltip=\"Click to sort {{col.header}}\">\r\n                                                    {{col.header}}\r\n                                                    <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                                                        ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                                        ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                                                </div>\r\n                                            </th>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                                                <div *ngIf=\"col.field !== ''\">\r\n                                                    <input *ngSwitchCase=\"col.field\" pInputText type=\"text\"\r\n                                                        placeholder=\"Search\"\r\n                                                        [value]=\"covTable.filters[col.field] ? covTable.filters[col.field].value : ''\"\r\n                                                        (input)=\"covTable.filter($event.target.value, col.field, col.filterMatchMode);\"\r\n                                                        style=\"width: 150px\">\r\n                                                </div>\r\n                                            </th>\r\n                                        </tr>\r\n                                    </ng-template>\r\n                                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\"\r\n                                        let-index=\"rowIndex\">\r\n                                        <tr style=\"word-break:break-all\">\r\n                                            <td>\r\n                                                {{rowData.termName}}\r\n                                            </td>\r\n                                            <td>\r\n                                                {{rowData.termId}}\r\n                                            </td>\r\n\r\n                                            <td tabindex=\"0\" *ngFor=\"let vals of rowData.coverageValues\">\r\n                                                {{vals}}\r\n                                            </td>\r\n\r\n                                        </tr>\r\n                                    </ng-template>\r\n\r\n                                </p-table>\r\n                            </div>\r\n                        </as-split-area>\r\n                    </as-split>\r\n                </as-split-area>\r\n            </as-split>\r\n        </div>\r\n    </p-tabPanel>\r\n</p-tabView>\r\n\r\n<ng-template #divisionSection>\r\n    <div>The user can select a division from the dropdown.</div>\r\n    <div>After a company is selected, this field is automatically populated after the user clicks “Go To Peer Group”\r\n        button.\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #sectorDropdown>\r\n    <div>The user can select a sector from the dropdown.\r\n    </div>\r\n    <div>After a company is selected, this field is automatically populated after the user clicks “Go To Peer Group”\r\n        button.</div>\r\n</ng-template>\r\n\r\n<ng-template #industryDropdown>\r\n    <div>The user can select an industry from the dropdown.\r\n    </div>\r\n    <div>After a company is selected, this field is automatically populated after the user clicks “Go To Peer Group”\r\n        button.\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #filerDropdown>\r\n    <div>The user can select a filer from the dropdown.\r\n    </div>\r\n    <div>After a company is selected, this field is automatically populated after the user clicks “Go To Peer Group”\r\n        button.\r\n        on.\r\n    </div>\r\n</ng-template>\r\n"

/***/ }),

/***/ "./src/app/export/exportComponent.ts":
/*!*******************************************!*\
  !*** ./src/app/export/exportComponent.ts ***!
  \*******************************************/
/*! exports provided: ExportComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExportComponent", function() { return ExportComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _exportService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./exportService */ "./src/app/export/exportService.ts");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var app_app_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/app.component */ "./src/app/app.component.ts");
/* harmony import */ var app_services_common_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/services/common.service */ "./src/app/services/common.service.ts");








var ExportComponent = /** @class */ (function () {
    function ExportComponent(exportService, commonService, router, utilService, app, route) {
        this.exportService = exportService;
        this.commonService = commonService;
        this.router = router;
        this.utilService = utilService;
        this.app = app;
        this.route = route;
        this.subscription = [];
        this.activeIndex = '0';
        this.completeEntities = [];
        this.filerCategory = null;
        this.sics = [];
        this.entitiesList = [];
        this.selectedEntities = [];
        this.actualTerms = [];
        this.terms = [];
        this.selectedTerms = [];
        this.filteredTerms = [];
        this.quarterly = true;
        this.quatCheck = false;
        this.annual = true;
        this.selectedOver = false;
        this.selectedVal = false;
        this.termRes = true;
        this.covStat = false;
        this.termResultFilterOptions = { isForAllEntities: false, exportType: "termResults", includeFiscalYears: true, includeFiscalQuarters: true, includeValidationInfos: false, startYear: (new Date()).getFullYear() - 4, endYear: (new Date()).getFullYear(), entityList: ["000050"], termIdList: ["AVAILSEC", "ACT", "HTMSEC", "XINTRP"] };
        this.exportDataCols = [];
        this.first = 10;
        this.num = 1;
        this.covNum = 1;
        this.last = 10;
        this.total = 0;
        this.row = 10;
        this.covFirst = 10;
        this.covTotal = 0;
        this.covRow = 10;
        this.rangeValues = [(new Date()).getFullYear() - 4, (new Date()).getFullYear()];
        this.minYear = (new Date()).getFullYear() - 4;
        this.maxYear = (new Date()).getFullYear();
        this.years = [{ label: (new Date()).getFullYear() - 4, value: (new Date()).getFullYear() - 4 }, { label: (new Date()).getFullYear() - 3, value: (new Date()).getFullYear() - 3 }, { label: (new Date()).getFullYear() - 2, value: (new Date()).getFullYear() - 2 }, { label: (new Date()).getFullYear() - 1, value: (new Date()).getFullYear() - 1 }, { label: (new Date()).getFullYear(), value: (new Date()).getFullYear() }];
        this.coverageDataCols = [];
        this.covFileName = 'CoverageStats';
        this.expFileName = 'TermResults';
        this.errorMsg = '';
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
    }
    ExportComponent.prototype.ngOnInit = function () {
        var _this = this;
        // CommonService.isTourGuideStart.subscribe((value) => {
        //   if (value) {
        //     this.activeIndex = '0';
        //   }
        // })
        app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].exportTabIndex.subscribe(function (value) {
            _this.activeIndex = value + '';
        });
        console.log('exportComponent : calling ngOnInit...');
        this.utilService.getCompanyList().subscribe(function (response) { _this.companyList = response; });
        this.utilService.getDivisionList().subscribe(function (response) {
            _this.divisionList = response;
            _this.filtereddivision = [];
            response.forEach(function (obj) {
                if (obj != null) {
                    var name = { label: obj, value: obj };
                    _this.filtereddivision.push(name);
                }
            });
        });
        this.utilService.getSectorList().subscribe(function (response) {
            _this.sectorList = response;
        });
        this.utilService.getFilerCategoryList().subscribe(function (response) {
            _this.filerCategoryList = response;
            _this.filteredfilerCategory = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filteredfilerCategory.push(name);
            });
        });
        this.utilService.getIndustryList().subscribe(function (response) { _this.industryList = response; });
        //this.utilService.getCompleteCompanyList().subscribe((response) => { this.completeCompanyList = response });
        this.completeCompanyList = this.route.snapshot.data['completeCompanyList'];
        this.terms = this.route.snapshot.data['termRuleList'];
        this.terms = this.terms.sort(function (a, b) {
            if (a.termId < b.termId) {
                return -1;
            }
            if (a.termId > b.termId) {
                return 1;
            }
            return 0;
        });
        this.actualTerms = this.terms;
        // this.utilService.getTermRuleList().subscribe((response) => {
        //   this.terms = response;
        //   this.actualTerms = response
        //   this.terms = this.terms.sort((a, b) => {
        //     if (a.termId < b.termId) { return -1; }
        //     if (a.termId > b.termId) { return 1; }
        //     return 0;
        //   });
        // });
        this.terms.forEach(function (obj) {
            obj.check = false;
        });
        this.actualTerms.forEach(function (obj) {
            obj.check = false;
        });
    };
    ExportComponent.prototype.ngAfterContentInit = function () {
        this.loadFromStorage();
    };
    ExportComponent.prototype.loadFromStorage = function () {
        var _this = this;
        //starting company tab
        if (sessionStorage.getItem('export.companyName') !== null) {
            this.companyName = sessionStorage.getItem('export.companyName');
        }
        if (sessionStorage.getItem('export.division') !== null) {
            this.division = sessionStorage.getItem('export.division');
            this.divisionChange(this.division, true);
        }
        if (sessionStorage.getItem('export.sector') !== null) {
            this.sector = sessionStorage.getItem('export.sector');
            this.sectorChange(this.sector, false);
        }
        if (sessionStorage.getItem('export.industry') !== null) {
            this.industry = sessionStorage.getItem('export.industry');
            this.industryChange(this.industry, true);
        }
        if (sessionStorage.getItem('export.filerCategory') !== null) {
            this.filerCategory = sessionStorage.getItem('export.filerCategory');
            this.filerChange(this.filerCategory, true);
        }
        if (sessionStorage.getItem('export.entitiesList') !== null) {
            this.entitiesList = JSON.parse(sessionStorage.getItem('export.entitiesList'));
        }
        if (sessionStorage.getItem('export.selectedEntities') !== null) {
            this.selectedEntities = JSON.parse(sessionStorage.getItem('export.selectedEntities'));
            //update entitiesList checkbox status
            if (this.selectedEntities) {
                this.selectedEntities.forEach(function (selected) {
                    _this.entitiesList.forEach(function (eObj) {
                        eObj.entities.forEach(function (ent) {
                            if (ent.cik == selected.cik)
                                ent.check = true;
                        });
                    });
                });
            }
        }
        //starting term tab
        if (sessionStorage.getItem('export.termInput') !== null) {
            this.termInput = JSON.parse(sessionStorage.getItem('export.termInput'));
        }
        if (sessionStorage.getItem('export.terms') !== null) {
            this.terms = JSON.parse(sessionStorage.getItem('export.terms'));
        }
        if (sessionStorage.getItem('export.filteredTerms') !== null) {
            this.filteredTerms = JSON.parse(sessionStorage.getItem('export.filteredTerms'));
        }
        if (sessionStorage.getItem('export.selectedTerms') !== null) {
            this.selectedTerms = JSON.parse(sessionStorage.getItem('export.selectedTerms'));
        }
        //starting export tab
        if (sessionStorage.getItem('export.annual') !== null) {
            this.annual = JSON.parse(sessionStorage.getItem('export.annual'));
        }
        if (sessionStorage.getItem('export.selectedOver') !== null) {
            this.selectedOver = JSON.parse(sessionStorage.getItem('export.selectedOver'));
        }
        if (sessionStorage.getItem('export.selectedVal') !== null) {
            this.selectedVal = JSON.parse(sessionStorage.getItem('export.selectedVal'));
        }
        if (sessionStorage.getItem('export.termRes') !== null) {
            this.termRes = JSON.parse(sessionStorage.getItem('export.termRes'));
        }
        if (sessionStorage.getItem('export.covStat') !== null) {
            this.covStat = JSON.parse(sessionStorage.getItem('export.covStat'));
        }
        if (sessionStorage.getItem('export.exportData') !== null) {
            this.exportData = JSON.parse(sessionStorage.getItem('export.exportData'));
        }
        if (sessionStorage.getItem('export.first') !== null) {
            this.first = JSON.parse(sessionStorage.getItem('export.first'));
        }
        if (sessionStorage.getItem('export.row') !== null) {
            this.row = JSON.parse(sessionStorage.getItem('export.row'));
        }
        if (sessionStorage.getItem('export.total') !== null) {
            this.total = JSON.parse(sessionStorage.getItem('export.total'));
        }
        if (sessionStorage.getItem('export.quatCheck') !== null) {
            this.quatCheck = JSON.parse(sessionStorage.getItem('export.quatCheck'));
        }
        if (sessionStorage.getItem('export.termResultFilterOptions.startYear') !== null) {
            this.termResultFilterOptions.startYear = JSON.parse(sessionStorage.getItem('export.termResultFilterOptions.startYear'));
        }
        if (sessionStorage.getItem('export.termResultFilterOptions.endYear') !== null) {
            this.termResultFilterOptions.endYear = JSON.parse(sessionStorage.getItem('export.termResultFilterOptions.endYear'));
        }
        if (sessionStorage.getItem('export.rangeValues') !== null) {
            this.rangeValues = JSON.parse(sessionStorage.getItem('export.rangeValues'));
        }
        if (sessionStorage.getItem('export.year') !== null) {
            this.year = JSON.parse(sessionStorage.getItem('export.year'));
        }
    };
    ExportComponent.prototype.clearStorage = function () {
        sessionStorage.removeItem('export.companyName');
        sessionStorage.removeItem('export.division');
        sessionStorage.removeItem('export.sector');
        sessionStorage.removeItem('export.industry');
        sessionStorage.removeItem('export.filerCategory');
        sessionStorage.removeItem('export.selectedEntities');
    };
    ExportComponent.prototype.resetCompanies = function () {
        this.companyName = undefined;
        this.division = undefined;
        this.sector = undefined;
        this.industry = undefined;
        this.filerCategory = undefined;
        this.sics = [];
        this.entitiesList = [];
        this.selectedEntities = [];
        this.errorMsg = '';
        this.showError = false;
        this.clearStorage();
    };
    ExportComponent.prototype.searchCompany = function (event) {
        this.filteredCompany = [];
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i];
            if ((cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) || (cname != null && cname.toLowerCase().includes(event.query.toLowerCase()))) {
                this.filteredCompany.push(cname);
            }
        }
    };
    ExportComponent.prototype.onCompanyNameChange = function ($event) {
        console.log(this.companyName);
        sessionStorage.setItem('export.companyName', $event);
    };
    ExportComponent.prototype.searchIndustry = function (event) {
        this.filteredindustry = [];
        for (var i = 0; i < this.industryList.length; i++) {
            var cname = this.industryList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredindustry.push(cname);
            }
        }
    };
    ExportComponent.prototype.searchDivisionSector = function (event) {
        this.filtereddivision = [];
        for (var i = 0; i < this.divisionList.length; i++) {
            var cname = this.divisionList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filtereddivision.push(cname);
            }
        }
    };
    ExportComponent.prototype.searchFilerCategory = function (event) {
        this.filteredfilerCategory = [];
        for (var i = 0; i < this.filerCategoryList.length; i++) {
            var cname = this.filerCategoryList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredfilerCategory.push(cname);
            }
        }
    };
    ExportComponent.prototype.goToPeer = function (event) {
        var _this = this;
        this.errorMsg = '';
        this.showError = false;
        this.company = null;
        if (this.companyName != undefined && this.companyName.length > 15) {
            this.company = this.companyName.substr(0, this.companyName.length - 12);
            var peer = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.division = peer[0].division;
            this.sector = peer[0].sector;
            this.industry = peer[0].sic + '-' + peer[0].industry;
            this.filerCategory = peer[0].filerCategory;
            this.sics = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.divisionChange(this.division, true);
            this.filteredindustry = [];
            var name = { label: this.industry, value: this.industry };
            this.filteredindustry.push(name);
            this.sectorChange(this.sector, true);
            this.industryChange(this.industry, true);
            this.filerChange(this.filerCategory, true);
        }
        else {
            this.errorMsg = 'Please Select Company';
            this.showError = true;
        }
    };
    ExportComponent.prototype.divisionChange = function (event, peer) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        event = event.value ? event.value : event;
        var division = event;
        if (!peer) {
            this.sector = undefined;
            this.industry = undefined;
            this.filerCategory = undefined;
            this.sics = [];
            this.entitiesList = [];
            sessionStorage.removeItem('export.sector');
            sessionStorage.removeItem('export.industry');
            sessionStorage.removeItem('export.filerCategory');
        }
        // var sector = event.substr(event.indexOf( '->')+3, event.length);
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        this.filteredsector = [];
        this.completeEntities.forEach(function (obj) {
            var name = { label: obj.sector, value: obj.sector };
            if (obj != null) {
                _this.filteredsector.push(name);
            }
        });
        this.filteredsector = this.filteredsector.filter(function (el, i, a) {
            return i === a.findIndex(function (obj) {
                return obj.label === el.label;
            });
        });
        this.filteredsector.sort(function (a, b) { return a.label > b.label ? 1 : -1; });
        sessionStorage.setItem('export.division', event);
    };
    ExportComponent.prototype.sectorChange = function (event, peer) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        this.entitiesList = [];
        if (!peer)
            this.sics = [];
        event = event.value ? event.value : event;
        var sector = event;
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
            var ind = { industry: obj.industry };
            if (!peer)
                _this.sics.push(ind);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        if (!peer) {
            this.filteredindustry = [];
            this.industry = undefined;
        }
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredindustry.push(name);
        });
        this.sics = this.sics.filter(function (el, i, a) {
            return i === a.findIndex(function (obj) {
                return obj.industry === el.industry;
            });
        });
        this.sics.forEach(function (sic) {
            var completeList = _this.completeCompanyList;
            var list = completeList.filter(function (obj) { return obj.industry === sic.industry; });
            if (_this.filerCategory)
                list = list.filter(function (obj) { return obj.filerCategory === _this.filerCategory; });
            list.sort(function (a, b) { return a.companyName > b.companyName ? 1 : -1; });
            var entity = { industry: sic.industry, entities: list, check: false };
            _this.entitiesList.push(entity);
        });
        this.filteredindustry.sort(function (a, b) { return a.label > b.label ? 1 : -1; });
        this.sics.sort(function (a, b) { return a.industry > b.industry ? 1 : -1; });
        // this.entitiesList.sort((a, b) => a.label > b.label ? 1 : -1)
        sessionStorage.setItem('export.sector', event);
    };
    ExportComponent.prototype.industryChange = function (event, peer) {
        var _this = this;
        this.entitiesList = [];
        event = event.value ? event.value : event;
        var industry = event.substr(event.indexOf('-') + 1, event.length);
        var entities = this.completeEntities;
        if (industry) {
            entities.filter(function (obj) { return obj.industry === industry; });
            this.sics = [];
            this.sics.push({ industry: industry });
            this.sics.forEach(function (sic) {
                var list = entities.filter(function (obj) { return obj.industry === sic.industry; });
                if (_this.filerCategory)
                    list = list.filter(function (obj) { return obj.filerCategory === _this.filerCategory; });
                list.sort(function (a, b) { return a.companyName > b.companyName ? 1 : -1; });
                var entity = { industry: sic.industry, entities: list, check: false };
                _this.entitiesList.push(entity);
            });
        }
        sessionStorage.setItem('export.industry', event);
    };
    ExportComponent.prototype.filerChange = function (event, peer) {
        var _this = this;
        event = event.value ? event.value : event;
        var filer = event;
        var entities = this.completeEntities;
        this.entitiesList = [];
        entities.filter(function (obj) { return obj.filerCategory === filer; });
        this.sics.forEach(function (sic) {
            var list = entities.filter(function (obj) { return obj.industry === sic.industry; });
            if (_this.filerCategory)
                list = list.filter(function (obj) { return obj.filerCategory === _this.filerCategory; });
            list.sort(function (a, b) { return a.companyName > b.companyName ? 1 : -1; });
            var entity = { industry: sic.industry, entities: list, check: false };
            _this.entitiesList.push(entity);
        });
        sessionStorage.setItem('export.filerCategory', event);
    };
    ExportComponent.prototype.selectEntitiesWithSicCode = function (type, list, checked) {
        var _this = this;
        console.log(type + list);
        if (checked) {
            list.forEach(function (obj) {
                if (!_this.selectedEntities.some(function (item) { return item == obj; }))
                    _this.selectedEntities.push(obj);
                _this.entitiesList.forEach(function (eObj) {
                    eObj.entities.forEach(function (ent) {
                        if (ent == obj) {
                            eObj.check = true;
                            ent.check = true;
                        }
                    });
                });
            });
        }
        else {
            for (var i = 0; i < list.length; i++) {
                var ind;
                this.selectedEntities.forEach(function (element) {
                    if (element.cik == list[i].cik) {
                        ind = _this.selectedEntities.indexOf(element);
                    }
                });
                if (ind !== -1)
                    this.selectedEntities.splice(ind, 1);
                this.entitiesList.forEach(function (eObj) {
                    eObj.entities.forEach(function (ent) {
                        if (ent == list[i])
                            ent.check = false;
                    });
                });
            }
        }
        sessionStorage.setItem('export.selectedEntities', JSON.stringify(this.selectedEntities));
        sessionStorage.setItem('export.entitiesList', JSON.stringify(this.entitiesList));
    };
    ExportComponent.prototype.show = function (industry) {
        console.log(industry);
    };
    ExportComponent.prototype.isSelected = function (selected, index) {
        var _this = this;
        if (!this.selectedEntities.some(function (item) { return item.cik == selected.cik; })) { //check
            this.selectedEntities.push(selected);
        }
        else { //uncheck
            //remove item from existing selected list
            var ind;
            this.selectedEntities.forEach(function (element) {
                if (element.cik == selected.cik) {
                    ind = _this.selectedEntities.indexOf(element);
                }
            });
            this.selectedEntities.splice(ind, 1);
            //update check status on original entity list
            this.entitiesList.forEach(function (eObj) {
                eObj.entities.forEach(function (ent) {
                    if (ent.cik == selected.cik)
                        ent.check = false;
                });
            });
        }
        sessionStorage.setItem('export.selectedEntities', JSON.stringify(this.selectedEntities));
    };
    ;
    ExportComponent.prototype.deselectAllTerms = function () {
        this.selectedTerms = [];
        this.terms.forEach(function (obj) {
            obj.check = false;
        });
        sessionStorage.removeItem('export.selectedTerms');
        sessionStorage.setItem('export.terms', JSON.stringify(this.terms));
    };
    ExportComponent.prototype.selectAllTerms = function () {
        var _this = this;
        this.terms.forEach(function (obj) {
            obj.check = true;
        });
        this.terms.forEach(function (obj) {
            if (!_this.selectedTerms.some(function (item) { return item.termId == obj.termId; })) {
                _this.selectedTerms.push(obj);
            }
        });
        sessionStorage.setItem('export.selectedTerms', JSON.stringify(this.selectedTerms));
        sessionStorage.setItem('export.terms', JSON.stringify(this.terms));
    };
    ExportComponent.prototype.isTermSelected = function (selected, index) {
        var _this = this;
        if (!this.selectedTerms.some(function (item) { return item.name == selected.name; })) {
            this.selectedTerms.push(selected);
        }
        else {
            this.terms.forEach(function (obj) {
                if (obj.name === selected.name) {
                    obj.check = false;
                }
            });
            var ind;
            this.selectedTerms.forEach(function (element) {
                if (element.name === selected.name) {
                    ind = _this.selectedTerms.indexOf(element);
                }
            });
            this.selectedTerms.splice(ind, 1);
        }
        sessionStorage.setItem('export.selectedTerms', JSON.stringify(this.selectedTerms));
        sessionStorage.setItem('export.terms', JSON.stringify(this.terms));
    };
    ;
    ExportComponent.prototype.removeSelectedTerms = function () {
        this.selectedTerms = [];
        this.terms.forEach(function (obj) {
            obj.check = false;
        });
        sessionStorage.removeItem('export.selectedTerms');
    };
    ExportComponent.prototype.removeSelectedEntities = function () {
        this.selectedEntities = [];
        this.entitiesList.forEach(function (eObj) {
            eObj.check = false;
            eObj.entities.forEach(function (ent) {
                ent.check = false;
            });
        });
        this.sics.forEach(function (eObj) {
            eObj.check = false;
        });
        sessionStorage.removeItem('export.selectedEntities');
    };
    ExportComponent.prototype.removeEntity = function () {
        this.selectedEntities;
    };
    ExportComponent.prototype.filterTerm = function (event) {
        if (event.query != null && event.query != '') {
            this.filteredTerms = [];
            for (var i = 0; i < this.actualTerms.length; i++) {
                var cname = this.actualTerms[i];
                if ((cname != null && cname.termId.toLowerCase().indexOf(event.query.toLowerCase()) == 0) || (cname != null && cname.name.toLowerCase().includes(event.query.toLowerCase()))) {
                    this.filteredTerms.push(cname);
                }
            }
            this.terms = this.filteredTerms;
        }
        else {
            this.terms = this.actualTerms;
        }
        sessionStorage.setItem('export.terms', JSON.stringify(this.terms));
        sessionStorage.setItem('export.filteredTerms', JSON.stringify(this.filteredTerms));
    };
    ExportComponent.prototype.onTermChange = function ($event) {
        console.log(this.termInput);
        sessionStorage.setItem('export.termInput', JSON.stringify($event));
    };
    //from export tab
    ExportComponent.prototype.onAnnualChange = function ($event) {
        sessionStorage.setItem('export.annual', JSON.stringify(this.annual));
    };
    ExportComponent.prototype.onAllCompanyChange = function ($event) {
        sessionStorage.setItem('export.selectedOver', JSON.stringify(this.selectedOver));
    };
    ExportComponent.prototype.onValidationChange = function ($event) {
        sessionStorage.setItem('export.selectedVal', JSON.stringify(this.selectedVal));
    };
    ExportComponent.prototype.termChange = function (event) {
        if (event.checked) {
            this.termRes = true;
            this.covStat = false;
        }
        else {
            this.termRes = false;
            this.covStat = true;
        }
        sessionStorage.setItem('export.termRes', JSON.stringify(this.termRes));
        sessionStorage.setItem('export.covStat', JSON.stringify(this.covStat));
    };
    ExportComponent.prototype.covChange = function (event) {
        if (event.checked) {
            this.covStat = true;
            this.termRes = false;
        }
        else {
            this.termRes = true;
            this.covStat = false;
        }
        sessionStorage.setItem('export.termRes', JSON.stringify(this.termRes));
        sessionStorage.setItem('export.covStat', JSON.stringify(this.covStat));
    };
    ExportComponent.prototype.quaterlyChange = function (event) {
        var _this = this;
        this.exportData = [];
        if (!event.checked) {
            //this.exportData = this.actualExportData;
            if (this.actualExportData) {
                this.actualExportData.forEach(function (obj) {
                    if (obj.reportingPeriod.includes('FY')) {
                        _this.exportData.push(obj);
                    }
                });
            }
        }
        else {
            this.exportData = this.actualExportData;
        }
        if (this.exportData) {
            this.first = this.exportData.length > 10 ? 10 : this.exportData.length;
            this.row = (this.exportData.length - this.first);
            this.total = this.exportData.length;
            sessionStorage.setItem('export.exportData', JSON.stringify(this.exportData));
        }
        else {
            sessionStorage.removeItem('export.exportData');
        }
        sessionStorage.setItem('export.first', JSON.stringify(this.first));
        sessionStorage.setItem('export.row', JSON.stringify(this.row));
        sessionStorage.setItem('export.total', JSON.stringify(this.total));
        sessionStorage.setItem('export.quatCheck', JSON.stringify(this.quatCheck));
    };
    ExportComponent.prototype.refreshData = function () {
        this.termResultFilterOptions.isForAllEntities = this.selectedOver;
        this.termResultFilterOptions.includeFiscalYears = this.annual;
        this.termResultFilterOptions.includeFiscalQuarters = this.quarterly;
        this.termResultFilterOptions.includeValidationInfos = this.selectedVal;
        this.num = 1;
        this.first = 10;
        this.total = 0;
        this.covNum = 1;
        this.covFirst = 10;
        this.covTotal = 0;
        this.progressSpinner = true;
        this.showError = false;
        this.errorMsg = '';
        //this.quatCheck = true;
        this.exportData = [];
        this.coverageStats = [];
        if (this.termRes) {
            this.refreshExportTermResultsData();
        }
        else {
            this.refreshExportCoverageData();
        }
    };
    ExportComponent.prototype.refreshExportTermResultsData = function () {
        var _this = this;
        var entityIds = [];
        this.exportDataCols = [];
        this.exportData = [];
        this.selectedEntities.forEach(function (obj) {
            entityIds.push(obj.entityId);
        });
        this.termResultFilterOptions.entityList = entityIds;
        if (this.termResultFilterOptions.entityList.length === 0) {
            // if (this.termResultFilterOptions.isForAllEntities !== true) {
            //   this.progressSpinner = false;
            //     this.showError = true;
            //     this.errorMsg = "Error Atleast one Company needs to be specified for processing or all companies override needs to be checked.";
            //     return;
            // }
            this.termResultFilterOptions.isForAllEntities = true;
            this.selectedOver = true;
        }
        var termIds = [];
        this.selectedTerms.forEach(function (obj) {
            termIds.push(obj.termId);
        });
        if (termIds.length === 0) {
            this.showError = true;
            this.progressSpinner = false;
            this.errorMsg = "Atleast one Term needs to be checked.";
            return;
        }
        this.termResultFilterOptions.termIdList = termIds;
        var cols = [
            { field: 'company', header: 'Company' },
            { field: 'reportingPeriod', header: 'Reporting Period' },
            { field: 'periodEndDate', header: 'Period End Date' },
        ];
        cols.forEach(function (obj) {
            _this.exportDataCols.push(obj);
        });
        this.exportService.getResultsForExportTermResults(this.termResultFilterOptions).subscribe(function (response) {
            _this.exportData = response;
            if (_this.termResultFilterOptions.includeValidationInfos === true) {
                _this.exportData.termNameList.forEach(function (name) {
                    var col = [{ field: name, header: name },
                        { field: 'resolvedExpressions', header: name + ' Resolved Expression' },
                        { field: 'validationStatuses', header: name + ' Validation Status' },
                        { field: 'validationMessages', header: name + ' Validation Message' }];
                    col.forEach(function (obj) {
                        _this.exportDataCols.push(obj);
                    });
                    _this.progressSpinner = false;
                    //this.exportDataCols.push(col);
                });
            }
            else {
                _this.exportData.termNameList.forEach(function (name) {
                    var col = [{ field: 'termResultValues', header: name },
                        { field: 'resolvedExpressions', header: name + ' Resolved Expression' }];
                    col.forEach(function (obj) {
                        _this.exportDataCols.push(obj);
                    });
                    _this.progressSpinner = false;
                    // this.exportDataCols.push (col);
                });
            }
            for (var i = 0; i < _this.exportData.exportItemList.length; i++) {
                var res = _this.exportData.exportItemList[i];
                var termValues = res.termResultValues;
                var updatedTermValues = [];
                if (_this.termResultFilterOptions.includeValidationInfos === true) {
                    for (var x = 0; x < termValues.length; x++) {
                        var expo = Number.parseFloat(termValues[x]).toFixed(0);
                        updatedTermValues.push(expo);
                        updatedTermValues.push(res.resolvedExpressions[x]);
                        updatedTermValues.push(res.validationStatuses[x]);
                        updatedTermValues.push(res.validationMessages[x]);
                    }
                }
                else {
                    for (var x = 0; x < termValues.length; x++) {
                        var expo = Number.parseFloat(termValues[x]).toFixed(0);
                        updatedTermValues.push(expo);
                        updatedTermValues.push(res.resolvedExpressions[x]);
                    }
                }
                res.termResultValues = updatedTermValues;
            }
            _this.actualExportData = _this.exportData.exportItemList;
            _this.exportData = _this.exportData.exportItemList;
            // this.actualExportData = this.exportData;
            if (!_this.quatCheck) {
                _this.exportData = [];
                _this.actualExportData.forEach(function (obj) {
                    if (obj.reportingPeriod.includes('FY')) {
                        _this.exportData.push(obj);
                    }
                });
            }
            _this.first = _this.exportData.length > 10 ? 10 : _this.exportData.length;
            _this.row = (_this.exportData.length - _this.first);
            _this.total = _this.exportData.length;
        });
    };
    ;
    ExportComponent.prototype.pagenation = function (value) {
        console.log(value);
        var initialCount = value.rows;
        value.first = (value.first + initialCount);
        this.num = value.first - value.rows;
        this.num = this.num = 0 ? undefined : this.num;
        this.first = value.first;
        this.first = this.first > this.exportData.length ? this.exportData.length : this.first;
        this.row = (this.exportData.length - value.first);
        this.total = this.exportData.length;
    };
    ExportComponent.prototype.covPagenation = function (value) {
        console.log(value);
        var initialCount = value.rows;
        value.first = (value.first + initialCount);
        this.covNum = value.first - value.rows;
        this.covNum = this.covNum = 0 ? undefined : this.covNum;
        this.covFirst = value.first;
        this.covFirst = this.covFirst > this.coverageStats.length ? this.coverageStats.length : this.covFirst;
        this.covRow = (this.coverageStats.length - value.first);
        this.covTotal = this.exportData.length;
    };
    ExportComponent.prototype.yearChange = function (event) {
        if (event.value === null) {
            this.termResultFilterOptions.startYear = (new Date()).getFullYear() - 4;
            this.termResultFilterOptions.endYear = (new Date()).getFullYear();
        }
        else {
            this.rangeValues = [event.value, event.value];
            // this.rangeValues = [(new Date()).getFullYear()-4, (new Date()).getFullYear()];
            this.termResultFilterOptions.startYear = event.value;
            this.termResultFilterOptions.endYear = event.value;
            //this.selectedOver = true;
        }
        sessionStorage.setItem('export.termResultFilterOptions.startYear', JSON.stringify(this.termResultFilterOptions.startYear));
        sessionStorage.setItem('export.termResultFilterOptions.endYear', JSON.stringify(this.termResultFilterOptions.endYear));
        sessionStorage.setItem('export.selectedOver', JSON.stringify(this.selectedOver));
        sessionStorage.setItem('export.rangeValues', JSON.stringify(this.rangeValues));
        sessionStorage.setItem('export.year', JSON.stringify(this.year));
    };
    ExportComponent.prototype.yearSlideChange = function (event) {
        this.year = '';
        this.selectedOver = false;
        this.termResultFilterOptions.startYear = this.rangeValues[0];
        this.termResultFilterOptions.endYear = this.rangeValues[1];
        sessionStorage.setItem('export.termResultFilterOptions.startYear', JSON.stringify(this.termResultFilterOptions.startYear));
        sessionStorage.setItem('export.termResultFilterOptions.endYear', JSON.stringify(this.termResultFilterOptions.endYear));
        sessionStorage.setItem('export.selectedOver', JSON.stringify(this.selectedOver));
        sessionStorage.setItem('export.rangeValues', JSON.stringify(this.rangeValues));
        sessionStorage.setItem('export.year', JSON.stringify(this.year));
    };
    ExportComponent.prototype.refreshExportCoverageData = function () {
        var _this = this;
        this.coverageStats = [];
        this.coverageDataCols = [];
        var entityIds = [];
        this.selectedEntities.forEach(function (obj) {
            entityIds.push(obj.entityId);
        });
        this.termResultFilterOptions.entityList = entityIds;
        if (this.termResultFilterOptions.entityList.length === 0) {
            // if (this.termResultFilterOptions.isForAllEntities !== true)  {
            //   this.showError = true;
            //   this.progressSpinner = false;
            //     this.errorMsg = "Atleast one Company needs to be specified for processing or all companies override needs to be checked.";
            //     return;
            // }
            this.termResultFilterOptions.isForAllEntities = true;
            this.selectedOver = true;
        }
        var termIds = [];
        this.selectedTerms.forEach(function (obj) {
            termIds.push(obj.termId);
        });
        if (termIds.length === 0) {
            this.showError = true;
            this.progressSpinner = false;
            this.errorMsg = "Atleast one Term needs to be checked.";
            return;
        }
        this.termResultFilterOptions.termIdList = termIds;
        this.exportService.getResultsForExportCoverage(this.termResultFilterOptions).subscribe(function (response) {
            _this.coverageStats = response.exportItemList;
            _this.covFirst = _this.coverageStats.length > 10 ? 10 : _this.coverageStats.length;
            _this.covRow = (_this.coverageStats.length - _this.covFirst);
            _this.covTotal = _this.coverageStats.length;
            _this.progressSpinner = false;
            response.columnList.forEach(function (obj) {
                _this.coverageDataCols.push({ header: obj });
            });
        }, function errorfunction(err) {
            this.progressSpinner = false;
            console.log("Export error: " + JSON.stringify(err));
        });
    };
    ;
    ExportComponent.prototype.downloadTermResData = function (fileName) {
        // downloadTermResData(table) {
        fileName = fileName.includes('.csv') ? fileName : fileName + '.csv';
        var headers = [];
        headers.push('CIK');
        this.exportDataCols.forEach(function (obj) {
            headers.push(obj.header);
        });
        var data = [];
        this.exportData.forEach(function (obj) {
            var dat = [];
            dat.push(obj.cik);
            dat.push("\"" + obj.company + "\"");
            dat.push(obj.reportingPeriod);
            dat.push(obj.periodEndDate);
            obj.termResultValues.forEach(function (val) {
                val = "\"" + val + "\"";
                dat.push(val);
            });
            data.push(dat);
        });
        this.downloadFile(data, fileName, headers);
        // table.value.forEach(item => {
        //   item.termResultValues = item.termResultValues[0];
        // });
        // table.exportCSV();
    };
    ExportComponent.prototype.downloadCovData = function (fileName) {
        fileName = fileName.includes('.csv') ? fileName : fileName + '.csv';
        var headers = [];
        this.coverageDataCols.forEach(function (obj) {
            headers.push(obj.header);
        });
        var data = [];
        this.coverageStats.forEach(function (obj) {
            var dat = [];
            dat.push("\"" + obj.termName + "\"");
            dat.push(obj.termId);
            obj.coverageValues.forEach(function (val) {
                val = "\"" + val + "\"";
                dat.push(val);
            });
            data.push(dat);
        });
        this.downloadFile(data, fileName, headers);
    };
    ExportComponent.prototype.downloadFile = function (data, filename, header) {
        var csvData = this.ConvertToCSV(data, header);
        console.log(csvData);
        var blob = new Blob(['\ufeff' + csvData], { type: 'text/csv;charset=utf-8;' });
        var dwldLink = document.createElement("a");
        var url = URL.createObjectURL(blob);
        var isSafariBrowser = navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;
        if (isSafariBrowser) { //if Safari open in new window to save file with random filename.
            dwldLink.setAttribute("target", "_blank");
        }
        dwldLink.setAttribute("href", url);
        dwldLink.setAttribute("download", filename);
        dwldLink.style.visibility = "hidden";
        document.body.appendChild(dwldLink);
        dwldLink.click();
        document.body.removeChild(dwldLink);
    };
    ExportComponent.prototype.ConvertToCSV = function (objArray, headerList) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        var row = '';
        for (var index in headerList) {
            row += headerList[index] + ',';
        }
        row = row.slice(0, -1);
        str += row + '\r\n';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            line = array[i];
            str += line + '\r\n';
        }
        return str;
    };
    ExportComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    ExportComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'export-page',
            template: __webpack_require__(/*! ./export.html */ "./src/app/export/export.html"),
            styles: [__webpack_require__(/*! ../app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_exportService__WEBPACK_IMPORTED_MODULE_3__["ExportService"], app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _utils_utilService__WEBPACK_IMPORTED_MODULE_4__["UtilService"], app_app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], ExportComponent);
    return ExportComponent;
}());



/***/ }),

/***/ "./src/app/export/exportService.ts":
/*!*****************************************!*\
  !*** ./src/app/export/exportService.ts ***!
  \*****************************************/
/*! exports provided: ExportService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExportService", function() { return ExportService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");





var ExportService = /** @class */ (function () {
    // private exportTermResultsUrl = 'https://localhost:18081/api/ExportTermResults';
    // private exportTermCoverageUrl = 'https://localhost:18081/api/ExportTermCoverage'
    function ExportService(http) {
        this.http = http;
        this.exportTermResultsUrl = '/api/ExportTermResults';
        this.exportTermCoverageUrl = '/api/ExportTermCoverage';
    }
    ExportService.prototype.getResultsForExportTermResults = function (trp) {
        console.log('ExportService : getResultsForExportTermResults()...');
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        var body = JSON.stringify({
            includeFiscalYears: trp.includeFiscalYears, includeFiscalQuarters: trp.includeFiscalQuarters, startYear: trp.startYear, endYear: trp.endYear, entityId: trp.entityId,
            termId: trp.termId, entityList: trp.entityList, termIdList: trp.termIdList, exportType: trp.exportType, isForAllEntities: trp.isForAllEntities, includeValidationInfos: trp.includeValidationInfos
        });
        return this.http.put("" + this.exportTermResultsUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) { return data.json(); }));
    };
    ExportService.prototype.getResultsForExportCoverage = function (trp) {
        console.log('ExportService : getResultsForExportCoverage()...');
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        var body = JSON.stringify({
            includeFiscalYears: trp.includeFiscalYears, includeFiscalQuarters: trp.includeFiscalQuarters, startYear: trp.startYear, endYear: trp.endYear, entityId: trp.entityId,
            termId: trp.termId, entityList: trp.entityList, termIdList: trp.termIdList, exportType: trp.exportType, isForAllEntities: trp.isForAllEntities, includeValidationInfos: trp.includeValidationInfos
        });
        return this.http.put("" + this.exportTermCoverageUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) { return data.json(); }));
    };
    ExportService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"]])
    ], ExportService);
    return ExportService;
}());



/***/ }),

/***/ "./src/app/featurehome/featurehome.component.css":
/*!*******************************************************!*\
  !*** ./src/app/featurehome/featurehome.component.css ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".container {\r\n  display:flex;\r\n  justify-content:flex-start;\r\n  flex-direction: row;\r\n}\r\n\r\n.div1 {\r\n  position: relative;\r\n  height:100vh;\r\n  flex-grow:0;\r\n  margin-left: -45%;\r\n  min-width: 18vw;\r\n\r\n }\r\n\r\n.dragHorizental {\r\n   padding:15px;\r\n   position:relative;\r\n }\r\n\r\n.dragHorizental .dragger{\r\n  content: '';\r\n   position: absolute;\r\n   bottom: 0;\r\n   margin-left: -15px;\r\n   cursor: s-resize;\r\n   height: 7px;\r\n   width: 78vw;\r\n   border-top: 1px solid darkgray;\r\n   overflow: hidden;\r\n   background-color: #eff0f1;\r\n   background-position: 210px -364px;\r\n   background-size: initial;\r\n   background-repeat: no-repeat;\r\n}\r\n\r\n.p-0 {\r\n  padding: 0px !important;\r\n}\r\n\r\n.p-y-5 {\r\n  padding: 5px 0px !important;\r\n}\r\n\r\n.p-x-5 {\r\n  padding: 0px 5px !important;\r\n}\r\n\r\n.m-y-5 {\r\n  margin: 5px 0px !important;\r\n}\r\n\r\n.m-x-5 {\r\n  margin: 0px 5px !important;\r\n}\r\n\r\n.input-wrapper label {\r\n  display: block;\r\n}\r\n\r\n.input-wrapper input {\r\nwidth: 100%;\r\nheight: 35px;\r\n}\r\n\r\n.input-wrapper textarea{\r\nwidth: 100%;\r\nmin-height: 35px;\r\n}\r\n\r\n.input-wrapper p-dropdown div {\r\nwidth: 100% !important;\r\nmin-height: 35px !important;\r\n}\r\n\r\n.node circle {\r\n  fill: #999;\r\n}\r\n\r\n.node text {\r\n  font: 10px sans-serif;\r\n}\r\n\r\n.node--internal circle {\r\n  fill: #555;\r\n}\r\n\r\n.node--internal text {\r\n  text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\r\n}\r\n\r\n.link {\r\n  fill: none;\r\n  stroke: #555;\r\n  stroke-opacity: 0.4;\r\n  stroke-width: 1.5px;\r\n}\r\n\r\n::ng-deep #termRulesTreeTable p-treetable .ui-treetable .ui-treetable-wrapper table.ui-treetable-table tbody.ui-treetable-tbody tr td.ui-toggler-column {\r\n  border: none !important;\r\n}\r\n\r\n.selected-node {\r\n  font-weight: bolder !important;\r\n}\r\n\r\n.modal {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  z-index: 1050;\r\n  overflow: auto;\r\n  outline: 0;\r\n  max-height: 98vh;\r\n  height: -webkit-fit-content;\r\n  height: -moz-fit-content;\r\n  height: fit-content;  \r\n  border: 1px solid #c8c8c8;\r\n}\r\n\r\n/* Modal Content */\r\n\r\n.modal-content {\r\n  background-color: #fefefe;\r\n  margin: auto;\r\n  padding: 0px 10px 10px 10px;\r\n  border: 1px solid #888;\r\n  width: 100%;\r\n}\r\n\r\n.minimize-modal {\r\n  display: block !important;\r\n  height: 50px !important;\r\n  width: 185px !important;\r\n  top: 94.8vh !important;\r\n  overflow: hidden !important;\r\n}\r\n\r\n.modal-header {\r\n  border-bottom: 1px solid #c8c8c8;\r\n  background-color: #f4f4f4;\r\n  color: #333333;\r\n  padding: 5px;\r\n  font-weight: 700;\r\n}\r\n\r\n.w-100 {\r\n  width: 100% !important;\r\n}\r\n\r\n/* The Close Button */\r\n\r\n.close {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n}\r\n\r\n.minimize {\r\n  color: #333333;\r\n  font-size: 28px;\r\n  opacity: 0.5;\r\n  margin-right: 10px;\r\n}\r\n\r\n.minimize:hover,\r\n.minimize:focus, \r\n.maximize:hover,\r\n.maximize:focus {\r\n  color: #000;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  opacity: 1;\r\n}\r\n\r\n.maximize { \r\n  color: #333333;\r\n    font-size: 24px;\r\n    position: relative;\r\n    top: 4px;\r\n    opacity: 0.3;\r\n    margin-right: 10px;\r\n    font-weight: bold;\r\n}\r\n\r\n.float-right {\r\n  float: right;\r\n}\r\n\r\n.close:hover,\r\n.close:focus {\r\n  color: #000;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.cancel-btn-container {\r\n  padding-top: 15px;  \r\n}\r\n\r\n::ng-deep .company-name-wrapper input {\r\n  width: 91.78% !important;\r\n}\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZmVhdHVyZWhvbWUvZmVhdHVyZWhvbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7RUFDWiwwQkFBMEI7RUFDMUIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLGVBQWU7O0NBRWhCOztBQUVEO0dBQ0csWUFBWTtHQUNaLGlCQUFpQjtDQUNuQjs7QUFFRDtFQUNFLFdBQVc7R0FDVixrQkFBa0I7R0FDbEIsU0FBUztHQUNULGtCQUFrQjtHQUNsQixnQkFBZ0I7R0FDaEIsV0FBVztHQUNYLFdBQVc7R0FDWCw4QkFBOEI7R0FDOUIsZ0JBQWdCO0dBQ2hCLHlCQUF5QjtHQUN6QixpQ0FBaUM7R0FDakMsd0JBQXdCO0dBQ3hCLDRCQUE0QjtBQUMvQjs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLDBCQUEwQjtBQUM1Qjs7QUFFQTtFQUNFLDBCQUEwQjtBQUM1Qjs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7QUFDQSxXQUFXO0FBQ1gsWUFBWTtBQUNaOztBQUVBO0FBQ0EsV0FBVztBQUNYLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7QUFDM0I7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxxRUFBcUU7QUFDdkU7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsWUFBWTtFQUNaLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLFFBQVE7RUFDUixTQUFTO0VBQ1QsYUFBYTtFQUNiLGNBQWM7RUFDZCxVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLDJCQUFtQjtFQUFuQix3QkFBbUI7RUFBbkIsbUJBQW1CO0VBQ25CLHlCQUF5QjtBQUMzQjs7QUFFQSxrQkFBa0I7O0FBQ2xCO0VBQ0UseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWiwyQkFBMkI7RUFDM0Isc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6Qix1QkFBdUI7RUFDdkIsdUJBQXVCO0VBQ3ZCLHNCQUFzQjtFQUN0QiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxnQ0FBZ0M7RUFDaEMseUJBQXlCO0VBQ3pCLGNBQWM7RUFDZCxZQUFZO0VBQ1osZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBLHFCQUFxQjs7QUFDckI7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsY0FBYztFQUNkLGVBQWU7RUFDZixZQUFZO0VBQ1osa0JBQWtCO0FBQ3BCOztBQUVBOzs7O0VBSUUsV0FBVztFQUNYLHFCQUFxQjtFQUNyQixlQUFlO0VBQ2YsVUFBVTtBQUNaOztBQUVBO0VBQ0UsY0FBYztJQUNaLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsaUJBQWlCO0FBQ3JCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBOztFQUVFLFdBQVc7RUFDWCxxQkFBcUI7RUFDckIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLHdCQUF3QjtBQUMxQiIsImZpbGUiOiJzcmMvYXBwL2ZlYXR1cmVob21lL2ZlYXR1cmVob21lLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcclxuICBkaXNwbGF5OmZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxufVxyXG5cclxuLmRpdjEge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBoZWlnaHQ6MTAwdmg7XHJcbiAgZmxleC1ncm93OjA7XHJcbiAgbWFyZ2luLWxlZnQ6IC00NSU7XHJcbiAgbWluLXdpZHRoOiAxOHZ3O1xyXG5cclxuIH1cclxuXHJcbi5kcmFnSG9yaXplbnRhbCB7XHJcbiAgIHBhZGRpbmc6MTVweDtcclxuICAgcG9zaXRpb246cmVsYXRpdmU7XHJcbiB9XHJcblxyXG4uZHJhZ0hvcml6ZW50YWwgLmRyYWdnZXJ7XHJcbiAgY29udGVudDogJyc7XHJcbiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgYm90dG9tOiAwO1xyXG4gICBtYXJnaW4tbGVmdDogLTE1cHg7XHJcbiAgIGN1cnNvcjogcy1yZXNpemU7XHJcbiAgIGhlaWdodDogN3B4O1xyXG4gICB3aWR0aDogNzh2dztcclxuICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIGRhcmtncmF5O1xyXG4gICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZmMGYxO1xyXG4gICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAyMTBweCAtMzY0cHg7XHJcbiAgIGJhY2tncm91bmQtc2l6ZTogaW5pdGlhbDtcclxuICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxufVxyXG5cclxuLnAtMCB7XHJcbiAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5wLXktNSB7XHJcbiAgcGFkZGluZzogNXB4IDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ucC14LTUge1xyXG4gIHBhZGRpbmc6IDBweCA1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxuLm0teS01IHtcclxuICBtYXJnaW46IDVweCAwcHggIWltcG9ydGFudDtcclxufVxyXG5cclxuLm0teC01IHtcclxuICBtYXJnaW46IDBweCA1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxuLmlucHV0LXdyYXBwZXIgbGFiZWwge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4uaW5wdXQtd3JhcHBlciBpbnB1dCB7XHJcbndpZHRoOiAxMDAlO1xyXG5oZWlnaHQ6IDM1cHg7XHJcbn1cclxuXHJcbi5pbnB1dC13cmFwcGVyIHRleHRhcmVhe1xyXG53aWR0aDogMTAwJTtcclxubWluLWhlaWdodDogMzVweDtcclxufVxyXG5cclxuLmlucHV0LXdyYXBwZXIgcC1kcm9wZG93biBkaXYge1xyXG53aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG5taW4taGVpZ2h0OiAzNXB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5ub2RlIGNpcmNsZSB7XHJcbiAgZmlsbDogIzk5OTtcclxufVxyXG5cclxuLm5vZGUgdGV4dCB7XHJcbiAgZm9udDogMTBweCBzYW5zLXNlcmlmO1xyXG59XHJcblxyXG4ubm9kZS0taW50ZXJuYWwgY2lyY2xlIHtcclxuICBmaWxsOiAjNTU1O1xyXG59XHJcblxyXG4ubm9kZS0taW50ZXJuYWwgdGV4dCB7XHJcbiAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI2ZmZiwgMCAtMXB4IDAgI2ZmZiwgMXB4IDAgMCAjZmZmLCAtMXB4IDAgMCAjZmZmO1xyXG59XHJcblxyXG4ubGluayB7XHJcbiAgZmlsbDogbm9uZTtcclxuICBzdHJva2U6ICM1NTU7XHJcbiAgc3Ryb2tlLW9wYWNpdHk6IDAuNDtcclxuICBzdHJva2Utd2lkdGg6IDEuNXB4O1xyXG59XHJcblxyXG46Om5nLWRlZXAgI3Rlcm1SdWxlc1RyZWVUYWJsZSBwLXRyZWV0YWJsZSAudWktdHJlZXRhYmxlIC51aS10cmVldGFibGUtd3JhcHBlciB0YWJsZS51aS10cmVldGFibGUtdGFibGUgdGJvZHkudWktdHJlZXRhYmxlLXRib2R5IHRyIHRkLnVpLXRvZ2dsZXItY29sdW1uIHtcclxuICBib3JkZXI6IG5vbmUgIWltcG9ydGFudDtcclxufVxyXG5cclxuLnNlbGVjdGVkLW5vZGUge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXIgIWltcG9ydGFudDtcclxufVxyXG5cclxuLm1vZGFsIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG4gIGJvdHRvbTogMDtcclxuICB6LWluZGV4OiAxMDUwO1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG4gIG91dGxpbmU6IDA7XHJcbiAgbWF4LWhlaWdodDogOTh2aDtcclxuICBoZWlnaHQ6IGZpdC1jb250ZW50OyAgXHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2M4YzhjODtcclxufVxyXG5cclxuLyogTW9kYWwgQ29udGVudCAqL1xyXG4ubW9kYWwtY29udGVudCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZmVmZTtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgcGFkZGluZzogMHB4IDEwcHggMTBweCAxMHB4O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICM4ODg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5taW5pbWl6ZS1tb2RhbCB7XHJcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDUwcHggIWltcG9ydGFudDtcclxuICB3aWR0aDogMTg1cHggIWltcG9ydGFudDtcclxuICB0b3A6IDk0Ljh2aCAhaW1wb3J0YW50O1xyXG4gIG92ZXJmbG93OiBoaWRkZW4gIWltcG9ydGFudDtcclxufVxyXG5cclxuLm1vZGFsLWhlYWRlciB7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjOGM4Yzg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcclxuICBjb2xvcjogIzMzMzMzMztcclxuICBwYWRkaW5nOiA1cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxufVxyXG5cclxuLnctMTAwIHtcclxuICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4vKiBUaGUgQ2xvc2UgQnV0dG9uICovXHJcbi5jbG9zZSB7XHJcbiAgZm9udC1zaXplOiAyOHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG4ubWluaW1pemUge1xyXG4gIGNvbG9yOiAjMzMzMzMzO1xyXG4gIGZvbnQtc2l6ZTogMjhweDtcclxuICBvcGFjaXR5OiAwLjU7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcblxyXG4ubWluaW1pemU6aG92ZXIsXHJcbi5taW5pbWl6ZTpmb2N1cywgXHJcbi5tYXhpbWl6ZTpob3ZlcixcclxuLm1heGltaXplOmZvY3VzIHtcclxuICBjb2xvcjogIzAwMDtcclxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG9wYWNpdHk6IDE7XHJcbn1cclxuXHJcbi5tYXhpbWl6ZSB7IFxyXG4gIGNvbG9yOiAjMzMzMzMzO1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgdG9wOiA0cHg7XHJcbiAgICBvcGFjaXR5OiAwLjM7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLmZsb2F0LXJpZ2h0IHtcclxuICBmbG9hdDogcmlnaHQ7XHJcbn1cclxuXHJcbi5jbG9zZTpob3ZlcixcclxuLmNsb3NlOmZvY3VzIHtcclxuICBjb2xvcjogIzAwMDtcclxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG4uY2FuY2VsLWJ0bi1jb250YWluZXIge1xyXG4gIHBhZGRpbmctdG9wOiAxNXB4OyAgXHJcbn1cclxuXHJcbjo6bmctZGVlcCAuY29tcGFueS1uYW1lLXdyYXBwZXIgaW5wdXQge1xyXG4gIHdpZHRoOiA5MS43OCUgIWltcG9ydGFudDtcclxufVxyXG5cclxuIl19 */"

/***/ }),

/***/ "./src/app/featurehome/featurehome.component.html":
/*!********************************************************!*\
  !*** ./src/app/featurehome/featurehome.component.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n  <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\" strokeWidth=\"8\"\r\n    fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n  <p-messages [value]=\"msgs\"></p-messages>\r\n</div>\r\n<p-confirmDialog [style]=\"{width: '50vw'}\" [baseZIndex]=\"10000\"></p-confirmDialog>\r\n<div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\">\r\n  <strong>{{errorMsg}}</strong>\r\n</div>\r\n<div class=\"row p-y-5\" *ngIf=\"processnow\" style=\"border-style: solid;\">\r\n  <div class=\"col-xs-12 col-lg-3 input-wrapper\">\r\n    <label>Division -> Sector:</label>\r\n    <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\" [(ngModel)]=\"divSector\"\r\n      [style]=\"{'width':'90%'}\" dropdownIcon=\"pi pi-chevron-down\" (onChange)=\"divSectorChange(divSector)\"\r\n      [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\"></p-dropdown>\r\n    <span>\r\n      {{divisionCount}}\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"col-xs-12 col-lg-3 input-wrapper\">\r\n    <label>Industry:</label>\r\n    <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\" [showClear]=\"true\"\r\n      (onChange)=\"processIndustryChange(industry)\" [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\"\r\n      [style]=\"{'width':'90%'}\"></p-dropdown>\r\n    <span>\r\n      {{sectorCount}}\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"col-xs-12 col-lg-3 input-wrapper\">\r\n    <label>Filer Category:</label>\r\n    <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\" placeholder=\"Select Filer Category\"\r\n      [showClear]=\"true\" (onChange)=\"processfilCatChange(filerCategory)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n      filter=\"true\" [style]=\"{'width':'90%'}\"></p-dropdown>\r\n    <span>\r\n      {{categoryCount}}\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"col-xs-12 col-lg-3 input-wrapper\">\r\n    <label style=\"height: 14px; width: 100%;\"></label>\r\n    <button pButton type=\"button\" label=\"Process Now\" class=\" ui-button ui-button-success\" [disabled]=\"enableTermButton\"\r\n      (click)=\"processNow()\"></button>\r\n  </div>\r\n</div>\r\n\r\n<div style=\"width: 100vw; height: 92.5vh;\">\r\n\r\n  <as-split direction=\"horizontal\" [useTransition]=\"true\" (gutterClick)=\"onGutterClick($event)\" (dragEnd)=\"onDragEnd($event)\"  >\r\n  <!-- <as-split-area size=\"20\"> -->\r\n      <as-split-area [size]=\"areas[0].size\" order=\"areas[0].order\" >\r\n\r\n      <p-tree [value]=\"termTree\" [filter]=\"true\" [style]=\"{width: '100%','text-align':'left','overflow':'auto'}\"\r\n        filterMode=\"strict\" (onNodeSelect)=\"termTreeSelection($event)\" selectionMode=\"single\"\r\n        [(selection)]=\"selectedTerm\" (onNodeUnselect)=\"termTreeunselect($event)\" joyrideStep=\"termRuleSelection\"\r\n        [stepContent]=\"termRuleSelectionSection\" title=\"Term Rule Selection\" [filterPlaceholder]=\"'Search term rule'\">\r\n      </p-tree>\r\n    </as-split-area>\r\n   <!--  <as-split-area size=\"80\"> -->\r\n      <as-split-area [size]=\"areas[1].size\" order=\"areas[1].order\" >\r\n\r\n      <as-split direction=\"vertical\">\r\n        <as-split-area size=\"65\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-5 col-xs-12\" style=\"padding: 50px 30px;\">\r\n\r\n              <div class=\"row\" p-y-5>\r\n                <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                  <label>Term Name</label>\r\n                  <input id=\"termNameinput\" type=\"text\" size=\"30\" pInputText [(ngModel)]=\"termName\"\r\n                  (ngModelChange)=\"onTermNameChange($event)\"\r\n                    joyrideStep=\"termName\" title=\"Term Name\"\r\n                    text=\"The Term Name displays the name of the selected term.\">\r\n                </div>\r\n\r\n                <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                  <label>Term Code</label>\r\n                  <input id=\"termCodeinput\" type=\"text\" size=\"30\" pInputText [(ngModel)]=\"termCode\"\r\n                    (ngModelChange)=\"termCodeChange($event)\" [disabled]=\"enableTermCode\" joyrideStep=\"termCode\"\r\n                    title=\"Term Code\" text=\"The Term Code displays the code for the selected term. \">\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row p-y-5 \">\r\n                <div class=\"col-12 input-wrapper\">\r\n                  <label>Definition</label>\r\n                  <textarea rows=\"5\" cols=\"30\" [(ngModel)]=\"definition\" pInputTextarea joyrideStep=\"definition\"\r\n                  (ngModelChange)=\"onTermDefinitionChange($event)\"\r\n                    title=\"Definition\" text=\"Definition\"></textarea>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row p-y-5 \">\r\n                <div class=\"col-12\">\r\n                  <div class=\"\">\r\n                    <p-checkbox class=\"float-left\" [(ngModel)]=\"incAccuTest\" binary=\"true\"\r\n                      joyrideStep=\"IncludeInAccuracyTest\" title=\"Included in Accuracy Test\"\r\n                      (onChange)=\"onIncAccuTest($event)\"\r\n                      text=\"This check box identifies whether or the not the selected term is displayed in the Accuracy Test. \">\r\n                    </p-checkbox>\r\n                    <label class=\"float-left p-x-5\">Included in Accuracy Test</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row p-y-5 \">\r\n                <div class=\"col-xs-12 col-lg-6  input-wrapper\">\r\n                  <label>Period Type</label>\r\n                  <p-dropdown [options]=\"periodTypeList\" [style]=\"{'width':'100%'}\" placeholder=\"Period Type\"\r\n                    [(ngModel)]=\"periodType\" optionLabel=\"name\" [style]=\"{'width':'200px'}\"\r\n                    (onChange)=\"onPeriodTypeChange($event)\"\r\n                    dropdownIcon=\"pi pi-chevron-down\" style=\"text-align: center\" filter=\"true\" joyrideStep=\"periodType\"\r\n                    title=\"Period Type\" [stepContent]=\"periodTypeSection\">\r\n                  </p-dropdown>\r\n                </div>\r\n\r\n                <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                  <label>Type</label>\r\n                  <p-dropdown [options]=\"typeList\" [style]=\"{'width':'100%'}\" placeholder=\"Type\" [(ngModel)]=\"type\"\r\n                    optionLabel=\"name\" [style]=\"{'width':'200px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                    style=\"text-align: center\" filter=\"true\" joyrideStep=\"type\" title=\"Type\"\r\n                    (onChange)=\"onTypeChange($event)\"\r\n                    [stepContent]=\"typeSection\">\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row p-y-5 \">\r\n                <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                  <label>Financial Statement</label>\r\n                  <p-dropdown [options]=\"trmRulFinStatmntList\" [style]=\"{'width':'100%'}\"\r\n                    placeholder=\"Financial Statement\" [(ngModel)]=\"finStatement\" optionLabel=\"financialStatement\"\r\n                    [style]=\"{'width':'200px'}\" dropdownIcon=\"pi pi-chevron-down\" style=\"text-align: center\"\r\n                    filter=\"true\" joyrideStep=\"financialStatement\" title=\"Financial Statement\"\r\n                    (onChange)=\"onFinStatemenChange($event)\"\r\n                    [stepContent]=\"financialStatementSection\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                  <label>Priority Group</label>\r\n                  <p-dropdown [options]=\"trmRulPriorGrpList\" [style]=\"{'width':'100%'}\" placeholder=\"Priority Group\"\r\n                    [(ngModel)]=\"priorgroup\" optionLabel=\"name\" [style]=\"{'width':'200px'}\"\r\n                    dropdownIcon=\"pi pi-chevron-down\" style=\"text-align: center\" filter=\"true\"\r\n                    (onChange)=\"onPriorgroupChange($event)\"\r\n                    joyrideStep=\"priorityGroup\" title=\"Priority Group\" [stepContent]=\"priorityGroupSection\">\r\n                  </p-dropdown>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row p-y-5 \">\r\n                <div class=\"col-6 input-wrapper\">\r\n                  <label>Processing Order: {{processingOrder}}</label>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row p-y-5 text-center\">\r\n                <div class=\"col-12\">\r\n                  <button pButton type=\"button\" label=\"Add Term\" class=\"ui-button m-x-5\" (click)=\"addTerm()\"\r\n                    [disabled]=\"enableAddTermButton\" joyrideStep=\"addTerm\" title=\"Add Term\"\r\n                    [stepContent]=\"addTermSection\"></button>\r\n                  <button pButton type=\"button\" label=\"Save Term\" class=\"ui-button m-x-5\" [disabled]=\"enableTermButton\"\r\n                    (click)=\"saveTerm()\" joyrideStep=\"saveTerm\" title=\"Save Term\"\r\n                    text=\"The User can click on the “Save Term” to save the term\"></button>\r\n                  <button pButton type=\"button\" label=\"Process Term\" class=\"ui-button m-x-5\"\r\n                    [disabled]=\"enableTermButton\" (click)=\"processTermnow()\" joyrideStep=\"processTerm\"\r\n                    title=\"Process Term\"\r\n                    text=\"The user can click on the “Process Term” to process the term results for a group of companies based on the option the user selected. \"></button>\r\n                  <button pButton type=\"button\" label=\"Remove Term\" class=\"ui-button m-x-5\"\r\n                    [disabled]=\"enableTermButton\" (click)=\"removeTerm()\" joyrideStep=\"removeTerm\" title=\"Remove Term\"\r\n                    [stepContent]=\"removeTermSection\"></button>\r\n                </div>\r\n              </div>\r\n\r\n\r\n            </div>\r\n            <div class=\"col-lg-7 col-xs-12\" style=\" padding-right: 50px; \">\r\n              <!-- This feature is not for this release this is for next release -->\r\n              <!-- <div class=\"12\" style=\"float: right;\">\r\n                <label> Start Tour</label>\r\n                <p-inputSwitch (onChange)=\"startTour($event)\" [(ngModel)]=\"tour\"></p-inputSwitch>\r\n              </div> -->\r\n              <div class=\"row\" *ngIf=\"displayTerms\">\r\n\r\n                <div class=\"12 p-y-5\">\r\n                  <button pButton type=\"button\" label=\"{{expLabel}}\" class=\"ui-button m-x-5  ui-button-warning\"\r\n                    (click)=\"expressionClick()\" joyrideStep=\"expLabel\" title=\"{{expLabel}}\"\r\n                    [stepContent]=\"expLabelSection\"></button>\r\n\r\n                  <button pButton type=\"button\" label=\"Expressions\" class=\"ui-button m-x-5 ui-button-success\"\r\n                    (click)=\"onExpressionButtonClick('expressions')\"></button>\r\n                  <button pButton type=\"button\" label=\"Validations\" class=\"ui-button m-x-5 ui-button-success\"\r\n                    (click)=\"onExpressionButtonClick('validations')\"></button>\r\n                  <button pButton type=\"button\" label=\"Industry Override Expressios\"\r\n                    class=\"ui-button m-x-5 ui-button-success\" (click)=\"onExpressionButtonClick('industry')\"\r\n                    icon=\"pi pi-check\"></button>\r\n\r\n                  <button pButton type=\"button\" label=\"Derived Zero Expressions\"\r\n                    class=\"ui-button m-x-5 ui-button-success\" (click)=\"onExpressionButtonClick('derived')\"\r\n                    icon=\"pi pi-check\"></button>\r\n                  <p-dropdown *ngIf=\"indOvrdExprDrop\" [style]=\"{'width':'100%'}\" [options]=\"indovrDrpList\"\r\n                    [(ngModel)]=\"selIndOvrdExpr\" optionLabel=\"name\" (onChange)=\"industryChange()\"></p-dropdown>\r\n                </div>\r\n                <div class=\"12\">\r\n                  <p-table #expressionTable [columns]=\"expressioncols\" [value]=\"expTableList\" [paginator]=\"true\"\r\n                    [rows]=\"10\" [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                    [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" dataKey=\"termId\"\r\n                    p-dataTable [scrollable]=\"true\" scrollHeight=\"400px\">\r\n                    <ng-template pTemplate=\"colgroup\" let-columns>\r\n                      <colgroup>\r\n                        <col *ngFor=\"let col of columns\" [style.width]=\"col.width\">\r\n                      </colgroup>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"header\" let-columns>\r\n                      <tr>\r\n                        <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn\r\n                          [pSortableColumn]=\"col.field\">\r\n                          <div pTooltip=\"Click to sort {{col.header}}\">\r\n                            {{col.header}}\r\n                            <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                              ariaLabelDesc=\"Activate to sort in descending order\"\r\n                              ariaLabelAsc=\"Activate to sort in ascending order\">\r\n                            </p-sortIcon>\r\n                          </div>\r\n                        </th>\r\n                      </tr>\r\n                      <tr>\r\n                        <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\" pResizableColumn pReorderableColumn>\r\n                          <div *ngIf=\"col.field !== ''\">\r\n                            <input *ngSwitchCase=\"col.field\" pInputText type=\"text\" placeholder=\"Search\"\r\n                              [value]=\"expressionTable.filters[col.field] ? expressionTable.filters[col.field].value : ''\"\r\n                              (input)=\"expressionTable.filter($event.target.value, col.field, 'contains');\"\r\n                              style=\"width: 100%;\">\r\n                          </div>\r\n                        </th>\r\n                      </tr>\r\n                    </ng-template>\r\n\r\n                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-rowIndex=\"rowIndex\">\r\n                      <tr style=\"height:34px\">\r\n                        <td *ngFor=\"let col of columns \" class=\"ui-resizable-column\" style=\"word-wrap:break-word\">\r\n                          <div *ngIf=\"col.field === 'rank'\">\r\n\r\n                            <a href=\"#\" (click)=\"moveRankBy(rowIndex, -1)\" *ngIf=\"rowIndex > 0\" title=\"Move row up\">\r\n                              <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>\r\n                            </a><br>\r\n                            {{rowData[col.field]}}<br>\r\n                            <a href=\"#\" (click)=\"moveRankBy(rowIndex, 1)\" *ngIf=\"expTableList.length - rowIndex > 1\"\r\n                              title=\"Move row down\">\r\n                              <i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>\r\n                            </a>\r\n\r\n                          </div>\r\n                          <div *ngIf=\"col.field !== 'rank' && col.field !== 'options' && col.field !== 'expression'\">\r\n                            {{rowData[col.field]}}\r\n                          </div>\r\n                          <div *ngIf=\"col.field === 'expression'\">\r\n                            <div *ngIf=\"rowData['type'] !== 'Formula'\">\r\n                              {{rowData[col.field]}}\r\n                            </div>\r\n\r\n                            <div *ngIf=\"rowData['type'] === 'Formula'\">\r\n                              <p style=\"display:inline\" *ngFor=\"let formula of rowData['formulaList']\">\r\n                                <a href=\"#\"\r\n                                  (click)=\"showTermResultnavigate($event,formula.termName)\">{{formula.termName}}\r\n                                </a>\r\n                                {{getFormulaSuffix(formula)}}\r\n                              </p>\r\n                              <!-- {{rowData[col.field]}} -->\r\n                              <button type=\"button\" class=\"glyphicon  glyphicon-eye-open\" pTooltip=\"Expression Tree\"\r\n                                (click)=\"showDerivationTree()\"></button>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div *ngIf=\"col.field === 'options'\">\r\n                            <button type=\"button\" pButton (click)=\"onExpressionEdit(rowData)\"\r\n                              (keydown.enter)=\"onExpressionEdit(rowData)\" icon=\"pi pi-pencil\"\r\n                              styleClass=\"ui-button-info\" pTooltip=\"Edit Expression\"></button>\r\n                            &nbsp;&nbsp;\r\n                            <button type=\"button\" pButton (click)=\"deleteWithRank(rowIndex)\"\r\n                              (keydown.enter)=\"deleteWithRank(rowIndex)\" icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                              pTooltip=\"Delete Expression\"></button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"loadingbody\" let-columns=\"columns\">\r\n                      <tr style=\"height:34px\">\r\n                        <td *ngFor=\"let col of columns\" pTooltip=\"{{rowData[col.field]}}\">\r\n                          <div class=\"loading-text\"></div>\r\n                        </td>\r\n                      </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"summary\">\r\n                      Total number of Records: {{expressionTable.totalRecords}}\r\n                    </ng-template>\r\n                  </p-table>\r\n                </div>\r\n                <!-- <div class=\"col-12 m-y-5 text-center\">\r\n                  <button pButton type=\"button\" label=\"Expressions\" class=\"ui-button m-x-5 ui-button-success\"\r\n                    (click)=\"onExpressionButtonClick('expressions')\"></button>\r\n                  <button pButton type=\"button\" label=\"Validations\" class=\"ui-button m-x-5 ui-button-success\"\r\n                    (click)=\"onExpressionButtonClick('validations')\"></button>\r\n                  <button pButton type=\"button\" label=\"Industry Override Expressios\"\r\n                    class=\"ui-button m-x-5 ui-button-success\" (click)=\"onExpressionButtonClick('industry')\"\r\n                    icon=\"pi pi-check\"></button>\r\n                  <button pButton type=\"button\" label=\"Derived Zero Expressions\"\r\n                    class=\"ui-button m-x-5 ui-button-success\" (click)=\"onExpressionButtonClick('derived')\"\r\n                    icon=\"pi pi-check\"></button>\r\n                </div> -->\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </as-split-area>\r\n        <as-split-area size=\"35\" *ngIf=\"displayTerms\">\r\n          <div class=\"row\">\r\n            <div class=\"col-12\">\r\n              <div class=\"row\" style=\"text-align: center\">\r\n                <label style=\"background-color: #E2E8EC;width: 100%\"> Coverage and Term Results</label>\r\n              </div>\r\n              <div class=\"row\" style=\" padding: 15px 30px; \">\r\n                <div class=\"col-7\">\r\n                  <div class=\"row p-y-5\">\r\n                    <div class=\"col-12\" input-wrapper>\r\n                      <p-radioButton class=\"float-left\" name=\"filterRadio\" value=\"company\" [(ngModel)]=\"filterRadio\">\r\n                      </p-radioButton>\r\n                      <label>Search by Company: </label>\r\n                    </div>\r\n                    <div class=\"col-6\" input-wrapper>\r\n                      <p-autoComplete [(ngModel)]=\"companyName\" class=\"company-name-wrapper\" name=\"companyName\"\r\n                        [size]=\"50\" [suggestions]=\"filteredCompany\" (completeMethod)=\"searchCompany($event)\"\r\n                        (onSelect)=\"onCompanyNameChange($event)\"\r\n                        placeholder=\"Search Company\" [size]=\"50\" [dropdown]=\"true\">\r\n\r\n                        <ng-template let-value pTemplate=\"item\">\r\n                          <div class=\"ui-helper-clearfix\">\r\n                            <span [innerHTML]=\"value | highlight : toHighlight\"></span>\r\n                          </div>\r\n                        </ng-template>\r\n                      </p-autoComplete>\r\n                    </div>\r\n                    <div class=\"col-xs-12 col-lg-6  p-0\">\r\n                      <button pButton type=\"button\" label=\"Go To Peer Goup\" class=\"ui-button p-x-5\"\r\n                        (click)=\"goToPeer($event)\"></button>\r\n                      <button type=\"button\" pButton style=\"margin-left: 15px;\" (click)=\"resetCoverage()\"\r\n                        label=\"Clear All\" class=\"ui-button p-x-5\" pTooltip=\"Clear All\"></button>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row p-y-5\">\r\n                    <div class=\"col-12\">\r\n                      <p-radioButton class=\"float-left\" name=\"filterRadio\" value=\"group\" [(ngModel)]=\"filterRadio\">\r\n                      </p-radioButton>\r\n                      <label>Search by Group:\r\n                        Division -> Sector:</label>\r\n                    </div>\r\n                    <div class=\"col-6\">\r\n                      <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\"\r\n                        [(ngModel)]=\"divSector\" [style]=\"{'width':'100%'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                        (onChange)=\"divSectorChange(divSector)\" [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                      </p-dropdown>\r\n                    </div>\r\n                    <div class=\"col-1 p-y-5\">\r\n                      {{divisionCount}}\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row p-y-5\">\r\n                    <div class=\"col-12 input-wrapper\">\r\n                      <label>Industry: </label>\r\n\r\n                    </div>\r\n                    <div class=\"col-6\">\r\n                      <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                        [showClear]=\"true\" (onChange)=\"processIndustryChange(industry)\" [virtualScroll]=\"true\"\r\n                        [itemSize]=\"31\" filter=\"true\" [style]=\"{'width':'100%'}\"></p-dropdown>\r\n\r\n                    </div>\r\n                    <div class=\"col-1 p-y-5\">\r\n                      <span>{{industryCount}}</span>\r\n                      <!-- <span *ngIf=\"!industryCount\">{{divisionCount}}</span> -->\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row p-y-5\">\r\n                    <div class=\"col-12 input-wrapper\">\r\n                      <label>Filer Category:</label>\r\n\r\n                    </div>\r\n                    <div class=\"col-6\">\r\n                      <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                        placeholder=\"Select Filer Category\" [showClear]=\"true\"\r\n                        (onChange)=\"processfilCatChange(filerCategory)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                        filter=\"true\" [style]=\"{'width':'100%'}\"></p-dropdown>\r\n                    </div>\r\n                    <div class=\"col-1 p-y-5\">\r\n                      <span>{{categoryCount}}</span>\r\n                      <!-- <span *ngIf=\"!categoryCount\">{{divisionCount}}</span> -->\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row p-y-5\">\r\n                    <div class=\"col-xs-12 col-lg-6 \">\r\n                      <p-dropdown [options]=\"resolvedRanks\" class=\"\" [(ngModel)]=\"selectResolvedRank\"\r\n                        placeholder=\"Show Resolved By Rank\" (onChange)=\"showResolved(true)\" [style]=\"{'width':'100%'}\">\r\n                      </p-dropdown>\r\n                    </div>\r\n                    <div class=\"col-xs-12 col-lg-6\" style=\"padding: 0px;\">\r\n                      <button pButton type=\"button\" [style]=\"{'width':'100%'}\" label=\"Show Resolved\" class=\"ui-button\"\r\n                        (click)=\"showResolved(true)\"></button>\r\n                      <button pButton style=\"margin-left: 15px;\" type=\"button\" label=\"Show Not Resolved\"\r\n                        class=\"ui-button\" (click)=\"showResolved(false)\"></button>\r\n                    </div>\r\n                  </div>\r\n<!--\r\n                  <div class=\"row p-y-5\">\r\n                    <div class=\"col-4\">\r\n                      <p-checkbox class=\"float-left\" [(ngModel)]=\"quaterly\" binary=\"true\" label=\"Quarterly?\" (onChange)=\"quaterlyChange($event)\">\r\n                      </p-checkbox>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"row p-y-5 \" style=\"visibility: hidden\">\r\n                    <div class=\"col-6\">\r\n                      <h3 style=\"text-align: center\"> {{range[0]}} - {{range[1]}} </h3>\r\n                      <p-slider [(ngModel)]=\"range\" [min]=\"minRange\" [max]=\"maxRange\" [step]=\"1\" [range]=\"true\"\r\n                        (onChange)=\"yearChange($event)\"></p-slider>\r\n                    </div>\r\n                  </div>\r\n-->\r\n                </div>\r\n\r\n                <!-- <div class=\"col-5 text-center\" *ngIf=\"displayGetCoverage\">\r\n                  <div mk-morris-js [options]=\"chartDonutOptions\" [data]=\"chart\" type=\"Donut\"></div>\r\n                  <button pButton type=\"button\" label=\"Get Coverage\" class=\"ui-button ui-button-success\"\r\n                    (click)=\"showResolved(true)\"></button>\r\n                </div> -->\r\n              </div>\r\n\r\n              <div class=\"row  p-y-5 m-y-5\" *ngIf=\"displayTerms\">\r\n                <div class=\"col-12\">\r\n                  <p-table #entityTable [columns]=\"entitycols\" [value]=\"entityList\" [paginator]=\"true\" [rows]=\"10\"\r\n                    [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                    [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"cik\" dataKey=\"cik\"\r\n                    (onRowSelect)=\"onRowClick($event)\" (onRowUnselect)=\"onRowUnClick($event)\" p-dataTable\r\n                    scrollHeight=\"100px\" [scrollable]=\"true\" scrollHeight=\"200px\">\r\n                    <ng-template pTemplate=\"colgroup\" let-columns>\r\n                      <colgroup>\r\n                        <col *ngFor=\"let col of columns\" [style.width]=\"col.width\">\r\n                      </colgroup>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"header\" let-columns>\r\n                      <tr>\r\n                        <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn\r\n                          [pSortableColumn]=\"col.field\">\r\n                          <div pTooltip=\"Click to sort {{col.header}}\">\r\n                            {{col.header}}\r\n                            <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                              ariaLabelDesc=\"Activate to sort in descending order\"\r\n                              ariaLabelAsc=\"Activate to sort in ascending order\">\r\n                            </p-sortIcon>\r\n                          </div>\r\n                        </th>\r\n                      </tr>\r\n                      <tr>\r\n                        <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                          <div *ngIf=\"col.field !== ''\">\r\n                            <input *ngSwitchCase=\"col.field\" pInputText type=\"text\" placeholder=\"Search\"\r\n                              [value]=\"entityTable.filters[col.field] ? entityTable.filters[col.field].value : ''\"\r\n                              (input)=\"entityTable.filter($event.target.value, col.field, 'contains'); onRowUnClick();onFilter($event.target.value, col.field, 'contains')\"\r\n                              style=\"width: 100%;\">\r\n                          </div>\r\n                        </th>\r\n                      </tr>\r\n                    </ng-template>\r\n\r\n                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                      <tr style=\"height:34px\">\r\n                        <td *ngFor=\"let col of columns\">\r\n                          <div\r\n                            *ngIf=\"col.field !== 'viewResultLink' && col.field !== 'researchLink' && col.field !== 'processTermLink'\">\r\n                            {{rowData[col.field]}}\r\n                          </div>\r\n                          <div *ngIf=\"col.field === 'viewResultLink'\">\r\n                          <a style=\"color:blue;\" (click)=\"showTermResults(rowData)\" href=\"javascript:void(0)\" pTooltip=\"Click to view processing result for {{this.termCode}}\">View</a>\r\n                          </div>\r\n                          <div *ngIf=\"col.field === 'researchLink'\">\r\n                            <a style=\"color:blue;\" target=\"_blank\"\r\n                              href=\"https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&type=&dateb=&owner=exclude&count=40&search_text=&CIK={{rowData.cik}}\">Research</a>\r\n                          </div>\r\n                          <div *ngIf=\"col.field === 'fsqvLink'\">\r\n                               <a (click)=\"openFSQVLink(rowData)\"\r\n                                style=\"cursor: pointer; color: blue;\">FSQV</a>\r\n                        </div>\r\n                          <div *ngIf=\"col.field === 'processTermLink'\">\r\n                            <a style=\"color:blue;\" (click)=\"processTermForEntity(rowData)\" href=\"#/home\">Process</a>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"loadingbody\" let-columns=\"columns\">\r\n                      <tr style=\"height:34px\">\r\n                        <td *ngFor=\"let col of columns\" pTooltip=\"{{rowData[col.field]}}\">\r\n                          <div class=\"loading-text\"></div>\r\n                        </td>\r\n                      </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"summary\">\r\n                      Total number of Records: {{entityTable.totalRecords}}\r\n                    </ng-template>\r\n                  </p-table>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </as-split-area>\r\n      </as-split>\r\n    </as-split-area>\r\n  </as-split>\r\n</div>\r\n\r\n<p-dialog header=\"Term Expression Builder\" [(visible)]=\"editExpression\" [modal]=\"true\"\r\n  [style]=\"{width: '95vw', overflow: 'auto'}\" [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\"\r\n  [draggable]=\"true\" [resizable]=\"true\" [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n  <div *ngIf=\"showValidation\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{validationMessage}}</strong>\r\n  </div>\r\n  <div class=\"row\" p-y-5>\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Name:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termName\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-6 input-wrapper\">\r\n      <label>Definition:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"definition\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Code:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termCode\" disabled></textarea>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <p-tabView [activeIndex]=\"index\" (onChange)=\"onTabChange($event)\">\r\n      <p-tabPanel header=\"Concept Match\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-6\">\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Concept Name:</label>\r\n\r\n                <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\" [suggestions]=\"filteredconcMat\"\r\n                  (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" [size]=\"170\" placeholder=\"Concept Match\"\r\n                  [minLength]=\"3\" (ngModelChange)=\"getconceptNameDefinition()\"></p-autoComplete>\r\n                <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                  {{conceptNameDefinition}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row  p-y-5\">\r\n              <div class=\"col-12\">\r\n                <div>\r\n                  <p-checkbox label=\"Use Positive Facts Only\" [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n                  &nbsp;&nbsp;\r\n                </div>\r\n                <div>\r\n                  <p-checkbox label=\"Use Negative Facts Only\" [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                  &nbsp;&nbsp;\r\n                </div>\r\n                <div>\r\n                  <p-checkbox label=\"Reverse Negative Facts\" [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Axis:</label>\r\n\r\n                <input type=\"text\" pInputText [(ngModel)]=\"axis\" placeholder=\"specify axis name\">\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Members Exclusion (Virtual Parent):</label>\r\n\r\n                <textarea pInputTextarea [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                  placeholder=\"Enter Exclusion Members\"></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Concept Match w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-12\">\r\n            <div class=\"row\" p-y-5>\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Concept Name:</label>\r\n\r\n                <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\" [suggestions]=\"filteredconcMat\"\r\n                  (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" placeholder=\"Concept Match\" [minLength]=\"3\"\r\n                  (ngModelChange)=\"getconceptNameDefinition()\">\r\n                </p-autoComplete>\r\n                <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                  {{conceptNameDefinition}}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n\r\n                <p-checkbox name=\"useMaxAxisCount\" value=\"useMaxAxisCount\" label=\"Max # Axes/Members:\"\r\n                  [(ngModel)]=\"useMaxAxisCount\" inputId=\"useMaxAxisCount\"></p-checkbox>&nbsp;\r\n                <input type=\"number\" min=\"0\" id=\"maxAxisCount\" name=\"maxAxisCount\" [(ngModel)]=\"maxAxisCount\">\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row p-y-5\" *ngFor=\"let expressionSet of expressionSets; let i = index\" [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-lg-12\">\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>Axes:\r\n                      <p-radioButton name=\"axisOption{{i}}\" value=\"ExactMatch\" [(ngModel)]=\"expressionSet.axisType\"\r\n                        id=\"axisFullNameOption\"\r\n                        (onClick)=\"OnExpressionAxisTypeChanged(i); expressionSet.disableAxes=false;expressionSet.disableAxesInc=true\">\r\n                      </p-radioButton>\r\n                    </label>\r\n                    <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"expressionSet.axisName\"\r\n                      placeholder=\"specify axis name\" [disabled]=\"expressionSet.disableAxes\">\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      <p-radioButton name=\"axisOption{{i}}\" id=\"axisPartialNameOption\" value=\"InclusionExclusionList\"\r\n                        [(ngModel)]=\"expressionSet.axisType\"\r\n                        (onClick)=\"OnExpressionAxisTypeChanged(i);expressionSet.disableAxesInc=false;expressionSet.disableAxes=true\">\r\n                      </p-radioButton>\r\n                      Inclusions(axis name must\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea id=\"axisInclusionList\" name=\"axisInclusionList\"\r\n                      [disabled]=\"expressionSet.disableAxesInc\" placeholder=\"Enter Inclusion Axes\"\r\n                      [(ngModel)]=\"expressionSet.axisInclusionListAsString\" cols=\"50\" placeholder=\"Enter Exclusion Axes\"\r\n                      (onChange)=\"expressionSet.axisInclusionList = buildListFromString(expressionSet.axisInclusionListAsString)\"></textarea>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      Exclusions (axis name must NOT\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea id=\"axisExclusions\" name=\"axisExclusions\"\r\n                      [disabled]=\"expressionSet.disableAxesInc\" [(ngModel)]=\"expressionSet.axisExclusionListAsString\"\r\n                      cols=\"50\" placeholder=\"Enter Exclusion Axes\"\r\n                      (onChange)=\"expressionSet.axisExclusionList = buildListFromString(expressionSet.axisExclusionListAsString)\"></textarea>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-lg-12 p-y-0\">\r\n                    <label>\r\n                      Members:\r\n                    </label>\r\n\r\n                    <label>\r\n                      <p-radioButton name=\"memberOption{{i}}\" id=\"anyMemberOption\" value=\"Any\"\r\n                        [(ngModel)]=\"expressionSet.memberType\" (onClick)=\"OnExpressionMemberTypeChanged(i)\">\r\n                      </p-radioButton>\r\n                      Any Members:\r\n                    </label>\r\n                    <div class=\"p-y-5\">\r\n                      <p-radioButton name=\"memberOption{{i}}\" value=\"ExactMatch\" [(ngModel)]=\"expressionSet.memberType\"\r\n                        (onClick)=\"OnExpressionMemberTypeChanged(i); expressionSet.disableMember=false;expressionSet.disableMemInc=true\">\r\n                      </p-radioButton>\r\n                      <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"expressionSet.memberName\"\r\n                        placeholder=\"specify member name\" [disabled]=\"expressionSet.disableMember\">\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      <p-radioButton name=\"memberOption{{i}}\" value=\"InclusionExclusionList\"\r\n                        [(ngModel)]=\"expressionSet.memberType\" inputId=\"partialMemberOption\"\r\n                        (onClick)=\"OnExpressionMemberTypeChanged(i);expressionSet.disableMember=true; expressionSet.disableMemInc=false\">\r\n                      </p-radioButton>\r\n                      Inclusions(member name must\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea [(ngModel)]=\"expressionSet.memberInclusionListAsString\" cols=\"50\"\r\n                      placeholder=\"Enter Exclusion Members\" [disabled]=\"expressionSet.disableMemInc\"\r\n                      (onChange)=\"expressionSet.memberInclusionList = buildListFromString(expressionSet.memberInclusionListAsString)\"></textarea>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      Exclusions (member name must NOT\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea [(ngModel)]=\"expressionSet.memberExclusionListAsString\" cols=\"50\"\r\n                      placeholder=\"Enter Exclusion Members\" [disabled]=\"expressionSet.disableMemInc\"\r\n                      (onChange)=\"expressionSet.memberExclusionList = buildListFromString(expressionSet.memberExclusionListAsString)\"></textarea>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"removeSet(i)\" label=\"Remove Set\"\r\n                  class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"AddExpressionSet()\" label=\"Add New Set\"\r\n                  class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Extended Check\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-4\">\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name Contains:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameContains\" cols=\"40\" rows=\"5\" placeholder=\"Name Contains\"\r\n                  (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name does not Contain:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameDoesNotContains\" cols=\"40\" rows=\"5\"\r\n                  placeholder=\"Name Does Not Contain\"\r\n                  (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Balance Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"ExtendedGroup\" value=\"debit\" label=\"Debit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"credit\" label=\"Credit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"na\" label=\"NA\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"none\" label=\"Ignore\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Period Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"perTypeGroup\" value=\"instant\" label=\"Instant\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"perTypeGroup\" value=\"duration\" label=\"duration\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n\r\n                </div>\r\n                <div class=\"p-y-5\">\r\n                  &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\" binary=\"true\" label=\"Share Item Type? \">\r\n                  </p-checkbox>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-xs-12 col-lg-8\" style=\"background-color: #ccc;\">\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>\r\n                  Division ->\r\n                  Sector:</label>\r\n                <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\" [(ngModel)]=\"divSector\"\r\n                  [style]=\"{'width':'100%'}\" dropdownIcon=\"pi pi-chevron-down\" (onChange)=\"divSectorChange(divSector)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{divisionCount}}\r\n\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>Industry: </label>\r\n\r\n                <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                  [showClear]=\"true\" (onChange)=\"processIndustryChange(industry)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                  filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>\r\n                &nbsp; {{sectorCount}}\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n\r\n                <label>Filer Category:</label>\r\n                <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                  placeholder=\"Select Filer Category\" [showClear]=\"true\" (onChange)=\"processfilCatChange(filerCategory)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>&nbsp;\r\n                {{categoryCount}}\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <p-table #expressionTable [columns]=\"expressioncols\" [value]=\"expTableList\" [paginator]=\"true\"\r\n                  [rows]=\"10\" [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                  [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" dataKey=\"termId\"\r\n                  (onRowSelect)=\"onRowClick($event)\" (onRowUnselect)=\"onRowUnClick($event)\" p-dataTable\r\n                  scrollHeight=\"100px\" [scrollable]=\"true\" scrollHeight=\"200px\">\r\n\r\n                </p-table>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton (click)=\"resolve()\" label=\"Resolve\"\r\n                  class=\"ui-button m-x-5 ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Include\"\r\n                  class=\"ui-button m-x-5 ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Exclude\"\r\n                  class=\"ui-button m-x-5 ui-button-info\"></button>&nbsp;\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Extended Check w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-4\">\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name Contains:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameContains\" cols=\"40\" rows=\"5\" placeholder=\"Name Contains\"\r\n                  (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name does not Contain:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameDoesNotContains\" cols=\"40\" rows=\"5\"\r\n                  placeholder=\"Name Does Not Contain\"\r\n                  (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Balance Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"ExtendedGroup\" value=\"debit\" label=\"Debit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"credit\" label=\"Credit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"na\" label=\"NA\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"none\" label=\"Ignore\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Period Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"radioGroup1\" value=\"instant\" label=\"Instant\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"radioGroup1\" value=\"duration\" label=\"duration\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n\r\n                </div>\r\n                <div class=\"p-y-5\">\r\n                  &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\" binary=\"true\" label=\"Share Item Type? \">\r\n                  </p-checkbox>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Axes:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"axes\" cols=\"40\" rows=\"5\" placeholder=\"Enter Axes\"\r\n                  (onChange)=\"updateAxes(axes)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Members:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"axesMembers\" cols=\"40\" rows=\"5\" placeholder=\"Enter Members\"\r\n                  (onChange)=\"updateAxesMembers(axesMembers)\"></textarea>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <div class=\"col-xs-12 col-lg-8\" style=\"background-color: #ccc;\">\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>\r\n                  Division ->\r\n                  Sector:</label>\r\n                <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\" [(ngModel)]=\"divSector\"\r\n                  [style]=\"{'width':'100%'}\" dropdownIcon=\"pi pi-chevron-down\" (onChange)=\"divSectorChange(divSector)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{divisionCount}}\r\n\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>Industry: </label>\r\n                <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                  [showClear]=\"true\" (onChange)=\"processIndustryChange(industry)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                  filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>\r\n                &nbsp; {{sectorCount}}\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n\r\n                <label>Filer Category:</label>\r\n                <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                  placeholder=\"Select Filer Category\" [showClear]=\"true\" (onChange)=\"processfilCatChange(filerCategory)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>&nbsp;\r\n                {{categoryCount}}\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <p-table #expressionTable [columns]=\"expressioncols\" [value]=\"expTableList\" [paginator]=\"true\"\r\n                  [rows]=\"10\" [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                  [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" dataKey=\"termId\"\r\n                  (onRowSelect)=\"onRowClick($event)\" (onRowUnselect)=\"onRowUnClick($event)\" p-dataTable\r\n                  scrollHeight=\"100px\" [scrollable]=\"true\" scrollHeight=\"200px\">\r\n\r\n                </p-table>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton (click)=\"resolve()\" label=\"Resolve\"\r\n                  class=\"ui-button ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Include\"\r\n                  class=\"ui-button ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Exclude\"\r\n                  class=\"ui-button ui-button-info\"></button>&nbsp;\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Formula\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\" [style]=\"{height: '500px'}\">\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-12\">\r\n            <div class=\"row\" *ngFor=\"let formulaSet of formulaSets; let i = index\" [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-xs-12 col-lg-3 input-wrapper\">\r\n                <label>\r\n                  Term Name:\r\n                </label>\r\n\r\n                <p-autoComplete [(ngModel)]=\"formulaSet.termName\" name=\"formulaTermName\" [size]=\"50\"\r\n                  [suggestions]=\"formulaFilteredTerms\" (completeMethod)=\"searchTermNames($event)\"\r\n                  placeholder=\"Search Term Name\" [dropdown]=\"true\">\r\n                  <ng-template let-value pTemplate=\"item\">\r\n                    <div class=\"ui-helper-clearfix\">\r\n                      <span [innerHTML]=\"value\"></span>\r\n                    </div>\r\n                  </ng-template>\r\n                </p-autoComplete>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-1\">\r\n                <label style=\"width: 100%; height: 18px;\"></label>\r\n                <p-checkbox [(ngModel)]=\"formulaSet.nullable\" binary=\"true\"></p-checkbox>\r\n                &nbsp;\r\n                <label>\r\n                  Allow Null?\r\n                </label>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-2 input-wrapper\">\r\n\r\n                <label>\r\n                  Operators:\r\n                </label>\r\n                <p-dropdown [options]=\"formulaOperatorsList\" [style]=\"{width: '100%'}\"\r\n                  [(ngModel)]=\"formulaSet.operation\" optionLabel=\"name\" [showClear]=\"true\"></p-dropdown>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-1 text-align\">\r\n                <label style=\"width: 100%;\"></label>\r\n                <button type=\"button\" pButton (click)=\"deleteFormula(i)\" (keydown.enter)=\"deleteFormula(i)\"\r\n                  icon=\"pi pi-trash\" Class=\"ui-button-info\" pTooltip=\"Delete Term Name\"></button>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 text-left\">\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherFormula()\"\r\n                  label=\"Add + Another Term to Formula\" class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Concept Match Multiple\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row p-y-5\">\r\n          <div class=\"col-xs-12 col-lg-6\">\r\n            <div class=\"row\" *ngFor=\"let conceptSet of conceptMatchMultipleList; let i = index\" [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-xs-11 col-lg-8 input-wrapper\">\r\n                <label>\r\n                  Concept Name:\r\n                </label>\r\n\r\n                <p-autoComplete [(ngModel)]=\"conceptMatchMultiple[i]\" [suggestions]=\"filteredconcMat\"\r\n                  (completeMethod)=\"filterConceptMatch($event)\" [size]=\"80\" field=\"id\" placeholder=\"Enter Concept Name\"\r\n                  [minLength]=\"3\">\r\n                </p-autoComplete>\r\n              </div>\r\n              <div class=\"col-xs-1 col-lg-1\">\r\n                <label style=\"height: 18px; width: 100%;\"></label>\r\n                <button type=\"button\" pButton (click)=\"deleteConceptMatchMultipleItem(i)\"\r\n                  (keydown.enter)=\"deleteConceptMatchMultipleItem(i)\" icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                  pTooltip=\"Delete Concept\"></button>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <button type=\"button\" pButton (click)=\"addAnotherConcept()\" label=\"Add + Another Concept\"\r\n                  class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-4\">\r\n\r\n                <p-checkbox label=\"Use Positive Facts Only\" [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4\">\r\n\r\n                <p-checkbox label=\"Use Negative Facts Only\" [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4\">\r\n\r\n                <p-checkbox label=\"Reverse Negative Facts\" [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Axis:\r\n                </label>\r\n                <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"axis\" placeholder=\"specify axis name\">\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Members Exclusion (Virtual Parent):\r\n                </label>\r\n\r\n                <textarea pInputTextarea [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                  placeholder=\"Enter Exclusion Members\"></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"saveExpression()\" label=\"Save Expression\"></button>\r\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"editExpression=false\" label=\"Cancel\"\r\n      class=\"ui-button-secondary\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<p-dialog header=\"Term Validation Builder\" [(visible)]=\"addEditValidation\" [modal]=\"true\" [style]=\"{width: '95vw'}\"\r\n  [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\" [draggable]=\"true\" [resizable]=\"true\"\r\n  [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n  <div *ngIf=\"showValidation\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{validationMessage}}</strong>\r\n  </div>\r\n  <div class=\"row p-y-5\">\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Name:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termName\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-6 input-wrapper\">\r\n      <label>Definition:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"definition\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Code:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termCode\" disabled></textarea>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row p-y-5\">\r\n    <div class=\"col-lg-12\">\r\n      <div class=\"row\" *ngFor=\"let formulaSet of formulaSets; let i = index\" [attr.data-index]=\"i\">\r\n\r\n        <div class=\"col-xs-12 col-lg-3 input-wrapper\">\r\n          <label>\r\n            Term Name:\r\n          </label>\r\n\r\n          <p-autoComplete [(ngModel)]=\"formulaSet.termName\" name=\"formulaTermName\" [size]=\"50\"\r\n            [suggestions]=\"formulaFilteredTerms\" (completeMethod)=\"searchTermNames($event)\"\r\n            placeholder=\"Search Term Name\" [dropdown]=\"true\">\r\n            <ng-template let-value pTemplate=\"item\">\r\n              <div class=\"ui-helper-clearfix\">\r\n                <span [innerHTML]=\"value\"></span>\r\n              </div>\r\n            </ng-template>\r\n          </p-autoComplete>\r\n        </div>\r\n        <div class=\"col-xs-12 col-lg-1\">\r\n          <label style=\"width: 100%; height: 18px;\"></label>\r\n          <p-checkbox [(ngModel)]=\"formulaSet.nullable\" binary=\"true\"></p-checkbox>\r\n          &nbsp;\r\n          <label>\r\n            Allow Null?\r\n          </label>\r\n        </div>\r\n        <div class=\"col-xs-12 col-lg-2 input-wrapper\">\r\n\r\n          <label>\r\n            Operators:\r\n          </label>\r\n          <p-dropdown [options]=\"formulaOperatorsList\" [style]=\"{width: '100%'}\" [(ngModel)]=\"formulaSet.operation\"\r\n            optionLabel=\"name\" [showClear]=\"true\"></p-dropdown>\r\n        </div>\r\n        <div class=\"col-xs-12 col-lg-1 text-align\">\r\n          <label style=\"width: 100%;\"></label>\r\n          <button type=\"button\" pButton (click)=\"deleteFormula(i)\" (keydown.enter)=\"deleteFormula(i)\" icon=\"pi pi-trash\"\r\n            Class=\"ui-button-info\" pTooltip=\"Delete Term Name\"></button>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"row p-y-5\">\r\n        <div class=\"col-lg-12 text-left\">\r\n          <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherFormula()\"\r\n            label=\"Add + Another Term to Formula\" class=\"ui-button ui-button-success\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row p-y-5\">\r\n    <div class=\"col-lg-12\">\r\n      <p-checkbox [(ngModel)]=\"showExpression\" binary=\"true\" (ngModelChange)=\"getValidationExpression()\"></p-checkbox>\r\n      &nbsp;\r\n      <label>\r\n        Show Expression ?\r\n      </label>\r\n    </div>\r\n    <div class=\"col-lg-12\" *ngIf=\"showExpression\">\r\n      <div class=\"row p-y-5\">\r\n        <div class=\"col-lg-12\">\r\n          <label> Rank : {{validationRank}}\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <div class=\"row p-y-5\">\r\n        <div class=\"col-lg-12\">\r\n          <label> Expression : {{validationExpression}}\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addEditValidation=false; saveRuleWithValidation()\"\r\n      label=\"Save Validation\"></button>\r\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"addEditValidation=false\" label=\"Cancel\"\r\n      class=\"ui-button-secondary\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Term Override Expression Builder\" [(visible)]=\"addEditIndustry\" [modal]=\"true\"\r\n  [style]=\"{width: '95vw'}\" [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\"\r\n  [draggable]=\"true\" [resizable]=\"true\" [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n  <div *ngIf=\"showValidation\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{validationMessage}}</strong>\r\n  </div>\r\n  <div class=\"row\" p-y-5>\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Name:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termName\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-6 input-wrapper\">\r\n      <label>Definition:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"definition\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Code:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termCode\" disabled></textarea>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row p-y-5\">\r\n    <div class=\"col-lg-12 input-wrapper\">\r\n      <label>\r\n        Companies/Industries to override:\r\n      </label>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"column\" style=\"width:150px; margin-left: 15px;\">\r\n      <label>\r\n        Override Name:\r\n      </label>\r\n    </div>\r\n    <div class=\" column2\">\r\n      <!-- <p-dropdown [options]=\"indovrDrpList\" [(ngModel)]=\"overrideName\" placeholder=\"Enter Override Name\" optionLabel=\"name\"  [style]=\"{'width':'400px'}\" [showClear]=\"true\"></p-dropdown> -->\r\n      <p-autoComplete [(ngModel)]=\"overrideName\" [suggestions]=\"companyovrRideList\"\r\n        (completeMethod)=\"getOverRides($event)\" (onSelect)=\"getCurrentOverrideDetails()\" field=\"name\"></p-autoComplete>\r\n      <!-- <input id=\"typeahead-http\" type=\"text\" class=\"form-control mx-sm-3\"  [selectItem]=\"getCurrentOverrideDetails()\"\r\n            [class.is-invalid]=\"searchFailed\" [(ngModel)]=\"overrideName\" [ngbTypeahead]=\"termRule.overrides\" placeholder=\"Enter Override Name\" /> -->\r\n    </div>\r\n    <div class=\"column\" style=\"margin-left: 15px;\">\r\n      <p-checkbox [(ngModel)]=\"mergeBaseExpressions\" binary=\"true\" label=\" Merge Base Expressions?\">\r\n      </p-checkbox>\r\n\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div class=\"row\" style=\"height: 5px;\"></div>\r\n  <div *ngFor=\"let overrides of entityOverrides; let i = index\" [attr.data-index]=\"i\">\r\n    <div class=\"row\" style=\"margin-left: 1px;\">\r\n      <div class=\"column\">\r\n        <label>\r\n          Company:\r\n        </label>\r\n      </div>\r\n      <div class=\"column\" style=\"margin-left: 80px\">\r\n        <p-autoComplete [(ngModel)]=\"overrides.entityname\" name=\"overridecompanyName\" [size]=\"50\"\r\n          [suggestions]=\"filteredCompany\" (completeMethod)=\"searchCompany($event)\" placeholder=\"Search Company\"\r\n          [dropdown]=\"true\">\r\n        </p-autoComplete>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"row\" style=\"height: 5px;\"></div>\r\n    <div class=\"row\" style=\"width: 100%\">\r\n      <div class=\"column\" style=\"margin-left: 15px;\">\r\n\r\n        <label>\r\n          Division -> Sector:</label>\r\n\r\n      </div>\r\n      <div class=\"column\" style=\"margin-left: 25px;\">\r\n        <p-autoComplete [(ngModel)]=\"overrides.divisionSector\" name=\"overrideDivSec\" [size]=\"50\"\r\n          [suggestions]=\"filtereddivSector\" (completeMethod)=\"searchDivisionSector($event)\"\r\n          placeholder=\"Search Division Sector\" [dropdown]=\"true\">\r\n        </p-autoComplete> &nbsp;&nbsp;\r\n        <button type=\"button\" pButton (click)=\"removeOverride(i)\" (keydown.enter)=\"removeOverride(i)\" icon=\"pi pi-trash\"\r\n          styleClass=\"ui-button-info\" pTooltip=\"Delete Override\"></button>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\" style=\"height: 5px;\"></div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-12\">\r\n\r\n      <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherIndustryOverride()\"\r\n        label=\"Add + Another Company/Industry\" class=\"ui-button ui-button-success\"></button>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <p-tabView [activeIndex]=\"index\" (onChange)=\"onTabChange($event)\">\r\n      <p-tabPanel header=\"Concept Match\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-6\">\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Concept Name:</label>\r\n\r\n                <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\" [suggestions]=\"filteredconcMat\"\r\n                  (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" [size]=\"auto\" placeholder=\"Concept Match\"\r\n                  [minLength]=\"3\" (ngModelChange)=\"getconceptNameDefinition()\">\r\n                </p-autoComplete>\r\n\r\n                <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                  {{conceptNameDefinition}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row  p-y-5\">\r\n              <div class=\"col-12\">\r\n                <div>\r\n                  <p-checkbox label=\"Use Positive Facts Only\" [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n                  &nbsp;&nbsp;\r\n                </div>\r\n                <div>\r\n                  <p-checkbox label=\"Use Negative Facts Only\" [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                  &nbsp;&nbsp;\r\n                </div>\r\n                <div>\r\n                  <p-checkbox label=\"Reverse Negative Facts\" [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Axis:</label>\r\n\r\n                <input type=\"text\" pInputText [(ngModel)]=\"axis\" placeholder=\"specify axis name\">\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Members Exclusion (Virtual Parent):</label>\r\n\r\n                <textarea pInputTextarea [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                  placeholder=\"Enter Exclusion Members\"></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Concept Match w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-12\">\r\n            <div class=\"row\" p-y-5>\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                <label>Concept Name:</label>\r\n\r\n                <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\" [suggestions]=\"filteredconcMat\"\r\n                  (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" placeholder=\"Concept Match\" [minLength]=\"3\"\r\n                  (ngModelChange)=\"getconceptNameDefinition()\">\r\n                </p-autoComplete>\r\n                <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                  {{conceptNameDefinition}}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n\r\n                <p-checkbox name=\"useMaxAxisCount\" value=\"useMaxAxisCount\" label=\"Max # Axes/Members:\"\r\n                  [(ngModel)]=\"useMaxAxisCount\" inputId=\"useMaxAxisCount\"></p-checkbox>&nbsp;\r\n                <input type=\"number\" min=\"0\" id=\"maxAxisCount\" name=\"maxAxisCount\" [(ngModel)]=\"maxAxisCount\">\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row p-y-5\" *ngFor=\"let expressionSet of expressionSets; let i = index\" [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-lg-12\">\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>Axes:\r\n                      <p-radioButton name=\"axisOption{{i}}\" value=\"ExactMatch\" [(ngModel)]=\"expressionSet.axisType\"\r\n                        id=\"axisFullNameOption\"\r\n                        (onClick)=\"OnExpressionAxisTypeChanged(i); expressionSet.disableAxes=false;expressionSet.disableAxesInc=true\">\r\n                      </p-radioButton>\r\n                    </label>\r\n                    <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"expressionSet.axisName\"\r\n                      placeholder=\"specify axis name\" [disabled]=\"expressionSet.disableAxes\">\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      <p-radioButton name=\"axisOption{{i}}\" id=\"axisPartialNameOption\" value=\"InclusionExclusionList\"\r\n                        [(ngModel)]=\"expressionSet.axisType\"\r\n                        (onClick)=\"OnExpressionAxisTypeChanged(i);expressionSet.disableAxesInc=false;expressionSet.disableAxes=true\">\r\n                      </p-radioButton>\r\n                      Inclusions(axis name must\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea id=\"axisInclusionList\" name=\"axisInclusionList\"\r\n                      [disabled]=\"expressionSet.disableAxesInc\" placeholder=\"Enter Inclusion Axes\"\r\n                      [(ngModel)]=\"expressionSet.axisInclusionListAsString\" cols=\"50\" placeholder=\"Enter Exclusion Axes\"\r\n                      (onChange)=\"expressionSet.axisInclusionList = buildListFromString(expressionSet.axisInclusionListAsString)\"></textarea>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      Exclusions (axis name must NOT\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea id=\"axisExclusions\" name=\"axisExclusions\"\r\n                      [disabled]=\"expressionSet.disableAxesInc\" [(ngModel)]=\"expressionSet.axisExclusionListAsString\"\r\n                      cols=\"50\" placeholder=\"Enter Exclusion Axes\"\r\n                      (onChange)=\"expressionSet.axisExclusionList = buildListFromString(expressionSet.axisExclusionListAsString)\"></textarea>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-lg-12 p-y-0\">\r\n                    <label>\r\n                      Members:\r\n                    </label>\r\n\r\n                    <label>\r\n                      <p-radioButton name=\"memberOption{{i}}\" id=\"anyMemberOption\" value=\"Any\"\r\n                        [(ngModel)]=\"expressionSet.memberType\" (onClick)=\"OnExpressionMemberTypeChanged(i)\">\r\n                      </p-radioButton>\r\n                      Any Members:\r\n                    </label>\r\n                    <div class=\"p-y-5\">\r\n                      <p-radioButton name=\"memberOption{{i}}\" value=\"ExactMatch\" [(ngModel)]=\"expressionSet.memberType\"\r\n                        (onClick)=\"OnExpressionMemberTypeChanged(i); expressionSet.disableMember=false;expressionSet.disableMemInc=true\">\r\n                      </p-radioButton>\r\n                      <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"expressionSet.memberName\"\r\n                        placeholder=\"specify member name\" [disabled]=\"expressionSet.disableMember\">\r\n\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row p-y-5\">\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      <p-radioButton name=\"memberOption{{i}}\" value=\"InclusionExclusionList\"\r\n                        [(ngModel)]=\"expressionSet.memberType\" inputId=\"partialMemberOption\"\r\n                        (onClick)=\"OnExpressionMemberTypeChanged(i);expressionSet.disableMember=true; expressionSet.disableMemInc=false\">\r\n                      </p-radioButton>\r\n                      Inclusions(member name must\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea [(ngModel)]=\"expressionSet.memberInclusionListAsString\" cols=\"50\"\r\n                      placeholder=\"Enter Exclusion Members\" [disabled]=\"expressionSet.disableMemInc\"\r\n                      (onChange)=\"expressionSet.memberInclusionList = buildListFromString(expressionSet.memberInclusionListAsString)\"></textarea>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"col-xs-12 col-lg-6 input-wrapper\">\r\n                    <label>\r\n                      Exclusions (member name must NOT\r\n                      contain the list of words):\r\n                    </label>\r\n                    <textarea pInputTextarea [(ngModel)]=\"expressionSet.memberExclusionListAsString\" cols=\"50\"\r\n                      placeholder=\"Enter Exclusion Members\" [disabled]=\"expressionSet.disableMemInc\"\r\n                      (onChange)=\"expressionSet.memberExclusionList = buildListFromString(expressionSet.memberExclusionListAsString)\"></textarea>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"removeSet(i)\" label=\"Remove Set\"\r\n                  class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"AddExpressionSet()\" label=\"Add New Set\"\r\n                  class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Extended Check\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-4\">\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name Contains:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameContains\" cols=\"40\" rows=\"5\" placeholder=\"Name Contains\"\r\n                  (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name does not Contain:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameDoesNotContains\" cols=\"40\" rows=\"5\"\r\n                  placeholder=\"Name Does Not Contain\"\r\n                  (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Balance Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"ExtendedGroup\" value=\"debit\" label=\"Debit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"credit\" label=\"Credit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"na\" label=\"NA\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"none\" label=\"Ignore\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Period Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"perTypeGroup\" value=\"instant\" label=\"Instant\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"perTypeGroup\" value=\"duration\" label=\"duration\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n\r\n                </div>\r\n                <div class=\"p-y-5\">\r\n                  &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\" binary=\"true\" label=\"Share Item Type? \">\r\n                  </p-checkbox>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-xs-12 col-lg-8\" style=\"background-color: #ccc;\">\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>\r\n                  Division ->\r\n                  Sector:</label>\r\n                <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\" [(ngModel)]=\"divSector\"\r\n                  [style]=\"{'width':'100%'}\" dropdownIcon=\"pi pi-chevron-down\" (onChange)=\"divSectorChange(divSector)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{divisionCount}}\r\n\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>Industry: </label>\r\n\r\n                <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                  [showClear]=\"true\" (onChange)=\"processIndustryChange(industry)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                  filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>\r\n                &nbsp; {{sectorCount}}\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n\r\n                <label>Filer Category:</label>\r\n                <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                  placeholder=\"Select Filer Category\" [showClear]=\"true\" (onChange)=\"processfilCatChange(filerCategory)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>&nbsp;\r\n                {{categoryCount}}\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <p-table #expressionTable [columns]=\"expressioncols\" [value]=\"expTableList\" [paginator]=\"true\"\r\n                  [rows]=\"10\" [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                  [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" dataKey=\"termId\"\r\n                  (onRowSelect)=\"onRowClick($event)\" (onRowUnselect)=\"onRowUnClick($event)\" p-dataTable\r\n                  scrollHeight=\"100px\" [scrollable]=\"true\" scrollHeight=\"200px\">\r\n\r\n                </p-table>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton (click)=\"resolve()\" label=\"Resolve\"\r\n                  class=\"ui-button m-x-5 ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Include\"\r\n                  class=\"ui-button m-x-5 ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Exclude\"\r\n                  class=\"ui-button m-x-5 ui-button-info\"></button>&nbsp;\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Extended Check w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-4\">\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name Contains:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameContains\" cols=\"40\" rows=\"5\" placeholder=\"Name Contains\"\r\n                  (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Element Name does not Contain:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"nameDoesNotContains\" cols=\"40\" rows=\"5\"\r\n                  placeholder=\"Name Does Not Contain\"\r\n                  (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Balance Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"ExtendedGroup\" value=\"debit\" label=\"Debit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"credit\" label=\"Credit\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"na\" label=\"NA\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                  <p-radioButton name=\"ExtendedGroup\" value=\"none\" label=\"Ignore\" [(ngModel)]=\"balType\">\r\n                  </p-radioButton> &nbsp;\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Period Type:\r\n                </label>\r\n                <div>\r\n                  &nbsp; <p-radioButton name=\"radioGroup1\" value=\"instant\" label=\"Instant\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n                  <p-radioButton name=\"radioGroup1\" value=\"duration\" label=\"duration\" [(ngModel)]=\"perType\">\r\n                  </p-radioButton>\r\n                  &nbsp;\r\n\r\n                </div>\r\n                <div class=\"p-y-5\">\r\n                  &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\" binary=\"true\" label=\"Share Item Type? \">\r\n                  </p-checkbox>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Axes:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"axes\" cols=\"40\" rows=\"5\" placeholder=\"Enter Axes\"\r\n                  (onChange)=\"updateAxes(axes)\"></textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Members:\r\n                </label>\r\n                <textarea pInputTextarea [(ngModel)]=\"axesMembers\" cols=\"40\" rows=\"5\" placeholder=\"Enter Members\"\r\n                  (onChange)=\"updateAxesMembers(axesMembers)\"></textarea>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <div class=\"col-xs-12 col-lg-8\" style=\"background-color: #ccc;\">\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>\r\n                  Division ->\r\n                  Sector:</label>\r\n                <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\" [(ngModel)]=\"divSector\"\r\n                  [style]=\"{'width':'100%'}\" dropdownIcon=\"pi pi-chevron-down\" (onChange)=\"divSectorChange(divSector)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{divisionCount}}\r\n\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n                <label>Industry: </label>\r\n                <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                  [showClear]=\"true\" (onChange)=\"processIndustryChange(industry)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                  filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>\r\n                &nbsp; {{sectorCount}}\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n\r\n                <label>Filer Category:</label>\r\n                <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                  placeholder=\"Select Filer Category\" [showClear]=\"true\" (onChange)=\"processfilCatChange(filerCategory)\"\r\n                  [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\" [style]=\"{'width':'100%'}\">\r\n                </p-dropdown>&nbsp;\r\n                {{categoryCount}}\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <p-table #expressionTable [columns]=\"expressioncols\" [value]=\"expTableList\" [paginator]=\"true\"\r\n                  [rows]=\"10\" [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                  [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" dataKey=\"termId\"\r\n                  (onRowSelect)=\"onRowClick($event)\" (onRowUnselect)=\"onRowUnClick($event)\" p-dataTable\r\n                  scrollHeight=\"100px\" [scrollable]=\"true\" scrollHeight=\"200px\">\r\n\r\n                </p-table>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n\r\n              <div class=\"col-lg-12 text-center\">\r\n                <button type=\"button\" pButton (click)=\"resolve()\" label=\"Resolve\"\r\n                  class=\"ui-button ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Include\"\r\n                  class=\"ui-button ui-button-info\"></button>&nbsp;\r\n                <button type=\"button\" pButton (click)=\"editExpression=false\" label=\"Exclude\"\r\n                  class=\"ui-button ui-button-info\"></button>&nbsp;\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Formula\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\" [style]=\"{height: '500px'}\">\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-12\">\r\n            <div class=\"row\" *ngFor=\"let formulaSet of formulaSets; let i = index\" [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-xs-12 col-lg-3 input-wrapper\">\r\n                <label>\r\n                  Term Name:\r\n                </label>\r\n\r\n                <p-autoComplete [(ngModel)]=\"formulaSet.termName\" name=\"formulaTermName\" [size]=\"50\"\r\n                  [suggestions]=\"formulaFilteredTerms\" (completeMethod)=\"searchTermNames($event)\"\r\n                  placeholder=\"Search Term Name\" [dropdown]=\"true\">\r\n                  <ng-template let-value pTemplate=\"item\">\r\n                    <div class=\"ui-helper-clearfix\">\r\n                      <span [innerHTML]=\"value\"></span>\r\n                    </div>\r\n                  </ng-template>\r\n                </p-autoComplete>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-1\">\r\n                <label style=\"width: 100%; height: 18px;\"></label>\r\n                <p-checkbox [(ngModel)]=\"formulaSet.nullable\" binary=\"true\"></p-checkbox>\r\n                &nbsp;\r\n                <label>\r\n                  Allow Null?\r\n                </label>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-2 input-wrapper\">\r\n\r\n                <label>\r\n                  Operators:\r\n                </label>\r\n                <p-dropdown [options]=\"formulaOperatorsList\" [style]=\"{width: '100%'}\"\r\n                  [(ngModel)]=\"formulaSet.operation\" optionLabel=\"name\" [showClear]=\"true\"></p-dropdown>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-1 text-align\">\r\n                <label style=\"width: 100%;\"></label>\r\n                <button type=\"button\" pButton (click)=\"deleteFormula(i)\" (keydown.enter)=\"deleteFormula(i)\"\r\n                  icon=\"pi pi-trash\" Class=\"ui-button-info\" pTooltip=\"Delete Term Name\"></button>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 text-left\">\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherFormula()\"\r\n                  label=\"Add + Another Term to Formula\" class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Concept Match Multiple\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row p-y-5\">\r\n          <div class=\"col-xs-12 col-lg-6\">\r\n            <div class=\"row\" *ngFor=\"let conceptSet of conceptMatchMultipleList; let i = index\" [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-xs-11 col-lg-8 input-wrapper\">\r\n                <label>\r\n                  Concept Name:\r\n                </label>\r\n\r\n                <p-autoComplete [(ngModel)]=\"conceptMatchMultiple[i]\" [suggestions]=\"filteredconcMat\"\r\n                  (completeMethod)=\"filterConceptMatch($event)\" [size]=\"80\" field=\"id\" placeholder=\"Enter Concept Name\"\r\n                  [minLength]=\"3\">\r\n                </p-autoComplete>\r\n              </div>\r\n              <div class=\"col-xs-1 col-lg-1\">\r\n                <label style=\"height: 18px; width: 100%;\"></label>\r\n                <button type=\"button\" pButton (click)=\"deleteConceptMatchMultipleItem(i)\"\r\n                  (keydown.enter)=\"deleteConceptMatchMultipleItem(i)\" icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                  pTooltip=\"Delete Concept\"></button>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <button type=\"button\" pButton (click)=\"addAnotherConcept()\" label=\"Add + Another Concept\"\r\n                  class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-xs-12 col-lg-4\">\r\n\r\n                <p-checkbox label=\"Use Positive Facts Only\" [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4\">\r\n\r\n                <p-checkbox label=\"Use Negative Facts Only\" [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n              </div>\r\n              <div class=\"col-xs-12 col-lg-4\">\r\n\r\n                <p-checkbox label=\"Reverse Negative Facts\" [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Axis:\r\n                </label>\r\n                <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"axis\" placeholder=\"specify axis name\">\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-12 input-wrapper\">\r\n                <label>\r\n                  Members Exclusion (Virtual Parent):\r\n                </label>\r\n\r\n                <textarea pInputTextarea [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                  placeholder=\"Enter Exclusion Members\"></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"saveExpression()\" label=\"Save Expression\"></button>\r\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"addEditIndustry=false; editExpression=false;\"\r\n      label=\"Cancel\" class=\"ui-button-secondary\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Term Derived Zero Expression Builder\" [(visible)]=\"addEditDerived\" [modal]=\"true\"\r\n  [style]=\"{width: '95vw'}\" [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\"\r\n  [draggable]=\"true\" [resizable]=\"true\" [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n  <div *ngIf=\"showValidation\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{validationMessage}}</strong>\r\n  </div>\r\n  <div class=\"row p-y-5\">\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Name:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termName\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-6 input-wrapper\">\r\n      <label>Definition:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"definition\" disabled></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-xs-6 col-lg-3 input-wrapper\">\r\n      <label>Term Code:</label>\r\n      <textarea pInputTextarea [(ngModel)]=\"termCode\" disabled></textarea>\r\n    </div>\r\n  </div>\r\n\r\n  <div>\r\n    <p-tabView [activeIndex]=\"activeExpressionTabIndex\" (onChange)=\"onDerivedTabChange($event)\">\r\n      <p-tabPanel header=\"Text Block Check\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row p-y-5\">\r\n          <div class=\"col-xs-12 col-lg-6\">\r\n            <div class=\"row\" *ngFor=\"let item of derivedZeroExpressionForEdit.textBlockList; let i = index\"\r\n              [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-xs-11 col-lg-8 input-wrapper\">\r\n                <label>\r\n                  Text Block: {{filteredtext[i]}}\r\n                </label>\r\n\r\n                <p-autoComplete [(ngModel)]=\"item.expressionItem\" name=\"textblock\" [size]=\"80\" field=\"id\"\r\n                  [suggestions]=\"filteredconcMat\" (completeMethod)=\"filterConceptMatch($event)\"\r\n                  placeholder=\"Search Term Name\">\r\n                </p-autoComplete>\r\n              </div>\r\n              <div class=\"col-xs-1 col-lg-1\">\r\n                <label style=\"height: 14px; width: 100%;\"></label>\r\n                <button type=\"button\" pButton (click)=\"removeTextBlock(i)\" (keydown.enter)=\"removeTextBlock(i)\"\r\n                  icon=\"pi pi-trash\" styleClass=\"ui-button-info\" pTooltip=\"Delete Term Name\"></button>\r\n\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherTextBlock()\"\r\n                  label=\"Add + Another Text Block\" class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Dependent Terms\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n\r\n        <div class=\"row p-y-5\">\r\n          <div class=\"col-lg-12\">\r\n            <p-checkbox [(ngModel)]=\"derivedZeroExpressionForEdit.allTermsRequired\" binary=\"true\"\r\n              label=\"Dependent on all terms?\">\r\n            </p-checkbox>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row p-y-5\">\r\n          <div class=\"col-xs-12 col-lg-6\">\r\n            <div class=\"row\" *ngFor=\"let item of derivedZeroExpressionForEdit.depTermNameList; let i = index\"\r\n              [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-xs-11 col-lg-8 input-wrapper\">\r\n                <label>\r\n                  Term Name:\r\n                </label>\r\n\r\n                <p-autoComplete [(ngModel)]=\"item.expressionItem\" name=\"formulaTermName\" [size]=\"72\"\r\n                  [suggestions]=\"formulaFilteredTerms\" (completeMethod)=\"searchTermNames($event)\"\r\n                  placeholder=\"Search Term Name\" [dropdown]=\"true\">\r\n                  <ng-template let-value pTemplate=\"item\">\r\n                    <div class=\"ui-helper-clearfix\">\r\n                      <span [innerHTML]=\"value\"></span>\r\n                    </div>\r\n                  </ng-template>\r\n                </p-autoComplete>\r\n              </div>\r\n              <div class=\"col-xs-1 col-lg-1\">\r\n                <label style=\"height: 14px; width: 100%;\"></label>\r\n                <button type=\"button\" pButton (click)=\"removeDerivedTerm(i)\"\r\n                  (keydown.enter)=\"removeDerivedTerm(i, false)\" icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                  pTooltip=\"Delete Term Entry\"></button>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherItem(false)\"\r\n                  label=\"Add + Another Term\" class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Exclusive Terms\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n\r\n        <div class=\"row p-y-5\">\r\n          <div class=\"col-xs-12 col-lg-6\">\r\n            <div class=\"row\" *ngFor=\"let item of derivedZeroExpressionForEdit.excTermNameList; let i = index\"\r\n              [attr.data-index]=\"i\">\r\n\r\n              <div class=\"col-xs-11 col-lg-8 input-wrapper\">\r\n                <label>\r\n                  Term Name:\r\n                </label>\r\n\r\n                <p-autoComplete [(ngModel)]=\"item.expressionItem\" name=\"formulaTermName\" [size]=\"72\"\r\n                  [suggestions]=\"formulaFilteredTerms\" (completeMethod)=\"searchTermNames($event)\"\r\n                  placeholder=\"Search Term Name\" [dropdown]=\"true\">\r\n                  <ng-template let-value pTemplate=\"item\">\r\n                    <div class=\"ui-helper-clearfix\">\r\n                      <span [innerHTML]=\"value\"></span>\r\n                    </div>\r\n                  </ng-template>\r\n                </p-autoComplete>\r\n\r\n              </div>\r\n              <div class=\"col-xs-1 col-lg-1\">\r\n                <label style=\"height: 14px; width: 100%;\"></label><button type=\"button\" pButton\r\n                  (click)=\"removeDerivedTerm(i)\" (keydown.enter)=\"removeDerivedTerm(i, true)\" icon=\"pi pi-trash\"\r\n                  styleClass=\"ui-button-info\" pTooltip=\"Delete Term Entry\"></button>\r\n              </div>\r\n            </div>\r\n            <div class=\"row p-y-5\">\r\n              <div class=\"col-lg-12\">\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherItem(true)\"\r\n                  label=\"Add + Another Term\" class=\"ui-button ui-button-success\"></button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Exclusive Division->Sector\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n            <label>Division -> Sector:</label>\r\n            <p-dropdown [options]=\"filteredDeriveddivSectors\" placeholder=\"Select Division Sector\"\r\n              [(ngModel)]=\"deriveddivSector\" [style]=\"{'width':'100%'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n              (onChange)=\"derivedDivisionSeleted($event)\" [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n            </p-dropdown>\r\n            <span>\r\n              {{divisionCount}}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-12 col-lg-4 input-wrapper\">\r\n            <label>Industry: </label>\r\n            <p-dropdown [options]=\"filteredDerivedindustry\" placeholder=\"Select Industry\" [(ngModel)]=\"derivedindustry\"\r\n              [style]=\"{'width':'100%'}\" dropdownIcon=\"pi pi-chevron-down\" (onChange)=\"industryChanged($event)\"\r\n              filter=\"true\">\r\n            </p-dropdown>\r\n            <span>\r\n              {{sectorCount}}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addEditDerived=false; saveNewDerivedExpression()\"\r\n      label=\"Save Derived Expression\"></button>\r\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"addEditDerived=false; \" label=\"Cancel\"\r\n      class=\"ui-button-secondary\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Expression For {{termId}}\" [(visible)]=\"displayTermTreeModal\" [modal]=\"true\"\r\n  [style]=\"{width: '95vw', overflow: 'auto'}\" [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\"\r\n  [draggable]=\"true\" [resizable]=\"true\" [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n  <div class=\"row\" p-y-5>\r\n    <div class=\"col-xs-12 col-lg-7\" id=\"termRulesTreeTable\">\r\n      <p-treeTable [value]=\"treeData.data\" [columns]=\"treeCol\">\r\n        <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n          <tr>\r\n            <td *ngFor=\"let col of columns; let i = index\" ttEditableColumn [ngClass]=\"{'ui-toggler-column': i === 0}\">\r\n              <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableToggler>\r\n              <a href=\"#\"\r\n                [ngClass]=\"{'selected-node': ((selectedTreeNode['childId'] === rowData['childId']) && (selectedTreeNode['parent'] === rowData['parent']) && (selectedTreeNode['id'] === rowData['id']))}\"\r\n                (click)=\"showTermRuleResultnavigateTree($event,rowData)\">\r\n                {{rowData[col.field]}}\r\n              </a>\r\n              <!-- <span *ngIf=\"rowData['hasChildren']\"> {{rowData[col.field]}}</span> -->\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n      </p-treeTable>\r\n    </div>\r\n    <div class=\"col-xs-12 col-lg-5\" *ngIf=\"modalExpTableData && modalExpTableData.name && modalExpTableData.termId\">\r\n      <div style=\" margin-bottom: 5px; font-weight: 700; font-size: 14px; text-align: center;\">Expression table for\r\n        {{modalExpTableData.name}} ({{modalExpTableData.termId}})</div>\r\n\r\n      <p-table #modalExpressionTable [columns]=\"modalExpressioncols\" [value]=\"modalExpTableList\" [paginator]=\"true\"\r\n        [rows]=\"10\" [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n        [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" dataKey=\"termId\" p-dataTable\r\n        [scrollable]=\"true\" scrollHeight=\"400px\">\r\n        <ng-template pTemplate=\"colgroup\" let-columns>\r\n          <colgroup>\r\n            <col *ngFor=\"let col of columns\" [style.width]=\"col.width\">\r\n          </colgroup>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"header\" let-columns>\r\n          <tr>\r\n            <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn [pSortableColumn]=\"col.field\">\r\n              <div>\r\n                {{col.header}}\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </ng-template>\r\n\r\n        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-rowIndex=\"rowIndex\">\r\n          <tr style=\"height:34px\">\r\n            <td *ngFor=\"let col of columns \" class=\"ui-resizable-column\" style=\"word-wrap:break-word\">\r\n              <div *ngIf=\"col.field === 'rank'\">\r\n                {{rowData[col.field]}}\r\n              </div>\r\n              <div *ngIf=\"col.field !== 'rank' && col.field !== 'options' && col.field !== 'expression'\">\r\n                {{rowData[col.field]}}\r\n              </div>\r\n              <div *ngIf=\"col.field === 'expression'\">\r\n                <div *ngIf=\"rowData['type'] !== 'Formula'\">\r\n                  {{rowData[col.field]}}\r\n                </div>\r\n\r\n                <div *ngIf=\"rowData['type'] === 'Formula'\">\r\n                  <p style=\"display:inline\" *ngFor=\"let formula of rowData['formulaList']\">\r\n                    <a href=\"#\" (click)=\"showTermRuleResultnavigate($event,formula.termName)\">{{formula.termName}}\r\n                    </a>\r\n                    {{getFormulaSuffix(formula)}}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"loadingbody\" let-columns=\"columns\">\r\n          <tr style=\"height:34px\">\r\n            <td *ngFor=\"let col of columns\" pTooltip=\"{{rowData[col.field]}}\">\r\n              <div class=\"loading-text\"></div>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"summary\">\r\n          Total number of Records: {{expressionTable.totalRecords}}\r\n        </ng-template>\r\n      </p-table>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <!-- <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"editExpression=false; saveExpression()\"\r\n      label=\"Save Expression\"></button> -->\r\n    <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"displayTermTreeModal=false\" label=\"Cancel\"\r\n      class=\"ui-button-secondary\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<span *ngFor=\"let entity of entityList; let i = index;\">\r\n  <div\r\n    [ngStyle]=\"{'display': showTermResultsWindow[i] ? 'block' : 'none', 'margin-left': showTermResultsWindowMinimize[i] ? '5px' : '0px', 'width': showTermResultsWindowMinimize[i] ? minimizeWidth : 'auto', 'background-color': showTermResultsWindowMinimize[i] ? '#f4f4f4' : ''  }\"\r\n    [ngDraggable]=\"!showTermResultsWindowMinimize[i]\" [ngResizable]=\"!showTermResultsWindowMinimize[i]\" class=\"modal\"\r\n    [ngClass]=\"showTermResultsWindowMinimize[i] ? 'minimize-modal modal' + i : 'modal' + i \">\r\n\r\n    <div *ngIf=\"showTermResultsWindowMinimize[i]\" style=\"padding: 0px 5px;\">\r\n      <span style=\"position: relative; top: 12px;; font-weight: bolder;\">{{state[i].companyName | slice:0:13}}</span>\r\n\r\n      <span class=\"float-right\">\r\n        <span (click)=\"maximizeModal(i)\" class=\"maximize\">+</span>\r\n        <span (click)=\"close(i)\" style=\"position: relative; top: 8px;\" class=\"close\">&times;</span>\r\n      </span>\r\n    </div>\r\n\r\n    <div class=\"modal-content\" *ngIf=\"!showTermResultsWindowMinimize[i]\">\r\n      <div class=\"row modal-header\" [ngStyle]=\"{'margin': showTermResultsWindowMinimize[i] ? '0px' : '0px -15px' }\">\r\n        <div class=\"col-12\" [ngStyle]=\"{'padding': showTermResultsWindowMinimize[i] ? '0px' : '5px' }\">\r\n\r\n          <span class=\"float-right\">\r\n            <span (click)=\"minimizeModal(i)\" class=\"minimize\">-</span>\r\n            <span (click)=\"close(i)\" class=\"close\">&times;</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <app-term-result *ngIf=\"showTermResultsWindow[i]\" [state]=\"state[i]\"></app-term-result>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-12\" style=\"padding: 10px 5px;\">\r\n          <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"showTermResultsWindow[i]=false\" label=\"Cancel\"\r\n            class=\"ui-button-secondary float-right\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <!-- <p-dialog header=\"\" [(visible)]=\"showTermResultsWindow[i]\" [style]=\"{width: '95vw', overflow: 'auto'}\"\r\n    [draggable]=\"true\" [maximizable]=\"true\" [resizable]=\"true\" [contentStyle]=\"{'max-height':'70vh'}\">\r\n    <app-term-result [state]=\"state[i]\"></app-term-result>\r\n\r\n    <p-footer>\r\n\r\n      <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"showTermResultsWindow[i]=false\" label=\"Cancel\"\r\n        class=\"ui-button-secondary\"></button>\r\n    </p-footer>\r\n  </p-dialog> -->\r\n</span>\r\n\r\n<ng-template #termRuleSelectionSection>\r\n  <div>The Term list shows the complete list of term rules.>\r\n    <div>\r\n      <ol>\r\n        <li>\r\n          The display is a hierarchical list, group by financial statements and sorted by term names. The term names are\r\n          aligned to Compustat term codes when applicable.\r\n        </li>\r\n        <li>\r\n          You can \"filter\" by typing in the filter text box. Example, filter by \"intangible\":\r\n        </li>\r\n      </ol>\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #periodTypeSection>\r\n  <div>The dropdown determines what specific period type the selected term represents.</div>\r\n  <div>Options include: Instant, Duration, and NA. </div>\r\n</ng-template>\r\n\r\n<ng-template #typeSection>\r\n  <div>This dropdown determines what type the selected term represents. </div>\r\n  <div>Options include: Decimal, Integer, Monetary, PerShare, Ratio, Shares, and NA.</div>\r\n</ng-template>\r\n\r\n<ng-template #financialStatementSection>\r\n  <div>This dropdown determines what financial statement the selected term represents. </div>\r\n  <div>Options include: Various Balance sheet, Income Statement, and Statement of Cash Flows selections.</div>\r\n</ng-template>\r\n\r\n<ng-template #priorityGroupSection>\r\n  <div>This dropdown determines what priority group the selected term is classified. </div>\r\n  <div>Options include: Priority groups A through J.</div>\r\n</ng-template>\r\n\r\n<ng-template #addTermSection>\r\n  <div>The user click on the “Add Term” to add a new term. </div>\r\n  <div>The detail pane would be blanked out to allow the user to enter a new term. </div>\r\n  <div>The term name and code need to be unique.</div>\r\n</ng-template>\r\n\r\n<ng-template #removeTermSection>\r\n  <div>The user can click on the “Remove Term” to remove the term.</div>\r\n  <div>The user will need to confirm the action.</div>\r\n</ng-template>\r\n\r\n<ng-template #expLabelSection>\r\n  <div>The user can click on the “Add Expression” to add an additional expressions to the term rule. </div>\r\n  <div>Please view the “Expression Parser/Builder” section to review details of how to build expressions for different\r\n    expression types.</div>\r\n</ng-template>\r\n"

/***/ }),

/***/ "./src/app/featurehome/featurehome.component.ts":
/*!******************************************************!*\
  !*** ./src/app/featurehome/featurehome.component.ts ***!
  \******************************************************/
/*! exports provided: FeaturehomeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FeaturehomeComponent", function() { return FeaturehomeComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var app_home_homeService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/home/homeService */ "./src/app/home/homeService.ts");
/* harmony import */ var app_app_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/app.component */ "./src/app/app.component.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var app_domain_home__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/domain/home */ "./src/app/domain/home.ts");
/* harmony import */ var app_utils_utilService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var app_domain_termRule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/domain/termRule */ "./src/app/domain/termRule.ts");
/* harmony import */ var app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! app/domain/mappedEntity */ "./src/app/domain/mappedEntity.ts");
/* harmony import */ var app_domain_editExpression__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! app/domain/editExpression */ "./src/app/domain/editExpression.ts");
/* harmony import */ var _ng_idle_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ng-idle/core */ "./node_modules/@ng-idle/core/fesm5/ng-idle-core.js");
/* harmony import */ var _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ng-idle/keepalive */ "./node_modules/@ng-idle/keepalive/fesm5/ng-idle-keepalive.js");
/* harmony import */ var app_services_login_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! app/services/login.service */ "./src/app/services/login.service.ts");
/* harmony import */ var ngx_joyride__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ngx-joyride */ "./node_modules/ngx-joyride/fesm5/ngx-joyride.js");
















var FeaturehomeComponent = /** @class */ (function () {
    function FeaturehomeComponent(homeService, app, router, home, utilService, mappedEntity, rule, el, confirmationService, editForExpression, idle, keepalive, login, joyrideService, route) {
        this.homeService = homeService;
        this.app = app;
        this.router = router;
        this.home = home;
        this.utilService = utilService;
        this.mappedEntity = mappedEntity;
        this.rule = rule;
        this.el = el;
        this.confirmationService = confirmationService;
        this.editForExpression = editForExpression;
        this.idle = idle;
        this.keepalive = keepalive;
        this.login = login;
        this.joyrideService = joyrideService;
        this.route = route;
        this.subscription = [];
        this.termRuleByStatList = [];
        this.trmRulFinStatmntList = [];
        this.trmRulPriorGrpList = [];
        this.periodTypeList = [{ name: "instant" }, { name: "duration" }, { name: "na" }];
        this.typeList = [{ name: "decimal" }, { name: "integer" }, { name: "monetary" }, { name: "perShare" }, { name: "ratio" }, { name: "shares" }, { name: "na" }];
        this.expressionTypes = ["ConceptMatch", "ConceptMatchWithDim", "ExtendedCheck", "ExtendedCheckWithDim", "Formula", "ConceptMatchMultiple"];
        this.rulePeriodTypes = ["instant", "duration", "na"];
        this.testFiscalYears = ["2015", "2016", "2017", "2018", "2019"];
        this.balanceTypes = ["debit", "credit", "na", "none"];
        this.ruleTypes = ["decimal", "integer", "monetary", "perShare", "ratio", "shares", "na"];
        this.derivedZeroTypes = ["NoteBlockExistsCheck", "DependentTermCheck", "ExclusiveTermCheck", "IndustryExclusionCheck"];
        this.formulaOperatorsList = [{ name: "" }, { name: "+" }, { name: "-" }, { name: "*" }, { name: "/" }];
        this.populateList = [];
        this.uncategorizedPopulateList = [];
        this.msgs = [];
        this.termTree = [];
        this.expTableList = [];
        this.expressionList = [];
        this.validationList = [];
        this.indOvrrideList = [];
        this.dervdZroExpList = [];
        this.completeEntities = [];
        this.filerCategory = null;
        this.quaterly = true;
        this.errorMsg = '';
        this.chartUrl = '/api/TermRulesStatisticsForCriteria';
        this.isAdminUser = true;
        this.index = 0;
        this.conceptNameDefinition = "";
        this.fsqvLink = "";
        this.exprStr = "isExtended";
        this.containsWords = [];
        this.doesNotContainsWords = [];
        this.nameDoesNotContains = [];
        this.nameContains = [];
        this.extendedEntitiesLookup = [];
        this.termRuleLists = [];
        this.derivedZeroExpressionForEdit = {};
        this.activeExpressionTabIndex = 0;
        this.excludeEntitiesFilter = {};
        this.filteredDeriveddivSectors = [];
        this.deriveddivSector = '';
        this.derivedindustry = '';
        this.filteredDerivedindustry = [];
        this.derivedRank = true;
        // this are for enabling and disabling purpos
        this.displayTerms = false;
        this.processnow = false;
        this.displayGetCoverage = false;
        this.filteredtext = [];
        this.startYear = (new Date()).getFullYear() - 4;
        this.endYear = (new Date()).getFullYear();
        this.minRange = (new Date()).getFullYear() - 4;
        this.maxRange = (new Date()).getFullYear();
        this.range = [(new Date()).getFullYear() - 4, (new Date()).getFullYear()];
        this.minYear = (new Date()).getFullYear() - 4;
        this.maxYear = (new Date()).getFullYear();
        this.timedOut = false;
        this.lastPing = null;
        this.displayTermTreeModal = false;
        this.modalExpTableList = [];
        this.minimizeArray = [];
        this.treeData = {};
        this.treeCol = [
            { field: 'name', header: 'Name' }
        ];
        this.showTermResultsWindow = [];
        this.showTermResultsWindowMinimize = [];
        this.state = [];
        this.title = 'Maxds';
        this.percent = 0;
        this.totalEntityCount = 0;
        this.areas = [
            { size: 20, order: 1, name: 'Term Tree' },
            { size: 80, order: 2, name: 'Content' }
        ];
        this.getFormulaExpression = function (expr) {
            var exprStr = "";
            for (var i = 0; i < expr.formulaList.length; i++) {
                var formula = expr.formulaList[i];
                if (!formula) {
                    continue;
                }
                var term = "sec:" + formula.termName;
                if (!term) {
                    continue;
                }
                if (formula.nullable) {
                    term = term + "=0";
                }
                exprStr = exprStr + this.surroundTextWith(term, "{", "}", true);
                if (expr.formulaList[i + 1] != undefined && formula.operation) {
                    var operation = formula.operation.name ? formula.operation.name : formula.operation;
                    exprStr = exprStr + " " + operation;
                }
            }
            return exprStr;
        };
        this.getExtendedCheckExpression = function (expression) {
            //console.log("name contains expression:  " + JSON.stringify(expression));
            var exprStr = "isExtended";
            var nameContainsExpr = this.arrayToExpression(expression.containsWords, " && ", 'nameContains(', ')');
            if (nameContainsExpr && nameContainsExpr.indexOf('nameContains') >= 0) {
                exprStr = exprStr + " && " + nameContainsExpr;
            }
            //console.log("name contains expression:  " + exprStr);
            var notContainsExpr = this.arrayToExpression(expression.doesNotContainsWords, " && ", 'nameNotContains(', ')');
            if (notContainsExpr && notContainsExpr.indexOf('nameNotContains') >= 0) {
                exprStr = exprStr + " && " + notContainsExpr;
            }
            //console.log("name not contains expression:  " + exprStr);
            if (expression.balType === this.balanceTypes[0]) {
                exprStr = exprStr + " && isDebit";
            }
            if (expression.balType === this.balanceTypes[1]) {
                exprStr = exprStr + " && isCredit";
            }
            if (expression.balType === this.balanceTypes[2]) {
                exprStr = exprStr + " && isNA";
            }
            if (expression.perType === this.rulePeriodTypes[0]) {
                exprStr = exprStr + " && isInstant";
            }
            if (expression.perType === this.rulePeriodTypes[1]) {
                exprStr = exprStr + " && isDuration";
            }
            if (expression.isShareItemType) {
                exprStr = exprStr + " && isShareItemType";
            }
            return exprStr;
        };
        this.getDimensionExpression = function (expression) {
            var dim = {};
            dim.memberExpression = this.arrayToExpression(expression.NamedMemberList, " || ", "{", "}");
            dim.axisExpression = this.arrayToExpression(expression.NamedAxisList, " || ", "{", "}");
            return dim;
        };
        this.checkFormulas = function () {
            console.log("checking formulas add allowed");
            var allowAdd = true;
            for (var x = 0; x < this.formulaSets.length; x++) {
                var formula = this.formulaSets[x];
                if (!formula.termName) {
                    console.log("failed validation: " + JSON.stringify(formula));
                    allowAdd = false;
                    break;
                }
                else {
                    if (x !== (this.formulaSets.length - 1) && !formula.operation) {
                        console.log("failed validation: " + JSON.stringify(formula));
                        allowAdd = false;
                        break;
                    }
                }
                //|| !formula.operation
            }
            console.log("checking formulas add allowed: " + allowAdd);
            return allowAdd;
        };
        this.removeOverride = function (index) {
            this.entityOverrides.splice(index, 1);
        };
        this.editDerivedZeroExpression = function (index) {
            this.activeExpressionTabIndex = 3;
            this.derivedZeroExpressionForEdit = this.termRule.derivedZeroExpressions[index];
        };
        this.selectedTreeNode = {};
        this.app.showmenu = true;
        this.chart = {};
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_4__["NavigationEnd"]) {
            }
        });
    }
    FeaturehomeComponent.prototype.onGutterClick = function (e) {
        if (!e || e.gutterNum !== 1)
            return;
        if (e.sizes[0] > 0) {
            this.areas = [
                { size: 0, order: 1, name: 'Term Tree' },
                { size: 100, order: 2, name: 'Content' }
            ];
        }
        else {
            this.areas = [
                { size: 20, order: 1, name: 'Term Tree' },
                { size: 80, order: 2, name: 'Content' }
            ];
        }
    };
    FeaturehomeComponent.prototype.onDragEnd = function (e) {
        this.areas[0].size = e.sizes[0];
        this.areas[1].size = e.sizes[1];
    };
    FeaturehomeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.termRule = new app_domain_termRule__WEBPACK_IMPORTED_MODULE_8__["TermRule"];
        //this.expressionForEdit = null;
        this.expressionName = 'Expression';
        this.display = true;
        this.errorMsg = '';
        this.progressSpinner = false;
        this.refresh();
        console.log('homeComponent : calling ngOnInit...');
        //from resolver
        this.completeCompanyList = this.route.snapshot.data['completeCompanyList'];
        this.trmRulFinStatmntList = this.route.snapshot.data['termRuleCategoryList'];
        this.termRulesList = this.route.snapshot.data['termRuleList'];
        //init ...
        this.expressioncols = this.home.homeCols();
        this.modalExpressioncols = this.home.modalExpressioncols();
        this.getRuleList();
        this.getTermRuleOptions();
        this.getUserRole();
        this.utilService.getCompanyList().subscribe(function (response) { _this.companyList = response; });
        this.utilService.getDivSectorList().subscribe(function (response) {
            _this.divSectorList = response;
            _this.filtereddivSector = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filtereddivSector.push(name);
            });
        });
        this.utilService.getIndustryList().subscribe(function (response) { _this.industryList = response; });
        this.utilService.getFilerCategoryList().subscribe(function (response) {
            _this.filerCategoryList = response;
            _this.filteredfilerCategory = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filteredfilerCategory.push(name);
            });
        });
        //this.completeCompanyList = this.route.snapshot.data['completeCompanyList'];
        this.addTerm();
    };
    FeaturehomeComponent.prototype.ngAfterContentInit = function () {
        this.loadFromStorage();
    };
    FeaturehomeComponent.prototype.loadFromStorage = function () {
        var termTreeId = sessionStorage.getItem('home.termTreeId');
        if (termTreeId !== null) {
            this.processnow = false;
            this.indovrDrpList = [];
            this.selIndOvrdExpr = null;
            this.indOvrdExprDrop = false;
            this.enableAddTermButton = false;
            console.log('selected: ' + termTreeId);
            this.termId = termTreeId;
            this.displayTerms = true;
            this.displayGetCoverage = false;
            this.enableTermButton = false;
            this.entitycols = this.home.homeEntityCols();
            this.expressionName = 'Expression';
            if (sessionStorage.getItem('home.companyName') !== null) {
                this.companyName = sessionStorage.getItem('home.companyName');
            }
            if (sessionStorage.getItem('home.division') !== null) {
                this.division = sessionStorage.getItem('home.division');
            }
            if (sessionStorage.getItem('home.sector') !== null) {
                this.sector = sessionStorage.getItem('home.sector');
            }
            if (sessionStorage.getItem('home.divSector') !== null) {
                this.divSector = sessionStorage.getItem('home.divSector');
            }
            if (sessionStorage.getItem('home.filteredindustry') !== null) {
                this.filteredindustry = JSON.parse(sessionStorage.getItem('home.filteredindustry'));
            }
            if (sessionStorage.getItem('home.industry') !== null) {
                this.industry = sessionStorage.getItem('home.industry');
            }
            if (sessionStorage.getItem('home.filerCategory') !== null) {
                this.filerCategory = sessionStorage.getItem('home.filerCategory');
            }
            if (sessionStorage.getItem('home.divisionCount') !== null) {
                this.divisionCount = JSON.parse(sessionStorage.getItem('home.divisionCount'));
            }
            if (sessionStorage.getItem('home.industryCount') !== null) {
                this.industryCount = JSON.parse(sessionStorage.getItem('home.industryCount'));
            }
            if (sessionStorage.getItem('home.categoryCount') !== null) {
                this.categoryCount = JSON.parse(sessionStorage.getItem('home.categoryCount'));
            }
            if (sessionStorage.getItem('home.quaterly') !== null) {
                this.quaterly = JSON.parse(sessionStorage.getItem('home.quaterly'));
            }
            if (sessionStorage.getItem('home.termName') !== null) {
                this.termName = sessionStorage.getItem('home.termName');
            }
            if (sessionStorage.getItem('home.definition') !== null) {
                this.definition = sessionStorage.getItem('home.definition');
            }
            if (sessionStorage.getItem('home.termCode') !== null) {
                this.termCode = sessionStorage.getItem('home.termCode');
            }
            if (sessionStorage.getItem('home.incAccuTest') !== null) {
                this.incAccuTest = JSON.parse(sessionStorage.getItem('home.incAccuTest'));
            }
            if (sessionStorage.getItem('home.periodType') !== null) {
                this.periodType = JSON.parse(sessionStorage.getItem('home.periodType'));
            }
            if (sessionStorage.getItem('home.type') !== null) {
                this.type = JSON.parse(sessionStorage.getItem('home.type'));
            }
            if (sessionStorage.getItem('home.finStatement') !== null) {
                this.finStatement = JSON.parse(sessionStorage.getItem('home.finStatement'));
            }
            if (sessionStorage.getItem('home.priorgroup') !== null) {
                this.priorgroup = JSON.parse(sessionStorage.getItem('home.priorgroup'));
            }
            if (sessionStorage.getItem('home.processingOrder') !== null) {
                this.processingOrder = sessionStorage.getItem('home.processingOrder');
            }
            if (sessionStorage.getItem('home.range') !== null) {
                this.range = JSON.parse(sessionStorage.getItem('home.range'));
            }
            if (sessionStorage.getItem('home.expTableList') !== null) {
                this.expTableList = JSON.parse(sessionStorage.getItem('home.expTableList'));
            }
            if (sessionStorage.getItem('home.expLabel') !== null) {
                this.expLabel = sessionStorage.getItem('home.expLabel');
            }
            if (sessionStorage.getItem('home.expressionList') !== null) {
                this.expressionList = JSON.parse(sessionStorage.getItem('home.expressionList'));
            }
            if (sessionStorage.getItem('home.validationList') !== null) {
                this.validationList = JSON.parse(sessionStorage.getItem('home.validationList'));
            }
            if (sessionStorage.getItem('home.indOvrrideList') !== null) {
                this.indOvrrideList = JSON.parse(sessionStorage.getItem('home.indOvrrideList'));
            }
            if (sessionStorage.getItem('home.dervdZroExpList') !== null) {
                this.dervdZroExpList = JSON.parse(sessionStorage.getItem('home.dervdZroExpList'));
            }
            if (sessionStorage.getItem('home.selectedTerm') !== null) {
                this.selectedTerm = JSON.parse(sessionStorage.getItem('home.selectedTerm'));
            }
        }
        else {
            //no term node stored
        }
    };
    // This method gets all pre options on home page
    FeaturehomeComponent.prototype.getTermRuleOptions = function () {
        this.trmRulFinStatmntList;
        this.getPriorityGrpList();
    };
    FeaturehomeComponent.prototype.getUserRole = function () {
        var _this = this;
        this.utilService.getUserRolesList().subscribe(function (response) {
            _this.isAdminUser = response.includes('admin');
        }, function (error) { return console.log(error); });
    };
    // This method populate termTree in home page
    FeaturehomeComponent.prototype.getRuleList = function () {
        var _this = this;
        if (this.trmRulFinStatmntList) {
            this.trmRulFinStatmntList[this.trmRulFinStatmntList.length] = ({ "financialStatement": "Uncategorized" });
        }
        else {
            this.homeService.getTermRuleCategoryList().subscribe(function (response) {
                _this.trmRulFinStatmntList = response;
                _this.trmRulFinStatmntList[_this.trmRulFinStatmntList.length] = ({ "financialStatement": "Uncategorized" });
            }, function (error) { return console.log(error); });
        }
        if (this.termRulesList) {
            this.termRulesList = this.termRulesList.sort(function (a, b) {
                if (a.termId < b.termId) {
                    return -1;
                }
                if (a.termId > b.termId) {
                    return 1;
                }
                return 0;
            });
            var _loop_1 = function () {
                this_1.populateList = [];
                for (var j = 0; j < this_1.termRulesList.length; j++) {
                    if (this_1.trmRulFinStatmntList[i].financialStatement === this_1.termRulesList[j].financialStatement) {
                        this_1.populateList.push(this_1.termRulesList[j]);
                    }
                }
                var home = new app_domain_home__WEBPACK_IMPORTED_MODULE_6__["Home"]();
                home.label = this_1.trmRulFinStatmntList[i].financialStatement;
                this_1.populateList.forEach(function (obj) {
                    home.children.push({ "label": obj.termId + ' - ' + obj.name, "leaf": true, "key": obj.termId });
                    _this.termRuleLists.push(obj.name);
                });
                home.leaf = false;
                this_1.termTree.push(home);
            };
            var this_1 = this;
            for (var i = 0; i < this.trmRulFinStatmntList.length; i++) {
                _loop_1();
            }
        }
        else {
            this.utilService.getTermRuleList().subscribe(function (response) {
                _this.termRulesList = response;
                _this.termRulesList = _this.termRulesList.sort(function (a, b) {
                    if (a.termId < b.termId) {
                        return -1;
                    }
                    if (a.termId > b.termId) {
                        return 1;
                    }
                    return 0;
                });
                var _loop_2 = function () {
                    _this.populateList = [];
                    for (var j = 0; j < _this.termRulesList.length; j++) {
                        if (_this.trmRulFinStatmntList[i].financialStatement === _this.termRulesList[j].financialStatement) {
                            _this.populateList.push(_this.termRulesList[j]);
                        }
                    }
                    var home = new app_domain_home__WEBPACK_IMPORTED_MODULE_6__["Home"]();
                    home.label = _this.trmRulFinStatmntList[i].financialStatement;
                    _this.populateList.forEach(function (obj) {
                        home.children.push({ "label": obj.termId + ' - ' + obj.name, "leaf": true, "key": obj.termId });
                        _this.termRuleLists.push(obj.name);
                    });
                    home.leaf = false;
                    _this.termTree.push(home);
                };
                for (var i = 0; i < _this.trmRulFinStatmntList.length; i++) {
                    _loop_2();
                }
                ;
            });
        }
        /*
            this.utilService.getTermRuleList().subscribe(
              (response) => {
                this.termRulesList = response;
                this.termRulesList = this.termRulesList.sort((a, b) => {
                  if (a.termId < b.termId) { return -1; }
                  if (a.termId > b.termId) { return 1; }
                  return 0;
                });
                for (var i = 0; i < this.trmRulFinStatmntList.length; i++) {
                  this.populateList = [];
                  for (var j = 0; j < this.termRulesList.length; j++) {
                    if (this.trmRulFinStatmntList[i].financialStatement === this.termRulesList[j].financialStatement) {
                      this.populateList.push(this.termRulesList[j]);
                    }
                  }
                  let home = new Home();
                  home.label = this.trmRulFinStatmntList[i].financialStatement;
                  this.populateList.forEach(obj => {
                    home.children.push({ "label": obj.termId + ' - ' + obj.name, "leaf": true, "key": obj.termId });
                    this.termRuleLists.push(obj.name);
                  }
                  )
                  home.leaf = false;
                  this.termTree.push(home);
        
                };
              }
            ) */
    };
    FeaturehomeComponent.prototype.onCompanyNameChange = function ($event) {
        console.log(this.companyName);
        sessionStorage.setItem('home.companyName', $event);
    };
    FeaturehomeComponent.prototype.onTermNameChange = function ($event) {
        sessionStorage.setItem('home.termName', $event);
    };
    FeaturehomeComponent.prototype.onTermDefinitionChange = function ($event) {
        sessionStorage.setItem('home.definition', $event);
    };
    FeaturehomeComponent.prototype.termCodeChange = function ($event) {
        console.log(this.termCode);
        if (this.termCode != "" && this.termCode) {
            this.enableTermButton = false;
            this.enableAddTermButton = true;
        }
        else {
            this.enableTermButton = true;
            this.enableAddTermButton = false;
        }
        sessionStorage.setItem('home.termCode', $event);
    };
    FeaturehomeComponent.prototype.termTreeSelection = function ($event) {
        this.processnow = false;
        this.indovrDrpList = [];
        this.selIndOvrdExpr = null;
        this.indOvrdExprDrop = false;
        this.enableAddTermButton = false;
        if ($event.node.key !== undefined) {
            console.log('selected: ' + $event.node.key);
            this.termId = $event.node.key;
            this.displayTerms = true;
            this.displayGetCoverage = false;
            this.enableTermButton = false;
            this.entitycols = this.home.homeEntityCols();
            this.expressionName = 'Expression';
            this.getTermBasedOnId($event.node.key);
            if (this.entityList) {
                this.showResolved(true);
            }
            else
                this.divisionCount = this.completeCompanyList.length;
            console.log(this.selectedTerm);
            sessionStorage.setItem('home.termTreeId', this.termId);
            sessionStorage.setItem('home.selectedTerm', JSON.stringify(this.selectedTerm));
        }
    };
    FeaturehomeComponent.prototype.getPriorityGrpList = function () {
        var _this = this;
        this.homeService.getTermRulesPriorityGroupList().subscribe(function (response) {
            _this.trmRulPriorGrpList = response;
        });
    };
    FeaturehomeComponent.prototype.onTabChange = function (event) {
        this.index = event.index;
        this.expressionForEdit.type = this.expressionTypes[this.index];
    };
    FeaturehomeComponent.prototype.onExpressionEdit = function (rowdata) {
        //this.reset();
        //this.expressionList = rowdata.expression;
        this.showValidation = false;
        this.validationMessage = '';
        if (this.expressionName === 'Expression') {
            this.expressionsEdit(rowdata);
        }
        if (this.expressionName === 'Validation') {
            this.showExpression = false;
            this.validationEdit(rowdata);
        }
        if (this.expressionName === 'Industry') {
            this.isOverrideExpressionForEdit = true;
            this.entityOverrides = [];
            this.addAnotherIndustryOverride();
            this.industryEdit(rowdata);
            this.expressionSets = [];
            this.formulaSets = [];
            this.AddExpressionSet();
            this.expressionsEdit(rowdata);
            this.editExpression = false;
        }
        if (this.expressionName === 'Derived') {
            this.derivedZeroExpressionForEdit = this.termRule.derivedZeroExpressions[rowdata.rank - 1];
            if (rowdata.type == 'NoteBlockExistsCheck') {
                this.derivedZeroExpressionForEdit.type = 'NoteBlockExistsCheck';
                this.activeExpressionTabIndex = 0;
            }
            if (rowdata.type == 'DependentTermCheck') {
                this.derivedZeroExpressionForEdit.type = 'DependentTermCheck';
                this.activeExpressionTabIndex = 1;
            }
            if (rowdata.type == 'ExclusiveTermCheck') {
                this.derivedZeroExpressionForEdit.type = 'ExclusiveTermCheck';
                this.activeExpressionTabIndex = 2;
            }
            if (rowdata.type == 'IndustryExclusionCheck') {
                this.derivedZeroExpressionForEdit.type = 'IndustryExclusionCheck';
                this.activeExpressionTabIndex = 3;
            }
            this.addEditDerived = true;
            this.prepareDerivedZeroExpressionForEdit();
        }
    };
    FeaturehomeComponent.prototype.industryEdit = function (rowdata) {
        this.showValidation = false;
        this.validationMessage = '';
        this.addEditIndustry = true;
        this.editOverrideExpression(rowdata);
    };
    FeaturehomeComponent.prototype.validationEdit = function (rowdata) {
        this.showValidation = false;
        this.validationMessage = '';
        this.addEditValidation = true;
        this.addvalidation = false;
        this.formulaFilteredTerms = this.termRuleLists;
        this.validationRank = rowdata.rank;
        if (rowdata.expression) {
            this.convertExpressionToFormula(rowdata.expression);
        }
        else {
            this.formulaSets = [];
            this.formulaOperatorsList;
            this.addAnotherFormula();
        }
    };
    FeaturehomeComponent.prototype.getconceptNameDefinition = function () {
        var _this = this;
        if (this.concMatch.id) {
            this.utilService.getTaxonomyElement(this.concMatch.id).subscribe(function (response) {
                _this.conceptNameDefinition = response.elementDefaultLabel + "\n" + response.elementDefinitionUS;
            });
        }
    };
    FeaturehomeComponent.prototype.expressionsEdit = function (rowdata) {
        this.showValidation = false;
        this.validationMessage = '';
        this.index = 0;
        this.conceptNameDefinition = "";
        this.conceptMatchMultipleList = [];
        this.conceptMatchMultiple = [];
        // this.addAnotherConcept();
        this.concMatch = {};
        //this.expressionForEdit =new EditExpression;
        this.expressionForEdit = rowdata;
        if (rowdata.type == 'ConceptMatch') {
            this.index = 0;
        }
        if (rowdata.type == 'ConceptMatchWithDim') {
            this.index = 1;
        }
        if (rowdata.type == 'ExtendedCheck') {
            this.index = 2;
        }
        if (rowdata.type == 'ExtendedCheckWithDim') {
            this.index = 3;
        }
        if (rowdata.type == 'Formula') {
            this.index = 4;
        }
        if (rowdata.type == 'ConceptMatchMultiple') {
            this.index = 5;
        }
        this.conceptMatchExpression(rowdata);
        this.conceptMatchWithDim(rowdata);
        this.editExtendedCheck(rowdata);
        this.editExtendedCheckWithDim(rowdata);
        this.editFormula(rowdata);
        this.editConceptMultiple(rowdata);
        this.editExpression = true;
    };
    FeaturehomeComponent.prototype.reset = function () {
        this.concMatch = {};
        this.usePositiveFacts = false;
        this.useNegativeFacts = false;
        this.revNegativeFacts = false;
        this.axis = null;
        this.virtualFactMemberExclusions = [];
        this.axes = null;
        this.useMaxAxisCount = null;
        this.maxAxisCount = 0;
        this.expressionSets = [];
        this.nameContains = [];
        this.nameDoesNotContains = [];
        this.balType = null;
        this.perType = null;
        this.isShareItemType = false;
        this.divSector = null;
        this.industry = null;
        this.filerCategory = null;
        this.editExpression = false;
        this.axes = null;
        this.axesMembers = null;
        this.formulaSets = [];
        this.conceptMatchMultipleList = [];
        this.overrideName = null;
        this.mergeBaseExpressions = true;
        this.entityOverrides = [];
        this.showValidation = false;
        this.validationMessage = '';
    };
    FeaturehomeComponent.prototype.conceptMatchExpression = function (rowdata) {
        var _this = this;
        if (rowdata.type === 'ConceptMatch') {
            if (rowdata.type === 'ConceptMatch') {
                this.concMatch = rowdata.expression.replace("{", "");
                this.concMatch = { 'id': this.concMatch.replace('}', "") };
                this.utilService.getTaxonomyElement(this.concMatch.id).subscribe(function (response) {
                    _this.conceptNameDefinition = response.elementDefaultLabel + "\n" + response.elementDefinitionUS;
                });
            }
            this.usePositiveFacts = rowdata.usePositiveValuesOnly;
            this.useNegativeFacts = rowdata.useNegativeValuesOnly;
            this.revNegativeFacts = rowdata.reverseNegativeValues;
            this.axis = rowdata.virtualFactAxis;
            this.virtualFactMemberExclusions = rowdata.virtualFactMemberExclusionList;
        }
    };
    FeaturehomeComponent.prototype.conceptMatchWithDim = function (rowdata) {
        var _this = this;
        if (rowdata.type === 'ConceptMatchWithDim') {
            if (rowdata.type === 'ConceptMatchWithDim') {
                this.concMatch = rowdata.expression.replace("{", "");
                this.concMatch = { 'id': this.concMatch.replace('}', "") };
                this.utilService.getTaxonomyElement(this.concMatch.id).subscribe(function (response) {
                    _this.conceptNameDefinition = response.elementDefaultLabel + "\n" + response.elementDefinitionUS;
                });
            }
            this.useMaxAxisCount = rowdata.useMaxAxisCount;
            this.maxAxisCount = rowdata.maxAxisCount;
            if (!rowdata.dimensionExpressionSets && rowdata.dimensionExpressionSets == null) {
                this.expressionSets = [];
                this.AddExpressionSet();
            }
            else {
                //this.expressionSets = rowdata.dimensionExpressionSets;
                this.expressionSets = [];
                rowdata.dimensionExpressionSets.forEach(function (expSet) {
                    expSet.axisInclusionListAsString = _this.arrayToExpression(expSet.axisInclusionList, "\n", false, false);
                    expSet.axisExclusionListAsString = _this.arrayToExpression(expSet.axisExclusionList, "\n", false, false);
                    expSet.memberInclusionListAsString = _this.arrayToExpression(expSet.memberInclusionList, "\n", false, false);
                    expSet.memberExclusionListAsString = _this.arrayToExpression(expSet.memberExclusionList, "\n", false, false);
                    if (expSet.memberInclusionListAsString || expSet.memberExclusionListAsString) {
                        expSet.disableMember = true;
                        expSet.disableMemInc = false;
                    }
                    if (expSet.axisExclusionListAsString || expSet.axisInclusionListAsString) {
                        expSet.disableAxes = true;
                        expSet.disableAxesInc = false;
                    }
                    _this.expressionSets.push(expSet);
                });
            }
        }
    };
    FeaturehomeComponent.prototype.editExtendedCheck = function (rowdata) {
        if (rowdata.type === 'ExtendedCheck') {
            this.nameContains = this.splitTextToArray(rowdata.containsWords, "\n");
            this.nameDoesNotContains = this.splitTextToArray(rowdata.doesNotContainsWords, "\n");
            this.balType = rowdata.balType;
            this.perType = rowdata.perType;
            this.isShareItemType = rowdata.isShareItemType;
        }
    };
    FeaturehomeComponent.prototype.editExtendedCheckWithDim = function (rowdata) {
        if (rowdata.type === 'ExtendedCheckWithDim') {
            this.nameContains = this.splitTextToArray(rowdata.containsWords, "\n");
            this.nameDoesNotContains = this.splitTextToArray(rowdata.doesNotContainsWords, "\n");
            this.balType = rowdata.balType;
            this.perType = rowdata.perType;
            this.isShareItemType = rowdata.isShareItemType;
            this.axes = this.arrayToExpression(rowdata.NamedAxisList, "\n", false, false);
            this.axesMembers = this.arrayToExpression(rowdata.NamedMemberList, "\n", false, false);
        }
    };
    FeaturehomeComponent.prototype.editFormula = function (rowdata) {
        var _this = this;
        this.formulaSets = [];
        this.formulaFilteredTerms = this.termRuleLists;
        if (rowdata.type === 'Formula') {
            if (rowdata.formulaList) {
                rowdata.formulaList.forEach(function (obj) {
                    var formula = { termName: obj.termName, nullable: obj.nullable, operation: { name: obj.operation } };
                    _this.formulaSets.push(formula);
                });
            }
        }
        else {
            this.formulaOperatorsList;
            this.addAnotherFormula();
        }
    };
    FeaturehomeComponent.prototype.editConceptMultiple = function (rowdata) {
        var _this = this;
        if (rowdata.type === 'ConceptMatchMultiple') {
            this.conceptMatchMultiple = [];
            this.conceptMatchMultipleList = [];
            if (!rowdata.conceptMatchMultipleList) {
                this.addAnotherConcept();
            }
            else {
                rowdata.conceptMatchMultipleList.forEach(function (obj) {
                    _this.conceptMatchMultipleList.push(obj);
                    _this.conceptMatchMultiple.push({ id: obj });
                });
            }
        }
    };
    FeaturehomeComponent.prototype.addAnotherFormula = function () {
        var formula = { termName: "", nullable: false, operation: "" };
        this.formulaSets.push(formula);
    };
    FeaturehomeComponent.prototype.AddExpressionSet = function () {
        var termExpressionSet = {};
        termExpressionSet.axisType = "ExactMatch";
        termExpressionSet.memberType = "ExactMatch";
        termExpressionSet.disableAxes = false;
        termExpressionSet.disableMember = false;
        termExpressionSet.disableAxesInc = true;
        termExpressionSet.disableMemInc = true;
        termExpressionSet.axisInclusionListAsString = "";
        termExpressionSet.axisExclusionListAsString = "";
        termExpressionSet.axisInclusionList = [];
        termExpressionSet.axisExclusionList = [];
        termExpressionSet.memberName = "";
        termExpressionSet.axisName = "";
        termExpressionSet.memberInclusionListAsString = "";
        termExpressionSet.memberExclusionListAsString = "";
        termExpressionSet.memberInclusionList = [];
        termExpressionSet.memberExclusionList = [];
        this.expressionSets.push(termExpressionSet);
    };
    FeaturehomeComponent.prototype.removeSet = function (index) {
        this.expressionSets.splice(index, 1);
    };
    ;
    FeaturehomeComponent.prototype.addAnotherConcept = function () {
        if (!this.conceptMatchMultipleList) {
            this.conceptMatchMultipleList = [];
        }
        var conceptExpression = "";
        this.conceptMatchMultipleList.push(conceptExpression);
    };
    ;
    FeaturehomeComponent.prototype.deleteConceptMatchMultipleItem = function (index) {
        this.conceptMatchMultipleList.splice(index, 1);
    };
    ;
    FeaturehomeComponent.prototype.getTermBasedOnId = function (id) {
        var _this = this;
        this.showError = false;
        this.homeService.getTermRule(id).subscribe(function (response) {
            _this.termRule = response;
            _this.definition = response.description;
            _this.termCode = response.termId;
            if (_this.termCode != "") {
                _this.enableTermCode = true;
            }
            else {
                _this.enableTermCode = false;
            }
            _this.termName = response.name;
            _this.periodType = { name: response.periodType };
            _this.type = { name: response.type };
            _this.incAccuTest = response.includeInAccuracyTests;
            _this.finStatement = { financialStatement: response.financialStatement };
            _this.priorgroup = { name: response.priorityGroup };
            _this.processingOrder = response.order;
            _this.expTableList = response.expressions;
            _this.expLabel = 'Add Expression';
            _this.expressionList = [];
            _this.expressionList = response.expressions;
            _this.validationList = [];
            if (response.validationExpressions)
                response.validationExpressions.forEach(function (obj) {
                    obj.type = 'V';
                    _this.validationList.push(obj);
                });
            // this.validationList = response.validationExpressions;
            _this.indOvrrideList = [];
            _this.indOvrrideList = response.overrides;
            _this.dervdZroExpList = [];
            _this.dervdZroExpList = response.derivedZeroExpressions;
            _this.showTermResultsWindow = [];
            _this.showTermResultsWindowMinimize = [];
            sessionStorage.setItem('home.termCode', _this.termCode);
            sessionStorage.setItem('home.termName', _this.termName);
            sessionStorage.setItem('home.definition', _this.definition);
            sessionStorage.setItem('home.periodType', JSON.stringify(_this.periodType));
            sessionStorage.setItem('home.type', JSON.stringify(_this.type));
            sessionStorage.setItem('home.incAccuTest', JSON.stringify(_this.incAccuTest));
            sessionStorage.setItem('home.finStatement', JSON.stringify(_this.finStatement));
            sessionStorage.setItem('home.priorgroup', JSON.stringify(_this.priorgroup));
            sessionStorage.setItem('home.processingOrder', _this.processingOrder);
            sessionStorage.setItem('home.expTableList', JSON.stringify(_this.expTableList));
            sessionStorage.setItem('home.expLabel', _this.expLabel);
            sessionStorage.setItem('home.expressionList', JSON.stringify(_this.expressionList));
            sessionStorage.setItem('home.validationList', JSON.stringify(_this.validationList));
            sessionStorage.setItem('home.indOvrrideList', JSON.stringify(_this.indOvrrideList));
            sessionStorage.setItem('home.dervdZroExpList', JSON.stringify(_this.dervdZroExpList));
        });
        sessionStorage.setItem('home.processingOrder', this.processingOrder);
    };
    FeaturehomeComponent.prototype.onIncAccuTest = function ($event) {
        sessionStorage.setItem('home.incAccuTest', JSON.stringify($event));
    };
    FeaturehomeComponent.prototype.onPeriodTypeChange = function ($event) {
        sessionStorage.setItem('home.periodType', JSON.stringify($event.value));
    };
    FeaturehomeComponent.prototype.onTypeChange = function ($event) {
        sessionStorage.setItem('home.type', JSON.stringify($event.value));
    };
    FeaturehomeComponent.prototype.onFinStatemenChange = function ($event) {
        sessionStorage.setItem('home.finStatement', JSON.stringify($event.value));
    };
    FeaturehomeComponent.prototype.onPriorgroupChange = function ($event) {
        sessionStorage.setItem('home.priorgroup', JSON.stringify($event.value));
    };
    FeaturehomeComponent.prototype.onExpressionButtonClick = function (type) {
        var _this = this;
        this.indovrDrpList = [];
        this.indOvrdExprDrop = false;
        this.selIndOvrdExpr = null;
        this.showValidation = false;
        this.validationMessage = '';
        if (type == 'expressions') {
            this.expTableList = this.expressionList;
            this.expLabel = 'Add Expression';
            this.expressionName = 'Expression';
            return;
        }
        if (type == 'validations') {
            this.expTableList = this.validationList;
            this.expressionName = 'Validation';
            this.expLabel = 'Add Validations';
            return;
        }
        if (type == 'industry') {
            this.expTableList = [];
            if (this.indOvrrideList != null && this.indOvrrideList[0] != null) {
                this.indOvrrideList.forEach(function (obj) {
                    _this.expTableList = _this.indOvrrideList[0].expressions;
                    _this.indovrDrpList.push({ "name": obj.name });
                });
                this.selIndOvrdExpr = this.indovrDrpList[0].name;
                this.indOvrdExprDrop = true;
            }
            this.expressionName = 'Industry';
            this.expLabel = 'Add Industry Override Expressions';
            return;
        }
        if (type == 'derived') {
            this.expTableList = this.dervdZroExpList;
            this.expressionName = 'Derived';
            this.expLabel = 'Add Derived Zero Expressions';
            return;
        }
    };
    FeaturehomeComponent.prototype.industryChange = function () {
        var _this = this;
        this.selIndOvrdExpr;
        this.indOvrrideList.forEach(function (obj) {
            if (_this.selIndOvrdExpr.name == obj.name) {
                _this.expTableList = obj.expressions;
            }
        });
    };
    FeaturehomeComponent.prototype.expressionClick = function () {
        this.reset();
        this.showValidation = false;
        this.validationMessage = '';
        this.validationMessage = '';
        this.showValidation = false;
        if (this.expLabel === 'Add Expression') {
            this.expressionName = 'Expression';
            this.addingExpression();
        }
        if (this.expLabel === 'Add Validations') {
            this.expressionName = 'Validation';
            this.addValidations();
        }
        if (this.expLabel === 'Add Industry Override Expressions') {
            this.expressionName = 'Industry';
            this.entityOverrides = [];
            this.addAnotherIndustryOverride();
            this.addOverrideExpression();
            this.addEditIndustry = true;
            this.editExpression = false;
        }
        if (this.expLabel === 'Add Derived Zero Expressions') {
            this.expressionName = 'Derived';
            this.addDerivedZeroExpression();
        }
    };
    FeaturehomeComponent.prototype.deleteFormula = function (index) {
        this.formulaSets.splice(index, 1);
    };
    FeaturehomeComponent.prototype.goToPeer = function (event) {
        var _this = this;
        this.errorMsg = '';
        this.showError = false;
        this.company = null;
        if (this.companyName != undefined && this.companyName.length > 15) {
            this.company = this.companyName.substr(0, this.companyName.length - 12);
            var peer = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.division = peer[0].division;
            this.sector = peer[0].sector;
            this.divSector = peer[0].division + ' -> ' + peer[0].sector;
            this.divSectorChange(this.divSector);
            this.industry = peer[0].sic + '-' + peer[0].industry;
            this.processIndustryChange(this.industry);
            this.filerCategory = peer[0].filerCategory;
            this.processfilCatChange(this.filerCategory);
            this.filterRadio = 'group';
        }
        else {
            window.scroll(0, 0);
            this.errorMsg = 'Please Select Company';
            this.showError = true;
        }
    };
    FeaturehomeComponent.prototype.searchCompany = function (event) {
        this.filteredCompany = [];
        this.toHighlight = event.query;
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i];
            if ((cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) || (cname != null && cname.toLowerCase().includes(event.query.toLowerCase()))) {
                this.filteredCompany.push(cname);
            }
        }
    };
    FeaturehomeComponent.prototype.searchIndustry = function (event) {
        this.filteredindustry = [];
        for (var i = 0; i < this.industryList.length; i++) {
            var cname = this.industryList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredindustry.push(cname);
            }
        }
    };
    FeaturehomeComponent.prototype.searchDivisionSector = function (event) {
        this.filtereddivSector = [];
        this.toHighlight = event.query;
        for (var i = 0; i < this.divSectorList.length; i++) {
            var cname = this.divSectorList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filtereddivSector.push(cname);
            }
        }
    };
    FeaturehomeComponent.prototype.derivedDivisionSeleted = function (event) {
        this.deriveddivSector;
        console.log(event.value);
        if (event.value) {
            var division = event.value.substr(0, event.value.indexOf('->') - 1);
            var sector = event.value.substr(event.value.indexOf('->') + 3, event.value.length);
            this.setExcDivSec(division, sector);
        }
    };
    FeaturehomeComponent.prototype.industryChanged = function (event) {
        console.log(event.value);
        var sic = event.value.substr(0, 4);
        var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === sic; });
        this.industryCount = completeEntities.length;
        this.categoryCount = completeEntities.length;
    };
    FeaturehomeComponent.prototype.searchFilerCategory = function (event) {
        this.filteredfilerCategory = [];
        for (var i = 0; i < this.filerCategoryList.length; i++) {
            var cname = this.filerCategoryList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredfilerCategory.push(cname);
            }
        }
    };
    FeaturehomeComponent.prototype.quaterlyChange = function ($event) {
        this.quaterly = $event;
        sessionStorage.setItem('home.quaterly', JSON.stringify(this.quaterly));
    };
    FeaturehomeComponent.prototype.searchTermNames = function (event) {
        this.formulaFilteredTerms = [];
        this.toHighlight = event.query;
        for (var i = 0; i < this.termRuleLists.length; i++) {
            var cname = this.termRuleLists[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.formulaFilteredTerms.push(cname);
            }
        }
    };
    FeaturehomeComponent.prototype.resetCoverage = function () {
        this.companyName = undefined;
        this.divSector = undefined;
        this.filterRadio = undefined;
        this.division = undefined;
        this.sector = undefined;
        this.industry = undefined;
        this.resolvedRanks = undefined;
        this.unResolvedRanks = undefined;
        this.divisionCount = this.completeCompanyList.length;
        this.industryCount = null;
        this.categoryCount = null;
        this.startYear = (new Date()).getFullYear() - 4;
        this.endYear = (new Date()).getFullYear();
        this.filerCategory = undefined;
        this.entityList = [];
        this.showTermResultsWindow = [];
        this.showTermResultsWindowMinimize = [];
        this.state = [];
        this.chart = {};
        this.errorMsg = '';
        this.showError = false;
        sessionStorage.removeItem('home.companyName');
        sessionStorage.removeItem('home.divSector');
        sessionStorage.removeItem('home.division');
        sessionStorage.removeItem('home.industry');
        sessionStorage.removeItem('home.sector');
        sessionStorage.removeItem('home.filerCategory');
        sessionStorage.removeItem('home.divisionCount');
        sessionStorage.removeItem('home.industryCount');
        sessionStorage.removeItem('home.categoryCount');
    };
    FeaturehomeComponent.prototype.showResolved = function (isShow) {
        var _this = this;
        this.showTermResultsWindow = [];
        this.showTermResultsWindowMinimize = [];
        this.entityList = [];
        this.entitycols = this.home.homeEntityCols();
        var mp = new app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_9__["MappedEntity"]();
        var url = '/api/UnMappedEntitiesForCriteria';
        if (isShow) {
            url = '/api/MappedEntitiesForCriteria';
        }
        else {
            this.selectResolvedRank = undefined;
        }
        //url = '/api/UnMappedEntitiesForCriteria';
        mp.termRuleId = this.termId;
        mp.minYear = this.startYear;
        mp.maxYear = this.endYear;
        this.showError = false;
        var selectionData = this.companyName;
        if (this.filterRadio !== 'group' && selectionData != undefined && selectionData.length > 15) {
            selectionData = selectionData.substring((selectionData.indexOf("(") + 1), selectionData.indexOf(")"));
            var entities = this.completeCompanyList.filter(function (obj) { return obj.entityId === selectionData; });
            var company = entities.length == 1 ? entities[0] : null;
            if (!company) {
                this.errorMsg = 'Please select a company, division->Sector or Filer Category before getting coverage statistics.';
                this.showError = true;
                window.scroll(0, 0);
                return;
            }
            else {
                mp.entityId = company.entityId;
            }
        }
        if (this.filterRadio === 'group' && (this.divSector === undefined)) {
            this.errorMsg = 'Please select a company, division->Sector or Filer Category before getting coverage statistics.';
            this.showError = true;
            window.scroll(0, 0);
            return;
        }
        this.displayGetCoverage = true;
        if ((this.companyName == undefined || this.companyName == null) && this.divSector != undefined) {
            this.filterRadio = 'group';
        }
        if (this.filterRadio === 'group' && this.division != undefined && this.sector != undefined) {
            mp.division = this.division;
            mp.sector = this.sector;
        }
        if (this.filterRadio === 'group' && this.divSector != '' && this.divSector != undefined) {
            mp.division = this.divSector.substr(0, this.divSector.indexOf('->') - 1);
            mp.sector = this.divSector.substr(this.divSector.indexOf('->') + 3, this.divSector.length);
            mp.entityId = 'NULL';
            mp.filerCategory = this.filerCategory;
            mp.rankId = 0;
        }
        else {
            mp.division = "settoinvalid";
            mp.sector = "settoinvalid";
        }
        if (this.industry != undefined) {
            mp.sic = this.industry.substr(0, 4);
            mp.includeQuarterly = true;
        }
        else {
            mp.sic = 'NULL';
            mp.filerCategory = 'NULL';
            mp.includeQuarterly = this.quaterly;
        }
        if (this.selectResolvedRank) {
            mp.rankId = Number(this.selectResolvedRank);
        }
        mp.includeQuarterly = this.quaterly;
        this.homeService.getTermResults(this.termId, selectionData).subscribe(function (data) {
            data.forEach(function (obj) {
                if (obj.FQ == 'FY') {
                    _this.percent += 25;
                }
            });
            if (_this.percent > 100) {
                _this.percent = 100;
            }
            var percent = _this.percent;
        });
        this.homeService.getMappedEntityList(mp, this.chartUrl).subscribe(function (response) {
            _this.chartData = [];
            _this.resolvedRanks = [{ label: 'Show Resolved By Rank', value: null }];
            _this.unResolvedRanks = [{ label: 'Show UnResolved', value: null }];
            // let ranks = {};
            var unresolved = { label: 'Unresolved', value: response.unMappedEntityCount };
            _this.chartData.push(unresolved);
            response.resultsByRank.forEach(function (obj) {
                // var name = { label: obj, value: obj };
                // ranks = { label: 'Rank ' + obj.rankId + ' (' + obj.nonDistinctMappedEntityCount + ')', value: obj.mappedEntityCount };
                // const name = { label: obj, value: obj };
                var ranks = { label: 'Rank ' + obj.rankId, value: obj.mappedEntityCount };
                var chart = { label: 'Rank ' + obj.rankId + ' (' + obj.mappedEntityCount + ') ' + (obj.mappedEntityCount / response.totalEntityCount * 100).toFixed(2) + '%', value: obj.rankId };
                _this.resolvedRanks.push(chart);
                if (ranks.value != 0) {
                    _this.chartData.push(ranks);
                }
            });
            var percent = _this.percent;
            _this.totalEntityCount = response.totalEntityCount;
            _this.getChartData(_this.chartData);
        });
        this.homeService.getMappedEntityList(mp, url).subscribe(function (response) {
            _this.entityList = response;
            if (_this.entityList.length > 0) {
                _this.entityList.forEach(function () {
                    _this.showTermResultsWindow.push(false);
                    _this.showTermResultsWindowMinimize.push(false);
                    _this.state.push({});
                    _this.minimizeArray.push(null);
                });
            }
            else {
                _this.showTermResultsWindow = [];
                _this.showTermResultsWindowMinimize = [];
                _this.state = [];
            }
            if (!isShow) {
                _this.resolvedRanks = _this.unResolvedRanks;
                _this.entitycols.splice(2, 1);
            }
            _this.entityList.forEach(function (obj) {
                obj.show = true;
            });
            // }
        });
    };
    FeaturehomeComponent.prototype.showNotResolved = function () {
        this.displayGetCoverage = true;
    };
    FeaturehomeComponent.prototype.getChartData = function (data) {
        this.chart = data;
    };
    FeaturehomeComponent.prototype.getFormulaSuffix = function (formula) {
        if (formula.nullable && formula.nullable === true) {
            return "=0 " + formula.operation;
        }
        return formula.operation;
    };
    FeaturehomeComponent.prototype.showTermResultnavigate = function (event, data) {
        console.log(data);
        if (data !== undefined) {
            console.log('selected: ' + data);
            event.preventDefault();
            var term = this.getTermIdFromTermName(data);
            this.termId = term;
            this.displayTerms = true;
            this.displayGetCoverage = false;
            this.entitycols = this.home.homeEntityCols();
            this.getTermBasedOnId(term);
            console.log(term);
        }
    };
    FeaturehomeComponent.prototype.showTermResults = function (data) {
        var index = this.entityList.findIndex(function (item) { return (item.entityId === data.entityId) && (item.companyName === data.companyName); });
        this.state[index] = {
            termName: this.termCode,
            entityId: data.entityId,
            companyName: data.companyName
        };
        this.showTermResultsWindow[index] = true;
        this.showTermResultsWindowMinimize[index] = false;
    };
    FeaturehomeComponent.prototype.openFSQVLink = function (data) {
        var linkUrl = "https://sp-us-deraodp01.ix.sec.gov:18443/fsqv-solr/filingSearchSolr?refresh=1&cik=";
        var cik = data.cik;
        this.utilService.getProfileId().subscribe(function (response) {
            if (response) {
                var profileId = response.text();
                if (profileId === 'ci') {
                    linkUrl = "https://sp-us-deraodp01.ix.sec.gov:18443/fsqv-solr/filingSearchSolr?refresh=1&cik=" + cik;
                }
                else if (profileId === 'prod') {
                    linkUrl = "https://md-up-webidap.ix.sec.gov:18443/fsqv-solr/filingSearchSolr?refresh=1&cik=" + cik;
                }
                window.open(linkUrl, "_blank");
            }
        });
    };
    FeaturehomeComponent.prototype.getTermIdOrEntityName = function (inputValue) {
        var outputValue = inputValue.substring((inputValue.indexOf("(") + 1), inputValue.indexOf(")"));
        return outputValue;
    };
    FeaturehomeComponent.prototype.getTermIdFromTermName = function (termName) {
        for (var i = 0; i < this.termRulesList.length; i++) {
            var termRule = this.termRulesList[i];
            if (termRule.name === termName) {
                return termRule.termId;
            }
        }
        return "LSE";
    };
    FeaturehomeComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    FeaturehomeComponent.prototype.moveRankBy = function (index, amount) {
        this.msgs = [];
        var e1 = Object.assign(this.expressionList[index]);
        var e2 = Object.assign(this.expressionList[index + amount]);
        console.log("e1:" + e1);
        console.log("e2:" + e2);
        console.log(e1.rank + " will be moved to " + e2.rank);
        e2.rank = index + 1;
        e1.rank = index + amount + 1;
        this.expressionList[index] = e2;
        this.expressionList[index + amount] = e1;
        //utilService.saveTerm("Expression Rank " + e2.rank + " moved to " + e1.rank);
        // updateExpressionTableParams(rule);
    };
    ;
    FeaturehomeComponent.prototype.addTerm = function () {
        this.showError = false;
        this.msgs = [];
        this.newTerm = true;
        this.refresh();
        this.definition = '';
        this.termCode = '';
        this.termName = '';
        this.periodType = { name: '' };
        this.type = { name: '' };
        this.incAccuTest = false;
        this.finStatement = { financialStatement: '' };
        this.priorgroup = { name: '' };
        this.processingOrder = '';
        this.termRule = this.rule;
        this.expressionList = [];
        this.validationList = [];
        this.indOvrrideList = [];
        this.dervdZroExpList = [];
        this.expTableList = [];
        this.displayTerms = false;
    };
    FeaturehomeComponent.prototype.processTermnow = function () {
        this.refresh();
        this.enableTermButton = false;
        this.enableTermCode = true;
        this.processnow = true;
        if (this.divisionCount === 0) {
            this.divisionCount = this.completeCompanyList.length;
        }
        this.enableTermCode = true;
        this.displayTerms = true;
        this.displayGetCoverage = true;
        if (this.termCode != '') {
            this.enableTermButton = false;
        }
    };
    FeaturehomeComponent.prototype.divSectorChange = function (event) {
        var _this = this;
        this.divSector = event;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        // event = event.value ? event.value : event;
        var division = event.substr(0, event.indexOf('->') - 1);
        var sector = event.substr(event.indexOf('->') + 3, event.length);
        this.filerCategory = undefined;
        this.industry = undefined;
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        this.filteredindustry = [];
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredindustry.push(name);
        });
        this.divisionCount = this.completeEntities.length;
        this.industryCount = this.completeEntities.length;
        this.categoryCount = this.completeEntities.length;
        //sessionStorage.setItem('home.completeEntities', JSON.stringify(this.completeEntities));
        sessionStorage.setItem('home.filteredindustry', JSON.stringify(this.filteredindustry));
        sessionStorage.setItem('home.division', this.division);
        sessionStorage.setItem('home.sector', this.sector);
        sessionStorage.setItem('home.divSector', this.divSector);
        sessionStorage.setItem('home.divisionCount', JSON.stringify(this.divisionCount));
        sessionStorage.setItem('home.industryCount', JSON.stringify(this.industryCount));
        sessionStorage.setItem('home.categoryCount', JSON.stringify(this.categoryCount));
    };
    FeaturehomeComponent.prototype.processIndustryChange = function (event) {
        // event = event.value ? event.value : null;
        if (event != null) {
            this.industry = event;
            this.filerCategory = undefined;
            event = event.substring(0, 4);
            var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === event; });
            this.industryCount = completeEntities.length;
            this.categoryCount = completeEntities.length;
        }
        else {
            this.industryCount = this.divisionCount;
            this.categoryCount = this.divisionCount;
        }
        sessionStorage.setItem('home.industry', this.industry);
        //sessionStorage.setItem('home.completeEntities', JSON.stringify(this.completeEntities));
        sessionStorage.setItem('home.industryCount', JSON.stringify(this.industryCount));
        sessionStorage.setItem('home.categoryCount', JSON.stringify(this.categoryCount));
    };
    FeaturehomeComponent.prototype.processfilCatChange = function (event) {
        var _this = this;
        // event = event.value ? event.value : null;
        if (event != null) {
            this.filerCategory = event;
            var completeEntities = this.completeEntities.filter(function (obj) {
                return obj.filerCategory === event && obj.sic === _this.industry.substr(0, 4);
            });
            this.categoryCount = completeEntities.length;
        }
        else {
            this.categoryCount = null;
        }
        sessionStorage.setItem('home.filerCategory', this.filerCategory);
        //sessionStorage.setItem('home.completeEntities', JSON.stringify(this.completeEntities));
        sessionStorage.setItem('home.categoryCount', JSON.stringify(this.categoryCount));
    };
    FeaturehomeComponent.prototype.processNow = function () {
        var _this = this;
        this.refresh();
        this.enableTermButton = false;
        this.enableTermCode = true;
        if (this.companyName && this.divSector && this.division && this.sector) {
            this.processTermRule();
            window.scroll(0, 0);
            return;
        }
        else {
            this.confirmationService.confirm({
                message: 'Are you sure you want to process all entities for the selected term?',
                header: 'Processing Term Rule ' + this.termId,
                icon: 'pi pi-exclamation-triangle',
                accept: function () {
                    //this.msgs = [{severity:'info', summary:'Process Term', detail:'Process Term'}];
                    _this.processTermRule();
                },
                reject: function () {
                    //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
                }
            });
        }
        window.scroll(0, 0);
    };
    FeaturehomeComponent.prototype.removeTerm = function () {
        var _this = this;
        this.refresh();
        this.enableTermButton = false;
        this.enableTermCode = true;
        this.confirmationService.confirm({
            message: 'Term Rule will be removed, are you sure?',
            header: 'Remove Rule ' + this.termCode,
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.utilService.removeTerm(_this.termCode).subscribe(function (response) {
                    if (response.errorMessage) {
                        _this.msgs = [{ severity: 'info', summary: 'Confirmed', detail: response.errorMessage }];
                    }
                    else {
                        _this.msgs = [{ severity: 'info', summary: '', detail: 'Term Rule Removed' }];
                        _this.ngOnInit();
                    }
                    console.log("Remove Term  completed ");
                    _this.selectedTerm = null;
                    _this.termTree = [];
                    _this.getRuleList();
                }, function (error) { return console.log(error); });
            },
            reject: function () {
                //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
            }
        });
    };
    FeaturehomeComponent.prototype.saveTerm = function () {
        var _this = this;
        this.showError = false;
        if (!this.newTerm && this.termRule.termId != '') {
            this.termRule.expressions = this.expressionList;
        }
        this.termRule.termId = this.termCode;
        this.termRule.name = this.termName;
        this.termRule.description = this.definition;
        this.termRule.includeInAccuracyTests = this.incAccuTest;
        if (this.periodType.name === '') {
            this.termRule.periodType = null;
        }
        else {
            this.termRule.periodType = this.periodType.name;
        }
        if (this.type.name === '') {
            this.termRule.type = null;
        }
        else {
            this.termRule.type = this.type.name;
        }
        if (this.finStatement.financialStatement === '') {
            this.termRule.financialStatement = null;
        }
        else {
            this.termRule.financialStatement = this.finStatement.financialStatement;
        }
        if (this.priorgroup.name === '') {
            this.termRule.priorityGroup = null;
        }
        else {
            this.termRule.priorityGroup = this.priorgroup.name;
        }
        this.utilService.saveTerm(this.termRule).subscribe(function (response) {
            console.log("Save Term  completed ");
            _this.msgs = [{ severity: 'info', summary: 'Term', detail: _this.termRule.termId + ' saved successfully' }];
            _this.termTree = [];
            _this.getRuleList();
            if (_this.expressionName === 'Expression') {
                _this.getTermBasedOnId(_this.termId);
            }
            //return;
        }, function (error) {
            console.log(error);
            _this.msgs = [{ severity: 'danger', summary: 'Term Rule Save Failed' }];
            return;
        });
    };
    FeaturehomeComponent.prototype.refresh = function () {
        this.processnow = false;
        this.msgs = [];
        // this.displayTerms = false;
        // this.displayGetCoverage = false;
        this.showError = false;
        this.enableTermButton = true;
        this.enableTermCode = false;
    };
    FeaturehomeComponent.prototype.processTermRule = function () {
        var _this = this;
        console.log("process Rule : " + JSON.stringify(this.termId));
        this.progressSpinner = true;
        this.msgs = [{ severity: 'info', summary: 'Started processing for ' + this.termName, detail: '' }];
        if (this.divSector && this.filerCategory && this.industry) {
            var sic = "NULL";
            if (this.industry) {
                sic = this.industry.substr(0, this.industry.indexOf('-'));
            }
            var filerCategory = "NULL";
            if (this.filerCategory) {
                filerCategory = this.filerCategory;
            }
            var division = "NULL";
            var sector = "NULL";
            if (this.divSector) {
                division = this.divSector.substr(0, this.divSector.indexOf('->') - 1);
                sector = this.divSector.substr(this.divSector.indexOf('->') + 3, this.divSector.length);
            }
            this.utilService.processTermForCriteria(this.termCode, division, sector, sic, filerCategory).subscribe(function (response) {
                if (!response.data) {
                    window.scroll(0, 0);
                    _this.msgs = [{ severity: 'info', summary: 'Term processing for' + _this.termName, detail: ' processed successfully' }];
                    _this.progressSpinner = false;
                }
                else {
                    window.scroll(0, 0);
                    _this.msgs = [{ severity: 'info', summary: 'Process Term Rule failed' + _this.termName, detail: '' }];
                    _this.progressSpinner = false;
                }
            }, function (err) {
            });
        }
        else {
            if (this.isAdminUser) {
                //we can allow admin users to process all entities for a given term....
                this.processTermRuleAdmin();
                return;
            }
            else {
                window.scroll(0, 0);
                this.msgs = [{ severity: 'info', summary: 'Please select a division->Sector or Filer Category before processing Term Rule.', detail: '' }];
                this.progressSpinner = false;
                return;
            }
        }
        // adminProcessAllTermsClicked('#processTermForCriteria');
    };
    ;
    FeaturehomeComponent.prototype.processTermRuleAdmin = function () {
        var _this = this;
        this.utilService.processTerm(this.termRule).subscribe(function (response) {
            if (!response.data) {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Term processing for ' + _this.termName, detail: 'processed successfully' }];
                _this.progressSpinner = false;
            }
            else {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Process Term Rule failed for ' + _this.termName, detail: ' ' }];
                _this.progressSpinner = false;
            }
        }, function (err) {
        });
    };
    FeaturehomeComponent.prototype.filterConceptMatch = function (event) {
        this.toHighlight = event.query;
        this.conceptMatch(event.query);
    };
    FeaturehomeComponent.prototype.conceptMatch = function (q) {
        var _this = this;
        this.utilService.getTaxonomyElements(q, false).subscribe(function (response) {
            _this.filteredconcMat = response;
        });
    };
    FeaturehomeComponent.prototype.OnExpressionAxisTypeChanged = function (index) {
        var expSet = this.expressionSets[index];
        if (this.expressionSets[index].axisType === "ExactMatch") {
            this.expressionSets[index].axisInclusionListAsString = "";
            this.expressionSets[index].axisExclusionListAsString = "";
            this.expressionSets[index].axisInclusionList = [];
            this.expressionSets[index].axisExclusionList = [];
        }
        else {
            this.expressionSets[index].axisName = "";
        }
        //this.expressionSets[index] = expSet;
    };
    ;
    FeaturehomeComponent.prototype.OnExpressionMemberTypeChanged = function (index) {
        var expSet = this.expressionSets[index];
        if (this.expressionSets[index].memberType === "Any") {
            this.expressionSets[index].memberName = "";
            this.expressionSets[index].memberInclusionListAsString = "";
            this.expressionSets[index].memberExclusionListAsString = "";
            this.expressionSets[index].memberInclusionList = [];
            this.expressionSets[index].memberExclusionList = [];
        }
        else if (this.expressionSets[index].memberType === "ExactMatch") {
            this.expressionSets[index].memberInclusionListAsString = "";
            this.expressionSets[index].memberExclusionListAsString = "";
            this.expressionSets[index].memberInclusionList = [];
            this.expressionSets[index].memberExclusionList = [];
        }
        else {
            this.expressionSets[index].memberName = "";
        }
    };
    ;
    FeaturehomeComponent.prototype.buildListFromString = function (listAsString) {
        return this.splitTextToArray(listAsString, "\n");
    };
    ;
    FeaturehomeComponent.prototype.splitTextToArray = function (textData, spliter) {
        //console.log("TextArea to array : " + textData + ", splitter : " + spliter);
        var strArray = [];
        if (!textData) {
            return strArray;
        }
        strArray = textData.toString().split(spliter);
        //console.log("TextArea to array : result array: " + JSON.stringify(strArray));
        return strArray;
    };
    FeaturehomeComponent.prototype.updateNameContains = function (nameContains) {
        this.containsWords = this.splitTextToArray(nameContains, "\n");
    };
    ;
    FeaturehomeComponent.prototype.updateNameNotContains = function (nameNotContains) {
        this.doesNotContainsWords = this.splitTextToArray(nameNotContains, "\n");
    };
    ;
    FeaturehomeComponent.prototype.resolve = function () {
        // this.updateExpressionForEditFromTextArea();
        var expressionObject = {};
        expressionObject.type = this.expressionForEdit.type;
        switch (this.expressionForEdit.type) {
            case this.expressionTypes[2]:
                {
                    expressionObject.expression = this.getExtendedCheckExpression(this.expressionForEdit);
                    break;
                }
            case this.expressionTypes[3]:
                {
                    //extended check with dimension
                    expressionObject.expression = this.getExtendedCheckExpression(this.expressionForEdit);
                    var dim = this.getDimensionExpression(this.expressionForEdit);
                    expressionObject.axisExpression = dim.axisExpression;
                    expressionObject.memberExpression = dim.memberExpression;
                    break;
                }
        }
        ;
        //console.log("resolve - : " + JSON.stringify( expressionObject));
        this.getExtendedEntityLookup(expressionObject);
    };
    ;
    FeaturehomeComponent.prototype.getExtendedEntityLookup = function (expression) {
        //console.log("extended entity lookup call with : " + JSON.stringify(companiesFilter) + ", expression:" + JSON.stringify(expression) + ",TOKEN: " + this.csrfToken);
        var _this = this;
        var query = {};
        query.sic = this.industry.split('-')[0];
        query.division = this.divSector.split(' -> ')[0];
        query.sector = this.divSector.split(' -> ')[1];
        query.filerCategory = this.filerCategory;
        query.expression = expression;
        this.utilService.extendedEntityLookup(query).subscribe(function (response) {
            _this.extendedEntitiesLookup = response.data;
        });
    };
    ;
    FeaturehomeComponent.prototype.updateAxes = function (axes) {
        //console.log("updateAxes: " + this.axes + " - " + axes);
        this.namedAxisList = this.splitTextToArray(axes, '\n');
    };
    ;
    FeaturehomeComponent.prototype.updateAxesMembers = function (axesMembers) {
        this.namedMemberList = this.splitTextToArray(axesMembers, "\n");
    };
    ;
    FeaturehomeComponent.prototype.arrayToExpression = function (arrayData, splitter, prefix, suffix) {
        if (!prefix) {
            prefix = "";
        }
        if (!suffix) {
            suffix = "";
        }
        //console.log("arrayToExpression with spliter: " + splitter + ",prefix: " + prefix + ", suffix: " + suffix);
        var textData;
        if (!arrayData) {
            return textData;
        }
        for (var i = 0; i < arrayData.length; i++) {
            //
            var elem = arrayData[i].trim();
            //console.log("word from array : " + elem);
            if (elem.length > 0) {
                if (i === 0) {
                    textData = this.surroundTextWith(elem, prefix, suffix, false);
                }
                else {
                    textData = textData + splitter + this.surroundTextWith(elem, prefix, suffix, false);
                }
            }
        }
        //console.log("arrayToExpression converted expression : " + textData);
        return textData;
    };
    ;
    FeaturehomeComponent.prototype.surroundTextWith = function (str, prefix, suffix, check) {
        //console.log("surround text " + str + " with " + prefix + " and "+ suffix);
        if (!check) {
            str = prefix + str + suffix;
        }
        else {
            var patt1 = new RegExp("^" + prefix);
            var patt2 = new RegExp(suffix + "$");
            if (!patt1.test(str)) {
                str = prefix + str;
            }
            if (!patt2.test(str)) {
                str = str + suffix;
            }
        }
        return str;
    };
    ;
    FeaturehomeComponent.prototype.addingExpression = function () {
        this.expressionForEdit = {};
        this.conceptMatchMultipleList = [];
        this.conceptMatchMultiple = [];
        this.concMatch = {};
        this.index = 0;
        this.isOverrideExpressionForEdit = false;
        this.expressionForEdit.expression = "";
        // this.expressionForEdit.type = this.expressionTypes[0];
        this.expressionForEdit.type = this.expressionTypes[this.index];
        this.expressionForEdit.NamedAxisList = [];
        this.expressionForEdit.useVirtualParentNew = true;
        this.expressionForEdit.useMaxAxisCount = false;
        this.expressionForEdit.maxAxisCount = 2;
        this.expressionForEdit.NamedMemberList = [];
        this.expressionForEdit.dimensionExpressionSets = [];
        this.expressionForEdit.virtualFactMemberExclusionList = [];
        this.expressionForEdit.containsWords = [];
        this.expressionForEdit.doesNotContainsWords = [];
        this.conceptNameDefinition = "";
        this.formulaSets = [];
        this.expressionSets = [];
        this.AddExpressionSet();
        this.addAnotherConcept();
        this.addAnotherFormula();
        this.editExpression = true;
    };
    ;
    FeaturehomeComponent.prototype.saveExpression = function () {
        this.saveValues(this.expressionForEdit);
        this.validationMessage = null;
        this.showValidation = false;
        if (!!this.formulaSets) {
            for (var i = 0; i < this.formulaSets.length; i++) {
                var formula = this.formulaSets[i];
                if (this.formulaSets.length == 1 && formula.termName == "" && formula.nullable == false && formula.operation == "") {
                    break;
                }
                if (!formula.termName) {
                    this.validationMessage = 'Incomplete Formula", "Please complete Term Rule selection';
                    this.showValidation = true;
                    window.scroll(0, 0);
                    return;
                }
                else {
                    if (i !== (this.formulaSets.length - 1) && !formula.operation) {
                        this.validationMessage = 'Incomplete Formula", "Please complete missing operation';
                        this.showValidation = true;
                        window.scroll(0, 0);
                        return;
                    }
                }
            }
        }
        if (this.expressionForEdit.type === this.expressionTypes[1]) {
            if (this.validateDimensionalExpressions() === false)
                return;
        }
        if (this.isOverrideExpressionForEdit) {
            var overrideName = this.overrideName.name ? this.overrideName.name : this.overrideName;
            if (!overrideName) {
                this.validationMessage = 'Incomplete override information, Please provide an override name for the expression being added.';
                this.showValidation = true;
                this.addEditIndustry = true;
            }
            //verify that override name is populated...
        }
        switch (this.expressionForEdit.type) {
            case this.expressionTypes[0]:
                {
                    this.expressionForEdit.expression = this.getExpression();
                    this.expressionForEdit.conceptName = this.expressionForEdit.expression;
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
            case this.expressionTypes[1]:
                {
                    this.expressionForEdit.expression = this.surroundTextWith(this.concMatch.id, "{", "}", true);
                    this.expressionForEdit.conceptName = this.expressionForEdit.expression;
                    //cleanup old code...
                    this.expressionForEdit.axisExpression = null;
                    this.expressionForEdit.memberExpression = null;
                    this.expressionForEdit.NamedAxisList = null;
                    this.expressionForEdit.NamedMemberList = null;
                    break;
                }
            case this.expressionTypes[2]:
                {
                    this.expressionForEdit.expression = this.getExtendedCheckExpression(this.expressionForEdit);
                    this.expressionForEdit.dimensionExpressionSets = null;
                    break;
                }
            case this.expressionTypes[3]:
                {
                    //extended check with dimension
                    this.expressionForEdit.expression = this.getExtendedCheckExpression(this.expressionForEdit);
                    var dim = this.getDimensionExpression(this.expressionForEdit);
                    this.expressionForEdit.axisExpression = dim.axisExpression;
                    this.expressionForEdit.memberExpression = dim.memberExpression;
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
            case this.expressionTypes[4]:
                {
                    //formula
                    this.expressionForEdit.formulaList = this.formulaSets;
                    this.expressionForEdit.expression = this.getFormulaExpression(this.expressionForEdit);
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
            case this.expressionTypes[5]:
                {
                    //conceptmatchmultiple
                    this.expressionForEdit.expression = this.expressionForEdit.conceptMatchMultipleList.join("||");
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
        }
        if (this.isOverrideExpressionForEdit) {
            this.updateOverrideFromUIToRule();
        }
        else {
            if (!this.expressionForEdit.rank) {
                this.expressionForEdit.rank = this.termRule.expressions.length + 1;
                this.termRule.expressions.push(this.expressionForEdit);
            }
            else {
                var index = this.expressionForEdit.rank - 1;
                this.termRule.expressions[index] = this.expressionForEdit;
            }
        }
        // this.activeExpressionTabIndex = this.isOverrideExpressionForEdit ? 2 : 0;
        if (!this.showValidation) {
            this.addEditIndustry = false;
            this.editExpression = false;
            this.addEditDerived = false;
            this.saveTerm();
        }
        window.scroll(0, 0);
        this.msgs = [{ severity: 'info', summary: 'Saved Expression successfully' }];
    };
    FeaturehomeComponent.prototype.getExpression = function () {
        var exprStr = "";
        switch (this.expressionForEdit.type) {
            case this.expressionTypes[0]:
                {
                    if (this.concMatch.id === undefined) {
                        // this.concMatch.id = this.concMatch?;
                        if (this.concMatch.length !== undefined) {
                            var id = { id: this.concMatch };
                            this.concMatch = id;
                        }
                    }
                    if (!this.concMatch.id) {
                        this.showValidation = true;
                        this.validationMessage = 'Concept Name is required.';
                        return;
                    }
                    exprStr = this.surroundTextWith(this.concMatch.id, "{", "}", true);
                    break;
                }
            case this.expressionTypes[1]:
                {
                    if (!this.concMatch.id) {
                        return;
                    }
                    exprStr = this.surroundTextWith(this.concMatch.id, "{", "}", true);
                    var dim = this.getDimensionExpression(this.expressionForEdit);
                    exprStr = exprStr + ", axisExpression:" + dim.axisExpression + ", memberExpression:" + dim.memberExpression;
                    break;
                }
            case this.expressionTypes[2]:
                {
                    exprStr = this.getExtendedCheckExpression(this.expressionForEdit);
                    break;
                }
            case this.expressionTypes[3]:
                {
                    exprStr = this.getExtendedCheckExpression(this.expressionForEdit);
                    var dim = this.getDimensionExpression(this.expressionForEdit);
                    exprStr = exprStr + ", axisExpression:" + dim.axisExpression + ", memberExpression:" + dim.memberExpression;
                    break;
                }
            case this.expressionTypes[4]:
                {
                    exprStr = this.getFormulaExpression(this.expressionForEdit);
                    break;
                }
            case this.expressionTypes[5]:
                {
                    exprStr = this.expressionForEdit.conceptMatchMultipleList.join("||");
                    break;
                }
        }
        return exprStr;
    };
    FeaturehomeComponent.prototype.saveValues = function (expression) {
        var _this = this;
        // Concept Match
        if (this.concMatch) {
            this.expressionForEdit.conceptName = this.concMatch.id !== undefined ? this.concMatch.id : null;
        }
        this.expressionForEdit.usePositiveValuesOnly = this.usePositiveFacts ? true : false;
        this.expressionForEdit.useNegativeValuesOnly = this.useNegativeFacts ? true : false;
        this.expressionForEdit.reverseNegativeValues = this.revNegativeFacts ? true : false;
        this.expressionForEdit.virtualFactAxis = this.axis;
        if (this.virtualFactMemberExclusions && this.virtualFactMemberExclusions[0] != null) {
            // this.expressionForEdit.virtualFactMemberExclusionList = [];
            this.expressionForEdit.virtualFactMemberExclusionList.push(this.virtualFactMemberExclusions);
        }
        else {
            this.expressionForEdit.virtualFactMemberExclusionList = [];
        }
        // Concept Match With Dim
        if (this.expressionSets) {
            this.expressionForEdit.dimensionExpressionSets = [];
            this.expressionSets.forEach(function (obj) {
                if (obj.memberInclusionListAsString) {
                    obj.memberInclusionList = [];
                    obj.memberInclusionList.push(obj.memberInclusionListAsString);
                }
                if (obj.memberExclusionListAsString) {
                    obj.memberExclusionList = [];
                    obj.memberExclusionList.push(obj.memberExclusionListAsString);
                }
                if (obj.axisExclusionListAsString) {
                    obj.axisExclusionList = [];
                    obj.axisExclusionList.push(obj.axisExclusionListAsString);
                }
                if (obj.axisInclusionListAsString) {
                    obj.axisInclusionList = [];
                    obj.axisInclusionList.push(obj.axisInclusionListAsString);
                }
            });
            this.expressionForEdit.dimensionExpressionSets = this.expressionSets;
        }
        // Extended check
        this.expressionForEdit.containsWords = this.containsWords;
        this.expressionForEdit.doesNotContainsWords = this.doesNotContainsWords;
        this.expressionForEdit.balType = this.balType !== undefined ? this.balType : null;
        this.expressionForEdit.perType = this.perType !== undefined ? this.perType : null;
        this.expressionForEdit.isShareItemType = this.isShareItemType !== undefined ? this.isShareItemType : null;
        // Extended check with dim
        this.expressionForEdit.NamedAxisList = this.splitTextToArray(this.axes, '\n');
        this.expressionForEdit.NamedMemberList = this.splitTextToArray(this.axesMembers, '\n');
        //Formula
        this.formulaSets.forEach(function (obj) {
            if (obj.operation !== null) {
                obj.operation = obj.operation.name ? obj.operation.name : "";
            }
        });
        this.expressionForEdit.formulaList = this.formulaSets;
        if (this.formulaSets.length > 1) {
            this.expressionForEdit.formulaList = [];
            this.formulaSets.forEach(function (obj) {
                var operation = "";
                if (obj.operation != null) {
                    operation = obj.operation.name != undefined ? obj.operation.name : "";
                }
                var formula = { termName: obj.termName, nullable: obj.nullable, operation: operation };
                _this.expressionForEdit.formulaList.push(formula);
            });
        }
        //Concept Match Multiple
        if (this.conceptMatchMultiple[0] != "") {
            this.expressionForEdit.conceptMatchMultipleList = [];
            this.conceptMatchMultiple.forEach(function (obj) {
                _this.expressionForEdit.conceptMatchMultipleList.push(obj.id);
            });
        }
    };
    FeaturehomeComponent.prototype.validateDimensionalExpressions = function () {
        if (this.expressionForEdit.dimensionExpressionSets == null ||
            this.expressionForEdit.dimensionExpressionSets.length == 0) {
            this.errorMsg = 'Incomplete Dimension", "Please specify dimensional information.';
            this.showError = true;
            window.scroll(0, 0);
            return false;
        }
        this.expressionForEdit.dimensionExpressionSets.forEach(function (expSet) {
            if (expSet.axisType === "ExactMatch") {
                if (!expSet.axisName || expSet.axisName.length === 0) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify Axis name for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
            else {
                var hasData = false;
                if (expSet.axisInclusionList && expSet.axisInclusionList.length > 0) {
                    hasData = true;
                }
                if (expSet.axisExclusionList && expSet.axisExclusionList.length > 0) {
                    hasData = true;
                }
                if (hasData === false) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify Axis inclusion /exclusion data for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
            if (expSet.memberType === "ExactMatch") {
                if (!expSet.memberName || expSet.memberName.length === 0) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify Member name for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
            else if (expSet.memberType === "InclusionExclusionList") {
                var hasData = false;
                if (expSet.memberInclusionList && expSet.memberInclusionList.length > 0) {
                    hasData = true;
                }
                if (expSet.memberExclusionList && expSet.memberExclusionList.length > 0) {
                    hasData = true;
                }
                if (hasData === false) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify member inclusion /exclusion data for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
        });
        return true;
    };
    FeaturehomeComponent.prototype.deleteWithRank = function (index) {
        if (this.expressionName === 'Expression')
            this.deleteExpressions(index);
        if (this.expressionName === 'Validation')
            this.deleteValidation(index);
        if (this.expressionName === 'Industry')
            this.deleteIndustry(index);
    };
    ;
    FeaturehomeComponent.prototype.deleteIndustry = function (index) {
        var _this = this;
        var ind = index + 1;
        this.confirmationService.confirm({
            message: 'Override Expression will be removed, are you sure?',
            header: 'Delete Override Expression',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                var override = _this.getOverride(_this.selIndOvrdExpr.name);
                if (override) {
                    override.expressions.splice(index, 1);
                    for (var j = 0; j < override.expressions.length; j++) {
                        override.expressions[j].rank = j + 1;
                    }
                }
                // this.termRule.overrides.push( override.expressions);
                _this.saveTerm();
                _this.expTableList = override.expressions;
                window.scroll(0, 0);
                _this.msgs = [];
                _this.msgs = [{ severity: 'info', summary: 'Deleted Override Expression successfully' }];
            },
            reject: function () {
            }
        });
    };
    FeaturehomeComponent.prototype.deleteExpressions = function (index) {
        var _this = this;
        var ind = index + 1;
        this.confirmationService.confirm({
            message: 'Rank ' + ind + ' Expression will be removed, are you sure?',
            header: 'Delete Expression',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.expressionList.splice(index, 1);
                for (var i = 0; i < _this.expressionList.length; i++) {
                    _this.expressionList[i].rank = i + 1;
                }
                _this.termRule.expressions = _this.expressionList;
                _this.saveTerm();
                _this.expTableList = _this.termRule.expressions;
                window.scroll(0, 0);
                _this.msgs = [];
                _this.msgs = [{ severity: 'info', summary: 'Deleted Expression with rank ', detail: index + ' successfully' }];
            },
            reject: function () {
                //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
            }
        });
    };
    FeaturehomeComponent.prototype.addValidations = function () {
        this.addEditValidation = true;
        this.formulaSets = [];
        this.addAnotherFormula();
        this.addvalidation = true;
        //   if(!this.termRule.validationExpressions) {
        //     this.termRule.validationExpressions = [];
        // }
        // this.validation = {};
        // this.validation.rank = this.termRule.validationExpressions.length+1;
        // this.validation.formulaList = [];
        // this.validation.formulaList.push({});
        // this.validation.expression = "";
    };
    FeaturehomeComponent.prototype.saveRuleWithValidation = function () {
        var _this = this;
        if (!this.checkFormulas()) {
            this.validationMessage = "Incomplete Validation entry found. Please complete before saving.";
            this.showValidation = true;
            window.scroll(0, 0);
            return;
        }
        ;
        var val = {};
        if (this.addvalidation) {
            if (this.termRule != null && this.termRule.validationExpressions === null) {
                this.termRule.validationExpressions = [];
            }
            val.rank = this.termRule.validationExpressions.length + 1;
            val.expression = this.convertFormulaToExpression(this.formulaSets);
            this.termRule.validationExpressions[val.rank - 1] = val;
        }
        else {
            val.rank = this.validationRank;
            val.expression = this.convertFormulaToExpression(this.formulaSets);
            this.formulaSets = [];
            this.termRule.validationExpressions[val.rank - 1] = val;
        }
        //this.activeExpressionTabIndex = 1;
        this.saveTerm();
        this.msgs = [];
        window.scroll(0, 0);
        this.msgs = [{ severity: 'info', summary: 'Saved Validation successfully' }];
        this.validationList = [];
        this.expTableList = [];
        this.termRule.validationExpressions.forEach(function (obj) {
            obj.type = 'V';
            _this.validationList.push(obj);
        });
        this.expTableList = this.validationList;
    };
    FeaturehomeComponent.prototype.convertFormulaToExpression = function (formulaList) {
        console.log("convertFormulaToExpression: " + JSON.stringify(formulaList));
        var expression = "work in progress... available soon";
        expression = "";
        for (var x = 0; x < formulaList.length; x++) {
            var formula = formulaList[x];
            if (!!formula.termName) {
                expression = expression + "{sec:" + formula.termName;
                if (!!formula.nullable) {
                    expression = expression + "=0";
                }
                expression = expression + "}";
                if (!!formula.operation) {
                    expression = expression + formula.operation.name;
                }
            }
        }
        return expression;
    };
    FeaturehomeComponent.prototype.getValidationExpression = function () {
        this.validationExpression = this.convertFormulaToExpression(this.formulaSets);
        this.validationRank = this.termRule.validationExpressions.length + 1;
    };
    FeaturehomeComponent.prototype.deleteValidation = function (index) {
        var _this = this;
        var ind = index + 1;
        this.confirmationService.confirm({
            message: 'Rank ' + ind + ' validation will be removed, are you sure?',
            header: 'Delete Validation',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.termRule.validationExpressions.splice(index, 1);
                for (var i = 0; i < _this.termRule.validationExpressions.length; i++) {
                    var elem = _this.termRule.validationExpressions[i];
                    elem.rank = i + 1;
                }
                _this.saveTerm();
                _this.expTableList = _this.termRule.validationExpressions;
                _this.msgs = [];
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Deleted Validation with rank ', detail: ind + ' successfully' }];
            },
            reject: function () {
                //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
            }
        });
    };
    ;
    FeaturehomeComponent.prototype.addOverrideExpression = function () {
        this.expressionForEdit = {};
        this.expressionSets = [];
        this.formulaSets = [];
        this.AddExpressionSet();
        this.addAnotherFormula();
        this.overrideName = null;
        this.mergeBaseExpressions = null;
        this.overridecompanyName = null;
        this.disableAxes = false;
        this.disableMember = false;
        this.disableAxesInc = true;
        this.disableMemInc = true;
        this.overrideForEdit = {};
        this.mergeBaseExpressions = true;
        // this.expressionForEdit.expression = "";
        // this.expressionForEdit.type = this.expressionTypes[0];
        // this.expressionForEdit.NamedAxisList = [];
        // this.expressionForEdit.NamedMemberList = [];
        // this.expressionForEdit.useVirtualParentNew = true;
        // this.expressionForEdit.useMaxAxisCount = false;
        // this.expressionForEdit.maxAxisCount = 2;
        // this.expressionForEdit.dimensionExpressionSets = [];
        // this.expressionForEdit.virtualFactMemberExclusionList = [];
        // this.expressionForEdit.containsWords = [];
        // this.expressionForEdit.doesNotContainsWords = [];
        this.conceptNameDefinition = "";
        this.showExpression = false;
        this.addingExpression();
        this.isOverrideExpressionForEdit = true;
    };
    ;
    FeaturehomeComponent.prototype.editOverrideExpression = function (rowdata) {
        this.entityOverrides = [];
        var override = this.getOverride(this.selIndOvrdExpr.name);
        this.overrideForEdit = {};
        if (!override)
            return;
        this.expressionForEdit = override.expressions[rowdata.rank - 1];
        this.overrideForEdit.name = override.name;
        this.overrideForEdit.mergeBaseExpressions = override.mergeBaseExpressions;
        this.overrideForEdit.origName = override.name;
        this.overrideName = { name: override.name };
        this.mergeBaseExpressions = override.mergeBaseExpressions;
        if (override.entityOverrides[0] != null) {
            this.setCurrentOverrideIndustryInformation(override);
        }
        else {
            this.entityOverrides = null;
            this.addAnotherIndustryOverride();
        }
        this.isOverrideExpressionForEdit = true;
        if (!this.expressionForEdit.type || this.expressionForEdit.type === 'na') {
            this.expressionForEdit.type = this.expressionTypes[0];
        }
    };
    ;
    FeaturehomeComponent.prototype.setCurrentOverrideIndustryInformation = function (override) {
        this.entityOverrides = [];
        for (var j = 0; j < override.entityOverrides.length; j++) {
            var entityOverride = {};
            if (override.entityOverrides[j].entityId) {
                var entity = this.completeCompanyList.filter(function (obj) { return obj.entityId === override.entityOverrides[j].entityId; });
                if (entity && entity.length > 0) {
                    entityOverride.entityname = entity[0].companyName + "(" + entity[0].entityId + ")";
                }
            }
            if (!entityOverride.entityname) {
                entityOverride.overrideDivSec = this.divSector;
            }
            this.entityOverrides.push(entityOverride);
        }
    };
    FeaturehomeComponent.prototype.addAnotherIndustryOverride = function () {
        var overrideEntity = { divisionSector: "", entityname: "" };
        if (!this.entityOverrides) {
            this.entityOverrides = [];
        }
        this.entityOverrides.push(overrideEntity);
    };
    FeaturehomeComponent.prototype.updateOverrideFromUIToRule = function () {
        var overrideName = this.overrideName.name ? this.overrideName.name : this.overrideName;
        var index = -1;
        var existingExpressions = [];
        if (!this.termRule.overrides) {
            this.termRule.overrides = [];
        }
        for (var i = 0; i < this.termRule.overrides.length; i++) {
            if (overrideName) {
                if (overrideName === this.termRule.overrides[i].name) {
                    index = i;
                    existingExpressions = this.termRule.overrides[i].expressions;
                    break;
                }
            }
            else {
                if (this.overrideForEdit.name === this.termRule.overrides[i].name) {
                    index = i;
                    existingExpressions = this.termRule.overrides[i].expressions;
                    break;
                }
            }
        }
        var override = {};
        override.name = overrideName;
        override.mergeBaseExpressions = this.mergeBaseExpressions;
        override.expressions = existingExpressions;
        override.entityOverrides = [];
        for (var i = 0; i < this.entityOverrides.length; i++) {
            var indOverride = {};
            if (this.entityOverrides[i].entityname) {
                // entityOverride.overridecompanyName = entity[0].companyName.substr(0, entity[0].companyName.indexOf( '(');
                // mp.division = this.divSector.substr(0,this.divSector.indexOf( '->')-1);
                // mp.sector =  this.divSector.substr(this.divSector.indexOf( '->')+3, this.divSector.length);
                indOverride.entityId = this.getCompanyIdFromName(this.entityOverrides[i].entityname.substr(0, this.entityOverrides[i].entityname.indexOf('(')));
            }
            else {
                if (this.entityOverrides[i].divisionSector) {
                    indOverride.division = this.entityOverrides[i].divisionSector.division;
                    indOverride.sector = this.entityOverrides[i].divisionSector.sector;
                }
            }
            if (!indOverride.division && !indOverride.entityId) {
                continue;
            }
            override.entityOverrides.push(indOverride);
        }
        if (this.expressionForEdit.rank) {
            //console.log("Updating Expression array index : " + index);
            override.expressions[this.expressionForEdit.rank - 1] = this.expressionForEdit;
        }
        else {
            this.expressionForEdit.rank = override.expressions.length + 1;
            override.expressions.push(this.expressionForEdit);
        }
        if (index < 0) {
            this.termRule.overrides.push(override);
        }
        else {
            this.termRule.overrides[index] = override;
        }
    };
    FeaturehomeComponent.prototype.getCompanyIdFromName = function (input) {
        var entities = this.completeCompanyList.filter(function (obj) { return obj.companyName === input; });
        if (entities.length > 0) {
            return entities[0].entityId;
        }
        return null;
    };
    FeaturehomeComponent.prototype.getOverride = function (overrideName) {
        this.toHighlight = (overrideName && overrideName.query) ? overrideName.query : '';
        if (overrideName && this.termRule.overrides) {
            for (var i = 0; i < this.termRule.overrides.length; i++) {
                if (this.termRule.overrides[i].name === overrideName) {
                    return this.termRule.overrides[i];
                }
            }
        }
        return null;
    };
    ;
    FeaturehomeComponent.prototype.deleteOverrideExpressionWithRank = function (selectedOverride, index) {
        if (confirm("Override Expression will be removed, are you sure?")) {
            var override = this.getOverride(selectedOverride);
            if (override) {
                override.expressions.splice(index, 1);
                for (var j = 0; j < override.expressions.length; j++) {
                    override.expressions[j].rank = j + 1;
                }
            }
            this.saveTerm();
        }
        else {
        }
    };
    ;
    FeaturehomeComponent.prototype.convertExpressionToFormula = function (expression) {
        console.log("convertExpressionToFormula: " + expression);
        var parts = expression.split("{");
        this.formulaSets = [];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (!!part) {
                var fields = part.split("}");
                if (fields.length > 0) {
                    var term = fields[0];
                    term = term.replace("sec:", "");
                    var nullable = false;
                    if ((term.length - 2) === term.lastIndexOf("=0")) {
                        nullable = true;
                    }
                    if (fields.length === 2) {
                        var operation = fields[1].trim();
                        term = term.replace("=0", "");
                    }
                    this.formulaSets.push({ termName: term, nullable: nullable, operation: { name: operation } });
                }
            }
        }
    };
    FeaturehomeComponent.prototype.getCurrentOverrideDetails = function () {
        var override = this.getOverride(this.overrideName.name);
        if (override) {
            this.setCurrentOverrideIndustryInformation(override);
        }
    };
    ;
    FeaturehomeComponent.prototype.getOverRides = function (event) {
        this.companyovrRideList = [];
        for (var i = 0; i < this.termRule.overrides.length; i++) {
            var cname = this.termRule.overrides[i].name;
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.companyovrRideList.push({ name: cname });
            }
        }
    };
    FeaturehomeComponent.prototype.removeTextBlock = function (index) {
        this.derivedZeroExpressionForEdit.textBlockList.splice(index, 1);
    };
    ;
    FeaturehomeComponent.prototype.addAnotherTextBlock = function () {
        var item = { expressionItem: "" };
        this.derivedZeroExpressionForEdit.textBlockList.push(item);
    };
    ;
    FeaturehomeComponent.prototype.addDerivedZeroExpression = function () {
        this.addEditDerived = true;
        this.derivedZeroExpressionForEdit = {};
        this.activeExpressionTabIndex = 0;
        this.derivedZeroExpressionForEdit.expression = "";
        this.derivedZeroExpressionForEdit.type = this.derivedZeroTypes[0];
        this.derivedZeroExpressionForEdit.textBlockList = [];
        var item = { expressionItem: "" };
        this.derivedZeroExpressionForEdit.textBlockList.push(item);
        this.derivedZeroExpressionForEdit.depTermNameList = [];
        this.derivedZeroExpressionForEdit.excTermNameList = [];
        this.divisionCount = this.completeCompanyList.length;
        this.addAnotherItem(false);
        this.addAnotherItem(true);
    };
    ;
    FeaturehomeComponent.prototype.saveNewDerivedExpression = function () {
        if (!this.termRule.derivedZeroExpressions) {
            this.termRule.derivedZeroExpressions = [];
        }
        var derivedZeroExpression = {};
        derivedZeroExpression.type = this.derivedZeroExpressionForEdit.type;
        derivedZeroExpression.rank = this.derivedZeroExpressionForEdit.rank;
        derivedZeroExpression.allTermsRequired = false;
        switch (this.derivedZeroExpressionForEdit.type) {
            case this.derivedZeroTypes[0]:
                {
                    derivedZeroExpression.expression = this.getTextBlockExpression(this.derivedZeroExpressionForEdit.textBlockList);
                    break;
                }
            case this.derivedZeroTypes[1]:
                {
                    derivedZeroExpression.allTermsRequired = this.derivedZeroExpressionForEdit.allTermsRequired;
                    var splitStr = derivedZeroExpression.allTermsRequired && derivedZeroExpression.allTermsRequired == true ? "&&" : "||";
                    derivedZeroExpression.expression = this.getTermExpression(this.derivedZeroExpressionForEdit.depTermNameList, splitStr);
                    break;
                }
            case this.derivedZeroTypes[2]:
                {
                    derivedZeroExpression.expression = this.getTermExpression(this.derivedZeroExpressionForEdit.excTermNameList, "||");
                    break;
                }
            case this.derivedZeroTypes[3]:
                {
                    var division = this.deriveddivSector.substr(0, this.deriveddivSector.indexOf('->') - 1);
                    var sector = this.deriveddivSector.substr(this.deriveddivSector.indexOf('->') + 3, this.deriveddivSector.length);
                    var sic = this.derivedindustry.substr(0, 4);
                    derivedZeroExpression.division = division;
                    derivedZeroExpression.sector = sector;
                    derivedZeroExpression.industry = sic;
                    derivedZeroExpression.expression = this.getExcludeIndustryExpression(derivedZeroExpression);
                    break;
                }
        }
        ;
        if (!derivedZeroExpression.rank) {
            derivedZeroExpression.rank = this.termRule.derivedZeroExpressions.length + 1;
            this.termRule.derivedZeroExpressions.push(derivedZeroExpression);
        }
        else {
            var index = this.derivedZeroExpressionForEdit.rank - 1;
            //console.log("Updating Expression array index : " + index);
            this.termRule.derivedZeroExpressions[index] = derivedZeroExpression;
        }
        this.activeExpressionTabIndex = 3;
        this.saveTerm();
    };
    FeaturehomeComponent.prototype.onDerivedTabChange = function (event) {
        this.activeExpressionTabIndex = event.index;
        this.derivedZeroExpressionForEdit = [];
        this.deriveddivSector = '';
        this.derivedindustry = '';
        this.filteredDerivedindustry = [];
        // this.divisionCount =0;
        // this.sectorCount = 0;
        this.derivedZeroExpressionForEdit.type = this.derivedZeroTypes[this.activeExpressionTabIndex];
        this.prepareDerivedZeroExpressionForEdit();
    };
    FeaturehomeComponent.prototype.getTermExpression = function (tnList, splitStr) {
        var exprStr = "";
        for (var i = 0; i < tnList.length; i++) {
            var exp = tnList[i].expressionItem;
            if (i === 0) {
                exprStr = this.surroundTextWith(exp, "{sec:", "}", true);
            }
            else {
                exprStr = exprStr + splitStr + this.surroundTextWith(exp, "{sec:", "}", true);
            }
        }
        return exprStr;
    };
    ;
    FeaturehomeComponent.prototype.getExcludeIndustryExpression = function (derivedZeroExpression) {
        var exp = "";
        if (derivedZeroExpression.division) {
            exp = derivedZeroExpression.division + "->" + derivedZeroExpression.sector;
        }
        if (derivedZeroExpression.industry) {
            exp = exp + " " + derivedZeroExpression.industry;
        }
        return exp;
    };
    FeaturehomeComponent.prototype.getTextBlockExpression = function (tnList) {
        var exprStr = "";
        for (var i = 0; i < tnList.length; i++) {
            var exp = tnList[i].expressionItem;
            if (i === 0) {
                exprStr = this.surroundTextWith(exp.id, "{", "}", true);
            }
            else {
                exprStr = exprStr + '||' + this.surroundTextWith(exp.id, "{", "}", true);
            }
        }
        return exprStr;
    };
    FeaturehomeComponent.prototype.addAnotherItem = function (isExclusion) {
        var item = { expressionItem: "" };
        if (isExclusion) {
            this.derivedZeroExpressionForEdit.excTermNameList.push(item);
        }
        else {
            this.derivedZeroExpressionForEdit.depTermNameList.push(item);
        }
        //console.log(this.derivedZeroExpressionForEdit.formulaList);
    };
    ;
    FeaturehomeComponent.prototype.removeDerivedTerm = function (index, isExclusion) {
        if (isExclusion) {
            this.derivedZeroExpressionForEdit.excTermNameList.splice(index, 1);
        }
        else {
            this.derivedZeroExpressionForEdit.depTermNameList.splice(index, 1);
        }
    };
    FeaturehomeComponent.prototype.prepareDerivedZeroExpressionForEdit = function () {
        var _this = this;
        switch (this.derivedZeroExpressionForEdit.type) {
            case this.derivedZeroTypes[0]:
                {
                    this.setTextBlockExpression();
                    break;
                }
            case this.derivedZeroTypes[1]:
                {
                    this.setDepTermExpression();
                    break;
                }
            case this.derivedZeroTypes[2]:
                {
                    this.setExlTermExpression();
                    break;
                }
            case this.derivedZeroTypes[3]:
                {
                    this.derivedRank = false;
                    this.divSectorList.forEach(function (obj) {
                        var name = { label: obj, value: obj };
                        _this.filteredDeriveddivSectors.push(name);
                    });
                    this.setExcludeEntitiesExpression();
                    break;
                }
        }
    };
    FeaturehomeComponent.prototype.setTextBlockExpression = function () {
        // if (!this.derivedZeroExpressionForEdit.textBlockList) {
        this.derivedZeroExpressionForEdit.textBlockList = [];
        if (!this.derivedZeroExpressionForEdit.expression) {
            this.filteredtext = [];
            this.addAnotherTextBlock();
        }
        else {
            this.filteredtext = [];
            var strArray = this.derivedZeroExpressionForEdit.expression.split("||");
            for (var i = 0; i < strArray.length; i++) {
                var itemExpression = strArray[i];
                itemExpression = itemExpression.replace("{", "");
                itemExpression = itemExpression.replace("}", "");
                var item = { 'expressionItem': itemExpression };
                this.derivedZeroExpressionForEdit.textBlockList.push(item);
                this.filteredtext.push(itemExpression);
            }
            //this.derivedZeroExpressionForEdit.expression = null;
        }
        // }
    };
    FeaturehomeComponent.prototype.setDepTermExpression = function () {
        // if (!this.derivedZeroExpressionForEdit.depTermNameList) {
        this.derivedZeroExpressionForEdit.depTermNameList = [];
        if (!this.derivedZeroExpressionForEdit.expression) {
            this.addAnotherItem(false);
        }
        else {
            var splitStr = this.derivedZeroExpressionForEdit.allTermsRequired == true ? "&&" : "||";
            var strArray = this.derivedZeroExpressionForEdit.expression.split(splitStr);
            for (var i = 0; i < strArray.length; i++) {
                var itemExpression = strArray[i];
                itemExpression = itemExpression.replace("{sec:", "");
                itemExpression = itemExpression.replace("}", "");
                var item = { expressionItem: itemExpression };
                this.derivedZeroExpressionForEdit.depTermNameList.push(item);
            }
            //this.derivedZeroExpressionForEdit.expression = null;
        }
        // }
    };
    FeaturehomeComponent.prototype.setExlTermExpression = function () {
        if (!this.derivedZeroExpressionForEdit.excTermNameList) {
            this.derivedZeroExpressionForEdit.excTermNameList = [];
            if (!this.derivedZeroExpressionForEdit.expression) {
                this.addAnotherItem(true);
            }
            else {
                var strArray = this.derivedZeroExpressionForEdit.expression.split("||");
                for (var i = 0; i < strArray.length; i++) {
                    var itemExpression = strArray[i];
                    itemExpression = itemExpression.replace("{sec:", "");
                    itemExpression = itemExpression.replace("}", "");
                    var item = { expressionItem: itemExpression };
                    this.derivedZeroExpressionForEdit.excTermNameList.push(item);
                }
                // this.derivedZeroExpressionForEdit.expression = null;
            }
        }
    };
    FeaturehomeComponent.prototype.setExcludeEntitiesExpression = function () {
        var _this = this;
        if (this.derivedZeroExpressionForEdit.division && this.derivedZeroExpressionForEdit.sector) {
            var divSec = {
                "division": this.derivedZeroExpressionForEdit.division,
                "sector": this.derivedZeroExpressionForEdit.sector
            };
            this.filteredDerivedindustry = [];
            this.setExcDivSec(this.derivedZeroExpressionForEdit.division, this.derivedZeroExpressionForEdit.sector);
            if (this.derivedZeroExpressionForEdit.sector && this.derivedZeroExpressionForEdit.industry)
                this.deriveddivSector = this.derivedZeroExpressionForEdit.division + ' -> ' + this.derivedZeroExpressionForEdit.sector;
            this.filteredDerivedindustry.forEach(function (obj) {
                var sic = obj.label.substr(0, 4);
                if (sic === _this.derivedZeroExpressionForEdit.industry) {
                    _this.derivedindustry = obj.label;
                }
            });
            // this.derivedindustry = this.derivedZeroExpressionForEdit.industry + ' - ' + this.derivedZeroExpressionForEdit.sector;
            if (!this.excludeEntitiesFilter)
                this.excludeEntitiesFilter = {};
            this.excludeEntitiesFilter.sic = this.derivedZeroExpressionForEdit.industry;
        }
        else {
            this.excludeEntitiesFilter = {};
        }
    };
    FeaturehomeComponent.prototype.setExcDivSec = function (division, sector) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredDerivedindustry.push(name);
        });
        this.divisionCount = this.completeEntities.length;
        if (this.derivedZeroExpressionForEdit.industry) {
            var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === _this.derivedZeroExpressionForEdit.industry; });
            this.industryCount = completeEntities.length;
        }
    };
    FeaturehomeComponent.prototype.processTermForEntity = function (rowdata) {
        var _this = this;
        //console.log("Process rule " + $scope.rule.termId + " with token " + $scope.csrfToken + " for entity: " + entityId);
        this.progressSpinner = true;
        this.msgs = [{ severity: 'info', summary: 'Started processing for ' + this.termName, detail: '' }];
        this.utilService.processTerms(this.termRule.termId, rowdata.entityId, null).subscribe(function (response) {
            if (!response.data) {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Term processing for' + _this.termName, detail: ' processed successfully' }];
                _this.progressSpinner = false;
            }
            else {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Process Term Rule failed' + _this.termName, detail: '' }];
                _this.progressSpinner = false;
            }
        }, function (err) {
        });
    };
    FeaturehomeComponent.prototype.yearChange = function (event) {
        this.startYear = this.range[0];
        this.endYear = this.range[1];
        sessionStorage.setItem('home.range', JSON.stringify(event.values));
    };
    FeaturehomeComponent.prototype.showDerivationTree = function () {
        var _this = this;
        this.homeService.getTermRule(this.termId).subscribe(function (response) {
            _this.modalExpTableData = response;
            _this.modalExpTableList = response.expressions;
            _this.homeService.getRuleGraph(_this.termId).subscribe(function (response) {
                _this.derivationTreeRes = response;
                response.forEach(function (item) {
                    item.name = item.name.replace(' ( - )', '').replace(' ( + )', '');
                });
                var newRes = [];
                if (response.length > 0) {
                    newRes.push({
                        data: response.find(function (item) { return item.parent === null; }),
                        children: []
                    });
                }
                if (newRes && newRes.length > 0) {
                    newRes.forEach(function (eachItem) {
                        var result = response.filter(function (obj) {
                            return obj.parent === eachItem.data.id;
                        });
                        eachItem.data['hasChildren'] = result.length > 0 ? true : false;
                        result.forEach(function (item) {
                            eachItem.children.push({
                                data: item,
                                children: []
                            });
                        });
                        if (eachItem.children.length > 0) {
                            eachItem.children.forEach(function (child1) {
                                var result = response.filter(function (obj) {
                                    return obj.parent === child1.data.id;
                                });
                                child1.data['hasChildren'] = result.length > 0 ? true : false;
                                result.forEach(function (newItem) {
                                    child1.children.push({
                                        data: newItem,
                                        children: []
                                    });
                                });
                                if (child1.children.length > 0) {
                                    child1.children.forEach(function (child2) {
                                        var result = response.filter(function (obj) {
                                            return obj.parent === child2.data.id;
                                        });
                                        child2.data['hasChildren'] = result.length > 0 ? true : false;
                                        result.forEach(function (newItem) {
                                            child2.children.push({
                                                data: newItem,
                                                children: []
                                            });
                                        });
                                        if (child2.children.length > 0) {
                                            child2.children.forEach(function (child3) {
                                                var result = response.filter(function (obj) {
                                                    return obj.parent === child3.data.id;
                                                });
                                                child3.data['hasChildren'] = result.length > 0 ? true : false;
                                                result.forEach(function (newItem) {
                                                    child3.children.push({
                                                        data: newItem,
                                                        children: []
                                                    });
                                                });
                                                if (child3.children.length > 0) {
                                                    child3.children.forEach(function (child4) {
                                                        var result = response.filter(function (obj) {
                                                            return obj.parent === child4.data.id;
                                                        });
                                                        child4.data['hasChildren'] = result.length > 0 ? true : false;
                                                        result.forEach(function (newItem) {
                                                            child4.children.push({
                                                                data: newItem,
                                                                children: []
                                                            });
                                                        });
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
                _this.treeData = { data: newRes };
                _this.displayTermTreeModal = true;
            });
        });
    };
    FeaturehomeComponent.prototype.nodeUpdated = function (node) {
        console.info("app detected node change");
    };
    FeaturehomeComponent.prototype.nodeSelected = function (node) {
        var _this = this;
        if (!node.children) {
            this.homeService.getTermRule(node.data.childId).subscribe(function (response) {
                _this.modalExpTableList = response.expressions;
            });
        }
    };
    FeaturehomeComponent.prototype.showTermRuleResultnavigateTree = function (event, data) {
        var _this = this;
        if (data !== undefined) {
            event.preventDefault();
            var term = 'LSE';
            if ((data && data.childId)) {
                term = data.childId;
            }
            else {
                term = data.name;
            }
            this.selectedTreeNode = data;
            this.homeService.getTermRule(term).subscribe(function (response) {
                _this.modalExpTableData = response;
                _this.modalExpTableList = response.expressions;
            });
        }
    };
    FeaturehomeComponent.prototype.showTermRuleResultnavigate = function (event, data) {
        var _this = this;
        if (data !== undefined) {
            event.preventDefault();
            var term = this.getTermIdFromTermName(data);
            this.homeService.getTermRule(term).subscribe(function (response) {
                _this.modalExpTableData = response;
                _this.modalExpTableList = response.expressions;
            });
        }
    };
    FeaturehomeComponent.prototype.minimizeModal = function (i) {
        var minimizeCount = undefined;
        var minimizeItems = 0;
        ;
        this.showTermResultsWindowMinimize[i] = true;
        this.minimizeArray.forEach(function (item, index) {
            if (!item && (minimizeCount === undefined)) {
                minimizeCount = index;
            }
            if (item) {
                minimizeItems = minimizeItems + 1;
            }
        });
        var defaultWidth = (window.innerWidth / (minimizeItems + 1));
        for (var j = 0; j < this.entityList.length; j++) {
            if (!this.minimizeArray[j]) {
                this.minimizeArray[j] = this.entityList[i].id;
                break;
            }
        }
        // this.el.nativeElement.getElementsByClassName('modal' + i)[0].style.left = (+(i.toString().slice(i.toString().length - 1, i.toString().length)) * 190) + 'px';
        this.el.nativeElement.getElementsByClassName('modal' + i)[0].style.left = (minimizeCount * 190) + 'px';
        this.el.nativeElement.getElementsByClassName('modal' + i)[0].style.transform = 'translate(0px, 0px)';
        this.minimizeWidth = defaultWidth + 'px';
    };
    FeaturehomeComponent.prototype.maximizeModal = function (i) {
        var _this = this;
        this.showTermResultsWindowMinimize[i] = false;
        var removeIndex = this.minimizeArray.findIndex(function (item) { return item === _this.entityList[i].id; });
        this.minimizeArray[removeIndex] = null;
        this.el.nativeElement.getElementsByClassName('modal' + i)[0].style.left = '0px';
        this.el.nativeElement.getElementsByClassName('modal' + i)[0].style.transform = 'translate(0px, 0px)';
        this.el.nativeElement.getElementsByClassName('modal' + i)[0].style.width = 'auto';
    };
    FeaturehomeComponent.prototype.close = function (i) {
        var _this = this;
        var removeIndex = this.minimizeArray.findIndex(function (item) { return item === _this.entityList[i].id; });
        if (removeIndex > -1) {
            this.minimizeArray[removeIndex] = null;
        }
        this.showTermResultsWindow[i] = false;
        this.showTermResultsWindowMinimize[i] = false;
    };
    // Home page tour
    FeaturehomeComponent.prototype.stepDone = function () {
        var _this = this;
        setTimeout(function () {
            _this.title = 'Tour Finished!';
            _this.tour = false;
            _this.termId = '';
            _this.displayTerms = false;
            _this.displayGetCoverage = false;
            console.log('Step done!');
        }, 3000);
    };
    FeaturehomeComponent.prototype.startTour = function () {
        var _this = this;
        var options = {
            steps: [
                'step1@home',
                'step2@home',
                'step3@home',
                'step4@home',
                'step5@home',
                'step6@home',
                'step7@home',
                'step8@home',
                'step9@home',
                'step10@home',
                'step11@home',
                'step12@home',
                'step13@home',
                'step14@home',
                'step15@home',
                'step16@home',
                'step17@home',
                // 'step14@home',
                // 'step15@home',
                // 'step16@home',
                // 'step17@home',
                'step18@home',
                'step19@home',
                'step20@home',
                'step21@home',
                'step22@home',
                'step23@home',
                'step24@home',
                'step25@home',
            ],
            // startWith: 'step3@app',
            // waitingTime: 3000,
            stepDefaultPosition: 'right',
            themeColor: '#345632',
            showPrevButton: true,
            logsEnabled: false
            // customTexts: { prev: of('<<').pipe(delay(2000)), next: '>>'}
        };
        this.joyrideService.startTour(options).subscribe(function (step) {
            console.log('Next:', step);
            if (step.name === 'step13' || step.name === 'step14' || step.name === 'step15' || step.name === 'step16' || step.name === 'step17') {
                _this.processnow = true;
            }
            else {
                _this.processnow = false;
            }
            if (step.name === 'step1') {
                _this.termId = 'SALE';
                _this.displayTerms = true;
                _this.displayGetCoverage = true;
            }
        }, function (e) {
            console.log('Error', e);
        }, function () {
            _this.stepDone();
            // this.tour = false;
            // this.termId = '';
            //   this.displayTerms = false;
            //   this.displayGetCoverage = false;
            console.log('Tour finished');
        });
    };
    FeaturehomeComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-featurehome',
            template: __webpack_require__(/*! ./featurehome.component.html */ "./src/app/featurehome/featurehome.component.html"),
            styles: [__webpack_require__(/*! ./featurehome.component.css */ "./src/app/featurehome/featurehome.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_home_homeService__WEBPACK_IMPORTED_MODULE_2__["HomeService"], app_app_component__WEBPACK_IMPORTED_MODULE_3__["AppComponent"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], app_domain_home__WEBPACK_IMPORTED_MODULE_6__["Home"], app_utils_utilService__WEBPACK_IMPORTED_MODULE_7__["UtilService"], app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_9__["MappedEntity"], app_domain_termRule__WEBPACK_IMPORTED_MODULE_8__["TermRule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],
            primeng_api__WEBPACK_IMPORTED_MODULE_5__["ConfirmationService"], app_domain_editExpression__WEBPACK_IMPORTED_MODULE_10__["EditExpression"], _ng_idle_core__WEBPACK_IMPORTED_MODULE_11__["Idle"], _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_12__["Keepalive"], app_services_login_service__WEBPACK_IMPORTED_MODULE_13__["LoginService"], ngx_joyride__WEBPACK_IMPORTED_MODULE_14__["JoyrideService"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"]])
    ], FeaturehomeComponent);
    return FeaturehomeComponent;
}());



/***/ }),

/***/ "./src/app/featurehome/highlight.pipe.ts":
/*!***********************************************!*\
  !*** ./src/app/featurehome/highlight.pipe.ts ***!
  \***********************************************/
/*! exports provided: HighlightPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HighlightPipe", function() { return HighlightPipe; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var HighlightPipe = /** @class */ (function () {
    function HighlightPipe() {
    }
    HighlightPipe.prototype.transform = function (text, search) {
        if (search) {
            var pattern = search
                .replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
                .split(' ')
                .filter(function (t) { return t.length > 0; })
                .join('|');
            var regex = new RegExp(pattern, 'gi');
            return (search && text) ? text.replace(regex, function (match) { return "<b class=\"bg-searched-latter\">" + match + "</b>"; }) :
                text;
        }
        else {
            return text;
        }
    };
    HighlightPipe = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({ name: 'highlight' })
    ], HighlightPipe);
    return HighlightPipe;
}());



/***/ }),

/***/ "./src/app/featurehome/resizable.directive.ts":
/*!****************************************************!*\
  !*** ./src/app/featurehome/resizable.directive.ts ***!
  \****************************************************/
/*! exports provided: ResizableDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizableDirective", function() { return ResizableDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");


var ResizableDirective = /** @class */ (function () {
    function ResizableDirective(el) {
        var _this = this;
        this.el = el;
        this.resizableGrabWidth = 4;
        this.resizableMinWidth = 4;
        this.dragging = false;
        var self = this;
        var EventListenerMode = { capture: true };
        function preventGlobalMouseEvents() {
            document.body.style['pointer-events'] = 'none';
        }
        function restoreGlobalMouseEvents() {
            document.body.style['pointer-events'] = 'auto';
        }
        var newWidth = function (wid) {
            var newWidth = Math.max(_this.resizableMinWidth, wid);
            el.nativeElement.style.width = (newWidth) + "px";
        };
        var mouseMoveG = function (evt) {
            if (!_this.dragging) {
                return;
            }
            newWidth(evt.clientX - el.nativeElement.offsetLeft);
            evt.stopPropagation();
        };
        var dragMoveG = function (evt) {
            if (!_this.dragging) {
                return;
            }
            var newWidth = Math.max(_this.resizableMinWidth, (evt.clientX - el.nativeElement.offsetLeft)) + "px";
            el.nativeElement.style.width = (evt.clientX - el.nativeElement.offsetLeft) + "px";
            evt.stopPropagation();
        };
        var mouseUpG = function (evt) {
            if (!_this.dragging) {
                return;
            }
            restoreGlobalMouseEvents();
            _this.dragging = false;
            evt.stopPropagation();
        };
        var mouseDown = function (evt) {
            if (_this.inDragRegion(evt)) {
                _this.dragging = true;
                preventGlobalMouseEvents();
                evt.stopPropagation();
            }
        };
        var mouseMove = function (evt) {
            if (_this.inDragRegion(evt) || _this.dragging) {
                el.nativeElement.style.cursor = "col-resize";
            }
            else {
                el.nativeElement.style.cursor = "default";
            }
        };
        document.addEventListener('mousemove', mouseMoveG, true);
        document.addEventListener('mouseup', mouseUpG, true);
        el.nativeElement.addEventListener('mousedown', mouseDown, true);
        el.nativeElement.addEventListener('mousemove', mouseMove, true);
    }
    ResizableDirective.prototype.ngOnInit = function () {
        this.el.nativeElement.style["border-right"] = this.resizableGrabWidth + "px solid darkgrey";
    };
    ResizableDirective.prototype.inDragRegion = function (evt) {
        return this.el.nativeElement.clientWidth - evt.clientX + this.el.nativeElement.offsetLeft < this.resizableGrabWidth;
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ResizableDirective.prototype, "resizableGrabWidth", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ResizableDirective.prototype, "resizableMinWidth", void 0);
    ResizableDirective = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
            selector: '[appResizable]'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
    ], ResizableDirective);
    return ResizableDirective;
}());



/***/ }),

/***/ "./src/app/header/header.component.css":
/*!*********************************************!*\
  !*** ./src/app/header/header.component.css ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".menuItem{\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n  margin-left: 20px;\r\n  margin-right: 20spx;\r\n  font-size: 20px;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: whitesmoke;\r\n  \r\n\r\n}\r\n\r\n.dropdownMenuItem{\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n  font-size: 20px;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: whitesmoke;\r\n}\r\n\r\n.welcome{\r\nfont-size: 20px;\r\nfont-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\ncolor: whitesmoke;\r\n}\r\n\r\n.navbar\r\n{\r\ncolor: blue;\r\n}\r\n\r\n::ng-deep .logo-name {\r\n  margin: 0px;;\r\n}\r\n\r\n::ng-deep .logo-name:hover {\r\n  text-decoration: none;\r\n\r\n}\r\n\r\n.notifictaion {\r\n  height: 20px;\r\n  width: 20px;\r\n  border-radius: 10px;\r\n  border: 1px solid transparent;\r\n  background-color: #ffffff;\r\n  position: relative;\r\n  right: 20px;\r\n  color: #000000;\r\n  display: inline-block;\r\n  text-align: center;\r\n  font-size: 14px;\r\n  bottom: 9px;\r\n  z-index: 5;\r\n}\r\n\r\n.onoffswitch {\r\n  display: inline-block;\r\n  position: relative; \r\n  width: 90px;\r\n  margin-top: 8px;\r\n    margin-left: 10px;\r\n  -webkit-user-select:none; -moz-user-select:none; -ms-user-select: none;\r\n}\r\n\r\n.onoffswitch-checkbox {\r\n  position: absolute;\r\n  opacity: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.onoffswitch-label {\r\n  display: block; overflow: hidden; cursor: pointer;\r\n  border: 2px solid #999999; border-radius: 20px;\r\n}\r\n\r\n.onoffswitch-inner {\r\n  display: block; width: 200%; margin-left: -100%;\r\n  transition: margin 0.3s ease-in 0s;\r\n  text-align: left;\r\n}\r\n\r\n.onoffswitch-inner:before, .onoffswitch-inner:after {\r\n  display: block; float: left; width: 50%; height: 30px; padding: 0; line-height: 30px;\r\n  font-size: 14px; color: white; font-family: Trebuchet, Arial, sans-serif; font-weight: bold;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.onoffswitch-inner:before {\r\n  content: \"ON\";\r\n  padding-left: 10px;\r\n  background-color: #EDEFF0; color: #21579C;\r\n}\r\n\r\n.onoffswitch-inner:after {\r\n  content: \"OFF\";\r\n  padding-right: 10px;\r\n  background-color: #EEEEEE; color: #999999;\r\n  text-align: right;\r\n}\r\n\r\n.onoffswitch-switch {\r\n  display: block; width: 18px; height: 18px; margin: 6px;\r\n  background: #21579C;\r\n  position: absolute; top: 2px; bottom: 0;\r\n  right: 56px;\r\n  border: 2px solid #999999; border-radius: 20px;\r\n  transition: all 0.3s ease-in 0s; \r\n}\r\n\r\n.onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-inner {\r\n  margin-left: 0;\r\n}\r\n\r\n.onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-switch {\r\n  right: 0px; \r\n}\r\n\r\n.font-weight-bold {\r\n  font-weight: bold !important;\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZiw0REFBNEQ7RUFDNUQsaUJBQWlCOzs7QUFHbkI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLDREQUE0RDtFQUM1RCxpQkFBaUI7QUFDbkI7O0FBRUE7QUFDQSxlQUFlO0FBQ2YsNERBQTREO0FBQzVELGlCQUFpQjtBQUNqQjs7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxxQkFBcUI7O0FBRXZCOztBQUNBO0VBQ0UsWUFBWTtFQUNaLFdBQVc7RUFDWCxtQkFBbUI7RUFDbkIsNkJBQTZCO0VBQzdCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLGNBQWM7RUFDZCxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixXQUFXO0VBQ1gsVUFBVTtBQUNaOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsZUFBZTtJQUNiLGlCQUFpQjtFQUNuQix3QkFBd0IsRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUI7QUFDeEU7O0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLG9CQUFvQjtBQUN0Qjs7QUFDQTtFQUNFLGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlO0VBQ2pELHlCQUF5QixFQUFFLG1CQUFtQjtBQUNoRDs7QUFDQTtFQUNFLGNBQWMsRUFBRSxXQUFXLEVBQUUsa0JBQWtCO0VBQy9DLGtDQUFrQztFQUNsQyxnQkFBZ0I7QUFDbEI7O0FBQ0E7RUFDRSxjQUFjLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLGlCQUFpQjtFQUNwRixlQUFlLEVBQUUsWUFBWSxFQUFFLHlDQUF5QyxFQUFFLGlCQUFpQjtFQUMzRixzQkFBc0I7QUFDeEI7O0FBQ0E7RUFDRSxhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLHlCQUF5QixFQUFFLGNBQWM7QUFDM0M7O0FBQ0E7RUFDRSxjQUFjO0VBQ2QsbUJBQW1CO0VBQ25CLHlCQUF5QixFQUFFLGNBQWM7RUFDekMsaUJBQWlCO0FBQ25COztBQUNBO0VBQ0UsY0FBYyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsV0FBVztFQUN0RCxtQkFBbUI7RUFDbkIsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLFNBQVM7RUFDdkMsV0FBVztFQUNYLHlCQUF5QixFQUFFLG1CQUFtQjtFQUM5QywrQkFBK0I7QUFDakM7O0FBQ0E7RUFDRSxjQUFjO0FBQ2hCOztBQUNBO0VBQ0UsVUFBVTtBQUNaOztBQUVBO0VBQ0UsNEJBQTRCO0FBQzlCIiwiZmlsZSI6InNyYy9hcHAvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1lbnVJdGVte1xyXG4gIG1hcmdpbi10b3A6IDVweDtcclxuICBtYXJnaW4tYm90dG9tOiA1cHg7XHJcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAyMHNweDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgZm9udC1mYW1pbHk6ICdTZWdvZSBVSScsIFRhaG9tYSwgR2VuZXZhLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xyXG4gIGNvbG9yOiB3aGl0ZXNtb2tlO1xyXG4gIFxyXG5cclxufVxyXG5cclxuLmRyb3Bkb3duTWVudUl0ZW17XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMTBweDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgZm9udC1mYW1pbHk6ICdTZWdvZSBVSScsIFRhaG9tYSwgR2VuZXZhLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xyXG4gIGNvbG9yOiB3aGl0ZXNtb2tlO1xyXG59XHJcblxyXG4ud2VsY29tZXtcclxuZm9udC1zaXplOiAyMHB4O1xyXG5mb250LWZhbWlseTogJ1NlZ29lIFVJJywgVGFob21hLCBHZW5ldmEsIFZlcmRhbmEsIHNhbnMtc2VyaWY7XHJcbmNvbG9yOiB3aGl0ZXNtb2tlO1xyXG59XHJcbi5uYXZiYXJcclxue1xyXG5jb2xvcjogYmx1ZTtcclxufVxyXG5cclxuOjpuZy1kZWVwIC5sb2dvLW5hbWUge1xyXG4gIG1hcmdpbjogMHB4OztcclxufVxyXG5cclxuOjpuZy1kZWVwIC5sb2dvLW5hbWU6aG92ZXIge1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuXHJcbn1cclxuLm5vdGlmaWN0YWlvbiB7XHJcbiAgaGVpZ2h0OiAyMHB4O1xyXG4gIHdpZHRoOiAyMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgcmlnaHQ6IDIwcHg7XHJcbiAgY29sb3I6ICMwMDAwMDA7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgYm90dG9tOiA5cHg7XHJcbiAgei1pbmRleDogNTtcclxufVxyXG5cclxuLm9ub2Zmc3dpdGNoIHtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlOyBcclxuICB3aWR0aDogOTBweDtcclxuICBtYXJnaW4tdG9wOiA4cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcclxuICAtd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7IC1tb3otdXNlci1zZWxlY3Q6bm9uZTsgLW1zLXVzZXItc2VsZWN0OiBub25lO1xyXG59XHJcbi5vbm9mZnN3aXRjaC1jaGVja2JveCB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIG9wYWNpdHk6IDA7XHJcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbn1cclxuLm9ub2Zmc3dpdGNoLWxhYmVsIHtcclxuICBkaXNwbGF5OiBibG9jazsgb3ZlcmZsb3c6IGhpZGRlbjsgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkICM5OTk5OTk7IGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbn1cclxuLm9ub2Zmc3dpdGNoLWlubmVyIHtcclxuICBkaXNwbGF5OiBibG9jazsgd2lkdGg6IDIwMCU7IG1hcmdpbi1sZWZ0OiAtMTAwJTtcclxuICB0cmFuc2l0aW9uOiBtYXJnaW4gMC4zcyBlYXNlLWluIDBzO1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbn1cclxuLm9ub2Zmc3dpdGNoLWlubmVyOmJlZm9yZSwgLm9ub2Zmc3dpdGNoLWlubmVyOmFmdGVyIHtcclxuICBkaXNwbGF5OiBibG9jazsgZmxvYXQ6IGxlZnQ7IHdpZHRoOiA1MCU7IGhlaWdodDogMzBweDsgcGFkZGluZzogMDsgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgZm9udC1zaXplOiAxNHB4OyBjb2xvcjogd2hpdGU7IGZvbnQtZmFtaWx5OiBUcmVidWNoZXQsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXdlaWdodDogYm9sZDtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcbi5vbm9mZnN3aXRjaC1pbm5lcjpiZWZvcmUge1xyXG4gIGNvbnRlbnQ6IFwiT05cIjtcclxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI0VERUZGMDsgY29sb3I6ICMyMTU3OUM7XHJcbn1cclxuLm9ub2Zmc3dpdGNoLWlubmVyOmFmdGVyIHtcclxuICBjb250ZW50OiBcIk9GRlwiO1xyXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI0VFRUVFRTsgY29sb3I6ICM5OTk5OTk7XHJcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbn1cclxuLm9ub2Zmc3dpdGNoLXN3aXRjaCB7XHJcbiAgZGlzcGxheTogYmxvY2s7IHdpZHRoOiAxOHB4OyBoZWlnaHQ6IDE4cHg7IG1hcmdpbjogNnB4O1xyXG4gIGJhY2tncm91bmQ6ICMyMTU3OUM7XHJcbiAgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDJweDsgYm90dG9tOiAwO1xyXG4gIHJpZ2h0OiA1NnB4O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkICM5OTk5OTk7IGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbiAwczsgXHJcbn1cclxuLm9ub2Zmc3dpdGNoLWNoZWNrYm94OmNoZWNrZWQgKyAub25vZmZzd2l0Y2gtbGFiZWwgLm9ub2Zmc3dpdGNoLWlubmVyIHtcclxuICBtYXJnaW4tbGVmdDogMDtcclxufVxyXG4ub25vZmZzd2l0Y2gtY2hlY2tib3g6Y2hlY2tlZCArIC5vbm9mZnN3aXRjaC1sYWJlbCAub25vZmZzd2l0Y2gtc3dpdGNoIHtcclxuICByaWdodDogMHB4OyBcclxufVxyXG5cclxuLmZvbnQtd2VpZ2h0LWJvbGQge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XHJcbn1cclxuIl19 */"

/***/ }),

/***/ "./src/app/header/header.component.html":
/*!**********************************************!*\
  !*** ./src/app/header/header.component.html ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nav class=\"navbar navbar-light mb-2 bg-secondary text-primary\" style=\"padding: 20px 15px 15px; min-height: 80px;\">\r\n  <div style=\"display: grid;margin-top: 4px; position: absolute; left: 15px\">\r\n    <div>\r\n      <p class=\"pull-left logo-name\" style=\"font-size: 32px; font-weight: bold;\r\n      line-height: 24px; color: #ffffff;\" title=\"MAXDS \"><span aria-hidden=\"true\"></span>\r\n        <span (click)=\"goToHome()\" style=\"cursor: pointer;\">MAXDS on ACES</span></p>\r\n    </div>\r\n    <div style=\"font-size: 14px; font-weight: normal; color: #ffffff;\">Multiple Application XBRL Delivery System\r\n    </div>\r\n  </div>\r\n  <div style=\" position: absolute; left: 280px; \">\r\n    <ul style=\"list-style: none; \" class=\"pull-left\">\r\n      <!-- <li style=\"display: inline;\">\r\n      <img class=\"pull-left\" src=\"../assets/images/sec_logo copy.jpg\" style=\"border-radius: 25px;\" height=\"50\"\r\n        width=\"50\">\r\n    </li> -->\r\n\r\n\r\n      <li style=\"display: inline;\">\r\n        <a class=\"pull-left menuItem\" routerLink=\"/home\" title=\" Home\">\r\n          Home </a>\r\n      </li>\r\n\r\n      <li style=\"display: inline;\">\r\n        <a class=\"pull-left menuItem\" routerLink=\"/export\" title=\"Export\">\r\n          Export</a>\r\n      </li>\r\n\r\n      <li style=\"display: inline; \">\r\n        <a class=\"pull-left menuItem\" routerLink=\"/accuracyTest\" title=\"Accuracy test\">\r\n          Accuracy test</a>\r\n      </li>\r\n      <li style=\"display: inline; \" >\r\n        <a class=\"pull-left menuItem\" routerLink=\"/processTerm\" title=\"Process Terms\">\r\n          Process Terms</a>\r\n      </li>\r\n\r\n      <li style=\"display: inline; \">\r\n        <a class=\"pull-left menuItem\" routerLink=\"/manageTerm\" title=\"Manage Term Maps\">\r\n          Manage Term Maps</a>\r\n      </li>\r\n\r\n      <li style=\"display: inline; \">\r\n        <a class=\"pull-left menuItem\" routerLink=\"/status\" title=\"Status\">\r\n          Status</a>\r\n      </li>\r\n\r\n      <!-- <li style=\"display: inline; \" *ngIf=\"isAdmin\"> -->\r\n      <li style=\"display: inline; \">\r\n        <a class=\"pull-left menuItem\" routerLink=\"/admin\" title=\"Administration\">\r\n          Administration</a>\r\n      </li>\r\n      <li style=\"display: inline; \">\r\n        <a routerLink=\"/submit\" class=\"pull-left menuItem\" title=\"Submit Feedback\">\r\n          Submit Feedback </a>\r\n      </li>\r\n      <li style=\"display: inline;\">\r\n        <a class=\"pull-left menuItem\" href=\"https://confluence.ad.sec.gov/display/DOS/SEC_MAXDS_User_Guide\"\r\n          target=\"_blank\" title=\"help\">\r\n          Help</a>\r\n      </li>\r\n\r\n      <!-- <li style=\"display: inline; \">\r\n      <a routerLink=\"/featurehome\" class=\"pull-left menuItem\" title=\"Next Home\">\r\n        Next Home </a>\r\n    </li> -->\r\n\r\n\r\n    </ul>\r\n  </div>\r\n  <div class=\"col-lg-3 p-0\" style=\"text-align: right; position: absolute; right: 0px;\">\r\n    <a class=\"pull-left menuItem\" style=\"margin-top: 10px;\" href=\"javascript:void(0)\">\r\n      Tour</a>\r\n    <span class=\"pull-left onoffswitch\" joyrideStep=\"startTour\" stepPosition=\"bottom\"\r\n      title=\"MAXDS Tour: {{currentPage}}\" [stepContent]=\"customContent\" [prevTemplate]=\"prevButton\"\r\n      [nextTemplate]=\"nextButton\" [doneTemplate]=\"doneButton\" [counterTemplate]=\"counter\">\r\n      <input type=\"checkbox\" name=\"onoffswitch\" class=\"onoffswitch-checkbox\" id=\"myonoffswitch\"\r\n        [(ngModel)]=\"startTourCheck\" tabindex=\"0\" (change)=\"startTour()\">\r\n      <label class=\"onoffswitch-label\" for=\"myonoffswitch\">\r\n        <span class=\"onoffswitch-inner\"></span>\r\n        <span class=\"onoffswitch-switch\"></span>\r\n      </label>\r\n    </span>\r\n\r\n    <label class=\"welcome\">Hello</label> <label class=\"welcome\" style=\"margin: 2px;\">&nbsp;{{userFullName}} </label>\r\n\r\n    <!-- <span>\r\n      <a routerLink=\"/profile\" title=\"Profile\" class=\"bg-secondary text-white dropdownMenuItem\">\r\n        <button class=\"btn bg-secondary text-white\" type=\"button\" data-toggle=\"dropdown\">\r\n          <span class=\"glyphicon glyphicon-user\" style=\"font-size: 30px;\"></span>\r\n        </button>\r\n      </a>\r\n    </span>\r\n\r\n    <span>\r\n      <a routerLink=\"/logout\" title=\"Log Off\" class=\"bg-secondary text-white\">\r\n        <button class=\"btn bg-secondary text-white\" type=\"button\" data-toggle=\"dropdown\">\r\n          <span class=\"glyphicon glyphicon-log-out\" style=\"font-size: 30px; margin-left: 10px;\"></span>\r\n        </button>\r\n      </a>\r\n    </span> -->\r\n\r\n    <span class=\"dropdown\">\r\n      <button class=\"btn bg-secondary text-white dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\r\n        <span class=\"glyphicon glyphicon-user\" style=\"font-size: 30px;\"></span>\r\n      </button>\r\n\r\n      <ul class=\"dropdown-menu bg-secondary text-white  pull-right\">\r\n        <li class=\"bg-secondary text-white\">\r\n          <a routerLink=\"/profile\" title=\"Profile\" class=\"bg-secondary text-white dropdownMenuItem\">\r\n            Profile</a>\r\n          <a routerLink=\"/logout\" title=\"Log Off\" class=\"bg-secondary text-white dropdownMenuItem\"><span\r\n              class=\"glyphicon glyphicon-log-out\"></span>\r\n            Logoff</a>\r\n        </li>\r\n      </ul>\r\n    </span>\r\n\r\n    <span class=\"dropdown\" *ngIf=\"notifications && (notifications.length > 0)\">\r\n      <button class=\"btn bg-secondary text-white dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\r\n        <span class=\"glyphicon glyphicon-envelope\" style=\"font-size: 30px; margin-left: 10px;\"></span>\r\n      </button>\r\n\r\n      <ul class=\"dropdown-menu bg-secondary text-white  pull-right\">\r\n        <li class=\"bg-secondary text-white\">\r\n          <a (click)=\"goToProfile()\" href=\"javascript:void(0)\" *ngFor=\"let notification of notifications\"\r\n            title=\"Profile\" class=\"bg-secondary text-white font-weight-bold\">\r\n            {{notification.data.preferenceName.split('(')[1].slice(0, notification.data.preferenceName.split('(')[1].length - 1 )}}\r\n            has\r\n            {{notification.data.preferenceName.split('(')[0].slice(0, notification.data.preferenceName.split('(')[1].length - 1 )}}\r\n            of {{notification.data.companyName}}</a>\r\n        </li>\r\n      </ul>\r\n    </span>\r\n    <div class=\"notifictaion\" *ngIf=\"notifications && (notifications.length > 0)\">{{notifications.length}}</div>\r\n\r\n\r\n  </div>\r\n</nav>\r\n\r\n\r\n\r\n<ng-template #customContent>\r\n  <h3 class=\"popover-title p-10\">Welcome to a guided tour of the MAXDS {{currentPage}}</h3>\r\n  <div style=\"padding: 0px 13px 15px 13px\">\r\n    <div>\r\n      <div>This tour will help guide you through the basic features of the MAXDS {{currentPage}} Page</div>\r\n      <div *ngIf=\"currentPage === 'home'\">\r\n        <div>Manage Term Rules – Expressions to Resolve Term Rules and Validate Term Rules</div>\r\n        <div>To manage term rule expressions and validations, there are three main panels: list term rules, list term\r\n          details & expressions, expression builder.</div>\r\n      </div>\r\n      <div *ngIf=\"currentPage === 'profile'\">\r\n        <div>The Profile consists of user preferences saved to perform processing multiple times or share preferences\r\n          among other users.</div>\r\n        <div>It also provides the ability to add, delete and clear preferences.</div>\r\n      </div>\r\n\r\n      <div>Use the <i class=\"glyphicon glyphicon-backward\"></i> <b> Prev</b> and <b>Next </b> <i\r\n          class=\"glyphicon glyphicon-forward\"></i> buttons to navigate through the tour. </div>\r\n      <div> Please select <b>Next </b> <i class=\"glyphicon glyphicon-forward\"></i> button to begin the tour.</div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #prevButton>\r\n  <button class=\"btn btn-sm btn-guided-tour\" data-role=\"prev\" aria-label=\"Prev\" style=\"margin-right:10px;\"><i\r\n      class=\"glyphicon glyphicon-backward\"></i>&nbsp;Prev</button>\r\n</ng-template>\r\n<ng-template #nextButton>\r\n  <button class=\"btn btn-sm btn-guided-tour\" data-role=\"next\" aria-label=\"Next\">Next&nbsp;<i\r\n      class=\"glyphicon glyphicon-forward\"></i></button>\r\n</ng-template>\r\n<ng-template #doneButton>\r\n  <button class=\"btn btn-sm btn-warning\" data-role=\"end\" aria-label=\"End tour\">End tour</button>\r\n</ng-template>\r\n"

/***/ }),

/***/ "./src/app/header/header.component.ts":
/*!********************************************!*\
  !*** ./src/app/header/header.component.ts ***!
  \********************************************/
/*! exports provided: HeaderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderComponent", function() { return HeaderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var app_services_login_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/services/login.service */ "./src/app/services/login.service.ts");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var app_services_common_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/services/common.service */ "./src/app/services/common.service.ts");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var ngx_joyride__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-joyride */ "./node_modules/ngx-joyride/fesm5/ngx-joyride.js");









var HeaderComponent = /** @class */ (function () {
    function HeaderComponent(login, location, activatedRoute, router, joyrideService, utilService, commonService, profileService) {
        var _this = this;
        this.login = login;
        this.location = location;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.joyrideService = joyrideService;
        this.utilService = utilService;
        this.commonService = commonService;
        this.profileService = profileService;
        this.errorMessage = false;
        this.startTourCheck = false;
        this.steps = ['startTour'];
        this.appStep = [
            'termRuleSelection@home',
            'termName@home',
            'termCode@home',
            'difinition@home',
            'IncludeInAccuracyTest@home',
            'periodType@home',
            'type@home',
            'financialStatement@home',
            'priorityGroup@home',
            'addTerm@home',
            'saveTerm@home',
            'processTerm@home',
            'removeTerm@home',
            // 'expLabel@home',
            'companyName@export',
            'goToPeer@export',
            'division@export',
            'sector@export',
            'industry@export',
            'filerCategory@export',
            'term@export',
            'selectAllTerms@export',
            'deselectAllTerms@export',
            'annual@export',
            'selectYear@export',
            'overrideSelected@export',
            'includeValidationInfo@export',
            'termResult@export',
            'coverageStats@export',
            'quarterly@export',
            'searchCompany@accuracyTest',
            'year@accuracyTest',
            'runTest@accuracyTest',
            'refreshData@profile',
            'selectUnselect@profile',
            'processPreference@profile',
            'createPreference@profile',
            'deletePreference@profile',
            'clearPreference@profile',
            'sharePreference@profile',
            'listOfSharedProfile@profile',
            'accept@profile',
            'delete@profile',
            'groupName@manageTerm',
            'newGroupStep@manageTerm',
            'newRowStep@manageTerm',
            'searchTermMap@manageTerm',
            'exportTermMap@manageTerm',
            'refreshStatus@status',
            'cancelProcessing@status',
            'type@submit',
            'category@submit',
            'name@submit',
            'email@submit',
            'phone@submit',
            'message@submit',
            'sendFeedback@submit'
        ];
        this.currentPage = '';
        //this.autoLogin();
        this.currentUserSubscription = this.login.currentUser.subscribe(function (user) {
            _this.currentUser = user;
        });
    }
    HeaderComponent.prototype.onClick = function (targetElement) {
        if (targetElement.classList.contains('joyride-backdrop')) {
            this.joyrideService.closeTour();
        }
    };
    HeaderComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.steps = ['startTour'];
        var locationPath = this.location.path();
        this.currentPage = locationPath.replace('/', '');
        var stepForCurrentRoute = this.appStep.filter(function (item) {
            if (locationPath !== '/profile') {
                return item.includes(locationPath.replace('/', '@'));
            }
            else {
                if (item === 'listOfSharedProfile@profile' || item === 'accept@profile' || item === 'delete@profile') {
                    if (_this.notifications && _this.notifications.length > 0) {
                        return item.includes(locationPath.replace('/', '@'));
                    }
                }
                else {
                    return item.includes(locationPath.replace('/', '@'));
                }
            }
        });
        // const stepForOtherRoute = this.appStep.filter((item) => {
        //   return !item.includes(locationPath.replace('/', '@'));
        // });
        this.steps = this.steps.concat(stepForCurrentRoute);
        // this.steps = this.steps.concat(stepForOtherRoute);
        this.router.events.subscribe(function (event) {
            _this.steps = ['startTour'];
            if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_3__["NavigationEnd"]) {
                _this.currentPage = event.url.replace('/', '');
                var stepForCurrentRoute_1 = _this.appStep.filter(function (item) {
                    if (event.url !== '/profile') {
                        return item.includes(event.url.replace('/', '@'));
                    }
                    else {
                        if (item === 'listOfSharedProfile@profile' || item === 'accept@profile' || item === 'delete@profile') {
                            if (_this.notifications && _this.notifications.length > 0) {
                                return item.includes(event.url.replace('/', '@'));
                            }
                        }
                        else {
                            return item.includes(event.url.replace('/', '@'));
                        }
                    }
                });
                // const stepForOtherRoute = this.appStep.filter((item) => {
                //   return !item.includes(event.url.replace('/', '@'));
                // });
                _this.steps = _this.steps.concat(stepForCurrentRoute_1);
                // this.steps = this.steps.concat(stepForOtherRoute);
            }
        });
        this.login.currentUser;
        if (localStorage.getItem("userFullName")) {
            if (this.currentUser == null) {
                this.userFullName = this.login.fullname;
            }
            else {
                this.userFullName = this.currentUser;
            }
            this.firstName = this.userFullName.split(" ");
            this.userFullName = this.firstName[1];
            this.getAllSharedProfiles();
        }
        else {
            this.autoLogin();
        }
        this.subscription = app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].sharedPreferenceNotification.subscribe(function (item) {
            _this.notifications = item;
        });
    };
    HeaderComponent.prototype.startTour = function () {
        var _this = this;
        app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setTourGuideStart(true);
        this.startTourCheck = true;
        var options = {
            steps: this.steps,
            // startWith: 'step3@app',
            // waitingTime: 3000,
            stepDefaultPosition: 'bottom',
            themeColor: 'transparent',
            showPrevButton: true,
            logsEnabled: false,
            showCounter: false
            // customTexts: { prev: of('<<').pipe(delay(2000)), next: '>>'}
        };
        this.joyrideService.startTour(options).subscribe(function (step) {
            if (step.route === 'export') {
                if (step.name === 'companyName') {
                    app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setExportTabIndex(0);
                }
                if (step.name === 'term') {
                    app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setExportTabIndex(1);
                }
                if (step.name === 'annual') {
                    app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setExportTabIndex(2);
                }
                if (step.name === 'filerCategory') {
                    app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setExportTabIndex(0);
                }
                if (step.name === 'deselectAllTerms') {
                    app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setExportTabIndex(1);
                }
                if (step.name === 'quarterly') {
                    app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setExportTabIndex(2);
                }
            }
        }, function (e) {
            console.log('Error', e);
        }, function () {
            // this.stepDone();
            _this.startTourCheck = false;
            console.log('Tour finished');
            app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].setTourGuideStart(false);
        });
    };
    HeaderComponent.prototype.logout = function () {
        this.login.logout();
    };
    HeaderComponent.prototype.ngOnDestroy = function () {
        // unsubscribe to ensure no memory leaks
        this.currentUserSubscription.unsubscribe();
        this.subscription.unsubscribe();
        this.logout();
    };
    HeaderComponent.prototype.autoLogin = function () {
        var _this = this;
        this.utilService.autoLogin().subscribe(function (response) {
            // this.app.showmenu = true;
            if (response.resultObject != null) {
                localStorage.removeItem('error');
                localStorage.removeItem('user');
                _this.userFullName = response.resultObject.password;
                localStorage.setItem('userid', response.resultObject.userid);
                _this.utilService.getUserRolesList().subscribe(function (res) {
                    if (res.length === 0) {
                        localStorage.setItem('error', 'true');
                        localStorage.setItem('user', 'null');
                        _this.errorMessage = true;
                        return _this.router.navigate(['/login']);
                    }
                    _this.isAdmin = res.includes('admin');
                    var admin = _this.isAdmin ? 'true' : null;
                    localStorage.setItem("isAdmin", admin);
                });
            }
            else {
                localStorage.setItem('error', 'true');
                localStorage.setItem('user', 'null');
                _this.errorMessage = true;
                return _this.router.navigate(['/login']);
            }
            if (response.status) {
                _this.getAllSharedProfiles();
                _this.router.navigate(['/home'], {
                    state: {
                        loggedUsername: response.username,
                    }
                });
                _this.router.getCurrentNavigation;
            }
            else {
                console.log("error");
                _this.router.navigate(['/login'], {});
            }
        }, function (error) {
            console.log(error);
        });
    };
    HeaderComponent.prototype.goToProfile = function () {
        this.router.navigate(['/profile']);
    };
    HeaderComponent.prototype.getAllSharedProfiles = function () {
        var _this = this;
        this.profileService.getAllSharedProfiles().subscribe(function (response) {
            var preferencesList = [];
            response.forEach(function (preferences) {
                var pname = preferences.companyName.split("$");
                preferencesList.push(_this.getRootRecords(preferences, pname));
            });
            app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].emitsharedPreferenceNotificationEvent(preferencesList);
        }, function (error) {
            console.log(error);
        });
    };
    HeaderComponent.prototype.getRootRecords = function (preferences, companyNames) {
        var entityName = companyNames[0];
        return {
            "data": {
                processId: preferences.processId, companyName: entityName, preferenceName: preferences.preferenceName,
                code: preferences.code, userid: preferences.userid, termName: preferences.termName, resultLink: preferences.resultLink, validationStatus: preferences.validationStatus,
                researchLink: preferences.researchLink, cik: preferences.cik, cName: preferences.cName, quaterly: preferences.quaterly
            },
            "children": this.getChildRecord(preferences, companyNames)
        };
    };
    HeaderComponent.prototype.getChildRecord = function (preferences, companyNames) {
        var childrens = [];
        for (var i = 1; i < companyNames.length; i++) {
            childrens.push({
                "data": {
                    processId: preferences.processId, companyName: companyNames[i], preferenceName: preferences.preferenceName,
                    code: preferences.code, userid: preferences.userid, termName: preferences.termName, resultLink: preferences.resultLink, validationStatus: preferences.validationStatus,
                    researchLink: preferences.researchLink, cik: preferences.cik, cName: preferences.cName, quaterly: preferences.quaterly
                }
            });
        }
        return childrens;
    };
    HeaderComponent.prototype.goToHome = function () {
        this.router.navigate(['/home']);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('document:click', ['$event.target']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], HeaderComponent.prototype, "onClick", null);
    HeaderComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-header',
            template: __webpack_require__(/*! ./header.component.html */ "./src/app/header/header.component.html"),
            styles: [__webpack_require__(/*! ./header.component.css */ "./src/app/header/header.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_login_service__WEBPACK_IMPORTED_MODULE_4__["LoginService"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], ngx_joyride__WEBPACK_IMPORTED_MODULE_8__["JoyrideService"], _utils_utilService__WEBPACK_IMPORTED_MODULE_5__["UtilService"], app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"], app_services_profile_service__WEBPACK_IMPORTED_MODULE_7__["ProfileService"]])
    ], HeaderComponent);
    return HeaderComponent;
}());



/***/ }),

/***/ "./src/app/home/home.html":
/*!********************************!*\
  !*** ./src/app/home/home.html ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n        <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\"\r\n                strokeWidth=\"8\" fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n        <p-messages [value]=\"msgs\"></p-messages>\r\n</div>\r\n<p-confirmDialog [style]=\"{width: '50vw'}\" [baseZIndex]=\"10000\"></p-confirmDialog>\r\n<div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\">\r\n        <strong>{{errorMsg}}</strong>\r\n</div>\r\n<div *ngIf=\"processnow\" style=\"border-style: solid;\">\r\n        <div class=\"row\">\r\n                <div class=\"column1\">\r\n\r\n                        <label>\r\n                                Division -> Sector:</label>\r\n\r\n                </div>\r\n                <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\"\r\n                                [(ngModel)]=\"divSector\" [style]=\"{'width':'800px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                                (onChange)=\"divSectorChange($event)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                                filter=\"true\"></p-dropdown>\r\n                        &nbsp; {{divisionCount}}\r\n                </div>\r\n        </div>\r\n        <div class=\"row\" style=\"height: 5px\"></div>\r\n        <div class=\"row\">\r\n                <div class=\"column1\">\r\n                        <label>Industry: </label>\r\n                </div>\r\n                <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                                [showClear]=\"true\" (onChange)=\"processIndustryChange($event)\" [virtualScroll]=\"true\"\r\n                                [itemSize]=\"31\" filter=\"true\" [style]=\"{'width':'800px'}\"></p-dropdown>\r\n                        &nbsp; {{sectorCount}}\r\n                </div>\r\n        </div>\r\n        <div class=\"row\" style=\"height: 5px\"></div>\r\n        <div class=\"row\">\r\n                <div class=\"column1\">\r\n                        <label>Filer Category:</label>\r\n\r\n                </div>\r\n                <div class=\"column2\">\r\n\r\n                        <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                                placeholder=\"Select Filer Category\" [showClear]=\"true\"\r\n                                (onChange)=\"processfilCatChange($event)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                                filter=\"true\" [style]=\"{'width':'800px'}\"></p-dropdown>&nbsp; {{categoryCount}}\r\n                </div>\r\n\r\n        </div>\r\n        <div class=\"row\">\r\n                <div class=\"column1\">\r\n\r\n                </div>\r\n                <div class=\"column2\">\r\n                        <button pButton type=\"button\" label=\"Process Now\" class=\" ui-button-rounded ui-button-success\"\r\n                                [disabled]=\"enableTermButton\" (click)=\"processNow()\"></button>\r\n                </div>\r\n        </div>\r\n</div>\r\n\r\n<div class=\"row\" style=\"height:70%\">\r\n\r\n        <div class=\"exprcolumn\" style=\"width: 20%;\">\r\n                <!-- <p-sidebar [(visible)]=\"display\" [dismissible] =\"false\" [showCloseIcon]=\"false\" autoZIndex=\"false\" [baseZIndex]=\"10000\" [style]=\"{width:'30em','overflow': 'scroll','height': '500px'}\" [modal]=\"false\"> -->\r\n                <p-tree [value]=\"termTree\" [filter]=\"true\"\r\n                        [style]=\"{width:'27em','text-align':'left','max-height':'800px', 'overflow':'auto'}\"\r\n                        filterMode=\"strict\" (onNodeSelect)=\"termTreeSelection($event)\" selectionMode=\"single\"\r\n                        [(selection)]=\"selectedTerm\" (onNodeUnselect)=\"termTreeunselect($event)\"></p-tree>\r\n                <!-- </p-sidebar> -->\r\n\r\n\r\n        </div>\r\n        <div class=\"exprcolumn\" style=\"float: left; width: 80%;\">\r\n                <div class=\"row\">\r\n\r\n\r\n                        <div class=\"exprcolumn\" style=\"float: left; width: 50%;\">\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                &nbsp;\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <button pButton type=\"button\" label=\"Add Term\" class=\"ui-button-rounded\"\r\n                                                        (click)=\"addTerm()\"></button>\r\n                                                <button pButton type=\"button\" label=\"Save Term\"\r\n                                                        class=\"ui-button-rounded\" [disabled]=\"enableTermButton\"\r\n                                                        (click)=\"saveTerm()\"></button>\r\n                                                <button pButton type=\"button\" label=\"Process Term\"\r\n                                                        class=\"ui-button-rounded\" [disabled]=\"enableTermButton\"\r\n                                                        (click)=\"processTermnow()\"></button>\r\n                                                <button pButton type=\"button\" label=\"Remove Term\"\r\n                                                        class=\"ui-button-rounded\" [disabled]=\"enableTermButton\"\r\n                                                        (click)=\"removeTerm()\"></button>\r\n                                        </div>\r\n                                </div>\r\n                                <div>\r\n                                        &nbsp;\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Term Name</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <input id=\"termNameinput\" type=\"text\" size=\"30\" pInputText\r\n                                                        [(ngModel)]=\"termName\">\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Term Code</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <input id=\"termCodeinput\" type=\"text\" size=\"30\" pInputText\r\n                                                        [(ngModel)]=\"termCode\" (ngModelChange)=\"termCodeChange($event)\"\r\n                                                        [disabled]=\"enableTermCode\">\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Definition</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <textarea rows=\"5\" cols=\"30\" [(ngModel)]=\"definition\"\r\n                                                        pInputTextarea></textarea>\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <p-checkbox [(ngModel)]=\"incAccuTest\" binary=\"true\"></p-checkbox>\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <label>Included in Accuracy Test</label>\r\n                                        </div>\r\n\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Period Type</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n\r\n                                                <p-dropdown [options]=\"periodTypeList\" placeholder=\"Period Type\"\r\n                                                        [(ngModel)]=\"periodType\" optionLabel=\"name\"\r\n                                                        [style]=\"{'width':'200px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                                                        style=\"text-align: center\" filter=\"true\"></p-dropdown>\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Type</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <p-dropdown [options]=\"typeList\" placeholder=\"Type\" [(ngModel)]=\"type\"\r\n                                                        optionLabel=\"name\" [style]=\"{'width':'200px'}\"\r\n                                                        dropdownIcon=\"pi pi-chevron-down\" style=\"text-align: center\"\r\n                                                        filter=\"true\"></p-dropdown>\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Financial Statement</label>\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <p-dropdown [options]=\"trmRulFinStatmntList\"\r\n                                                        placeholder=\"Financial Statement\" [(ngModel)]=\"finStatement\"\r\n                                                        optionLabel=\"financialStatement\" [style]=\"{'width':'200px'}\"\r\n                                                        dropdownIcon=\"pi pi-chevron-down\" style=\"text-align: center\"\r\n                                                        filter=\"true\"></p-dropdown>\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Priority Group</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <p-dropdown [options]=\"trmRulPriorGrpList\" placeholder=\"Priority Group\"\r\n                                                        [(ngModel)]=\"priorgroup\" optionLabel=\"name\"\r\n                                                        [style]=\"{'width':'200px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                                                        style=\"text-align: center\" filter=\"true\"></p-dropdown>\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Processing Order </label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column\">\r\n                                                <input id=\"processingOrder\" type=\"text\" size=\"6\" pInputText\r\n                                                        [(ngModel)]=\"processingOrder\" [disabled]=\"true\">\r\n\r\n                                        </div>\r\n                                </div>\r\n\r\n                        </div>\r\n                        <div class=\"exprcolumn\" style=\"width: 50%\" *ngIf=\"displayTerms\">\r\n                                <div>\r\n                                        <button pButton type=\"button\" label=\"Expressions\"\r\n                                                class=\"ui-button-rounded ui-button-success\"\r\n                                                (click)=\"onExpressionButtonClick('expressions')\"></button>\r\n                                        <button pButton type=\"button\" label=\"Validations\"\r\n                                                class=\"ui-button-rounded ui-button-success\"\r\n                                                (click)=\"onExpressionButtonClick('validations')\"></button>\r\n                                        <button pButton type=\"button\" label=\"Industry Override Expressios\"\r\n                                                class=\"ui-button-rounded ui-button-success\"\r\n                                                (click)=\"onExpressionButtonClick('industry')\"\r\n                                                icon=\"pi pi-check\"></button>\r\n                                        <button pButton type=\"button\" label=\"Derived Zero Expressions\"\r\n                                                class=\"ui-button-rounded ui-button-success\"\r\n                                                (click)=\"onExpressionButtonClick('derived')\"\r\n                                                icon=\"pi pi-check\"></button>\r\n                                </div>\r\n                                <div>\r\n                                        &nbsp;\r\n                                </div>\r\n                                <div>\r\n                                        <button pButton type=\"button\" label=\"{{expLabel}}\"\r\n                                                class=\"ui-button-rounded ui-button-warning\"\r\n                                                (click)=\"expressionClick()\"></button>\r\n                                        <p-dropdown *ngIf=\"indOvrdExprDrop\" [options]=\"indovrDrpList\"\r\n                                                [(ngModel)]=\"selIndOvrdExpr\" optionLabel=\"name\"\r\n                                                (onChange)=\"industryChange()\"></p-dropdown>\r\n                                </div>\r\n                                <div>\r\n                                        &nbsp;\r\n                                </div>\r\n                                <p-table #expressionTable [columns]=\"expressioncols\" [value]=\"expTableList\"\r\n                                        [paginator]=\"true\" [rows]=\"10\" [responsive]=\"true\"\r\n                                        [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                                        [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\"\r\n                                        dataKey=\"termId\" p-dataTable scrollHeight=\"100px\" [scrollable]=\"true\"\r\n                                        scrollHeight=\"300px\">\r\n                                        <ng-template pTemplate=\"colgroup\" let-columns>\r\n                                                <colgroup>\r\n                                                        <col *ngFor=\"let col of columns\">\r\n                                                </colgroup>\r\n                                        </ng-template>\r\n                                        <ng-template pTemplate=\"header\" let-columns>\r\n                                                <tr>\r\n                                                        <th *ngFor=\"let col of columns\" pResizableColumn\r\n                                                                pReorderableColumn [pSortableColumn]=\"col.field\">\r\n                                                                <div pTooltip=\"Click to sort {{col.header}}\">\r\n                                                                        {{col.header}}\r\n                                                                        <p-sortIcon [field]=\"col.field\"\r\n                                                                                ariaLabel=\"Activate to sort\"\r\n                                                                                ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                                                                ariaLabelAsc=\"Activate to sort in ascending order\">\r\n                                                                        </p-sortIcon>\r\n                                                                </div>\r\n                                                        </th>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                        <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\"\r\n                                                                pResizableColumn pReorderableColumn>\r\n                                                                <div *ngIf=\"col.field !== ''\">\r\n                                                                        <input *ngSwitchCase=\"col.field\" pInputText\r\n                                                                                type=\"text\" placeholder=\"Search\"\r\n                                                                                [value]=\"expressionTable.filters[col.field] ? expressionTable.filters[col.field].value : ''\"\r\n                                                                                (input)=\"expressionTable.filter($event.target.value, col.field, 'contains');\"\r\n                                                                                style=\"width: 60px\">\r\n                                                                </div>\r\n                                                        </th>\r\n                                                </tr>\r\n                                        </ng-template>\r\n\r\n                                        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\"\r\n                                                let-rowIndex=\"rowIndex\">\r\n                                                <tr style=\"height:34px\">\r\n                                                        <td *ngFor=\"let col of columns \" class=\"ui-resizable-column\"\r\n                                                                style=\"word-wrap:break-word\">\r\n                                                                <div *ngIf=\"col.field === 'rank'\">\r\n\r\n                                                                        <a href=\"#\" (click)=\"moveRankBy(rowIndex, -1)\"\r\n                                                                                *ngIf=\"rowIndex > 0\"\r\n                                                                                title=\"Move row up\">\r\n                                                                                <i class=\"fa fa-arrow-up\"\r\n                                                                                        aria-hidden=\"true\"></i>\r\n                                                                        </a><br>\r\n                                                                        {{rowData[col.field]}}<br>\r\n                                                                        <a href=\"#\" (click)=\"moveRankBy(rowIndex, 1)\"\r\n                                                                                *ngIf=\"expTableList.length - rowIndex > 1\"\r\n                                                                                title=\"Move row down\">\r\n                                                                                <i class=\"fa fa-arrow-down\"\r\n                                                                                        aria-hidden=\"true\"></i>\r\n                                                                        </a>\r\n\r\n                                                                </div>\r\n                                                                <div\r\n                                                                        *ngIf=\"col.field !== 'rank' && col.field !== 'options' && col.field !== 'expression'\">\r\n                                                                        {{rowData[col.field]}}\r\n                                                                </div>\r\n                                                                <div *ngIf=\"col.field === 'expression'\">\r\n                                                                        <div *ngIf=\"rowData['type'] !== 'Formula'\">\r\n                                                                                {{rowData[col.field]}}\r\n                                                                        </div>\r\n\r\n                                                                        <div *ngIf=\"rowData['type'] === 'Formula'\">\r\n                                                                                <p style=\"display:inline\"\r\n                                                                                        *ngFor=\"let formula of rowData['formulaList']\">\r\n                                                                                        <a href=\"#\"\r\n                                                                                                (click)=\"showTermResultnavigate($event,formula.termName)\">{{formula.termName}}\r\n                                                                                        </a>\r\n                                                                                        {{getFormulaSuffix(formula)}}\r\n                                                                                </p>\r\n                                                                                <!-- {{rowData[col.field]}} -->\r\n                                                                                <button type=\"button\"\r\n                                                                                        class=\"glyphicon  glyphicon-eye-open\"\r\n                                                                                        ng-click=\"showDerivationTree()\"></button>\r\n                                                                        </div>\r\n                                                                </div>\r\n\r\n                                                                <div *ngIf=\"col.field === 'options'\">\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"onExpressionEdit(rowData)\"\r\n                                                                                (keydown.enter)=\"onExpressionEdit(rowData)\"\r\n                                                                                icon=\"pi pi-pencil\"\r\n                                                                                styleClass=\"ui-button-info\"\r\n                                                                                pTooltip=\"Edit Expression\"></button>\r\n                                                                        &nbsp;&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"deleteWithRank(rowIndex)\"\r\n                                                                                (keydown.enter)=\"deleteWithRank(rowIndex)\"\r\n                                                                                icon=\"pi pi-trash\"\r\n                                                                                styleClass=\"ui-button-info\"\r\n                                                                                pTooltip=\"Delete Expression\"></button>\r\n                                                                </div>\r\n                                                        </td>\r\n                                                </tr>\r\n                                        </ng-template>\r\n                                        <ng-template pTemplate=\"loadingbody\" let-columns=\"columns\">\r\n                                                <tr style=\"height:34px\">\r\n                                                        <td *ngFor=\"let col of columns\"\r\n                                                                pTooltip=\"{{rowData[col.field]}}\">\r\n                                                                <div class=\"loading-text\"></div>\r\n                                                        </td>\r\n                                                </tr>\r\n                                        </ng-template>\r\n                                        <ng-template pTemplate=\"summary\">\r\n                                                Total number of Records: {{expressionTable.totalRecords}}\r\n                                        </ng-template>\r\n                                </p-table>\r\n\r\n                        </div>\r\n                </div>\r\n                <div class=\"row\" *ngIf=\"displayTerms\" style=\"text-align: center\">\r\n                        <label style=\"background-color: #E2E8EC;width: 100%\"> Coverage and Term Results</label>\r\n                </div>\r\n                <div class=\"row\">\r\n                        <div class=\"exprcolumn\" style=\"width: 70%; padding: 20px\" *ngIf=\"displayTerms\">\r\n\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <p-radioButton name=\"filterRadio\" value=\"company\"\r\n                                                        [(ngModel)]=\"filterRadio\"></p-radioButton>\r\n                                                <label>Search by Company: </label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column2\">\r\n                                                <p-autoComplete [(ngModel)]=\"companyName\" name=\"companyName\" [size]=\"50\"\r\n                                                        [suggestions]=\"filteredCompany\"\r\n                                                        (completeMethod)=\"searchCompany($event)\"\r\n                                                        placeholder=\"Search Company\" [size]=\"50\" [dropdown]=\"true\">\r\n                                                </p-autoComplete>\r\n\r\n                                                <button pButton type=\"button\" label=\"Go To Peer Goup\"\r\n                                                        class=\"ui-button-rounded\" (click)=\"goToPeer($event)\"></button>\r\n                                                        <button type=\"button\" pButton   (click)=\"resetCoverage()\" label=\"Clear All\"  class=\"ui-button-rounded\"  pTooltip=\"Clear All\"></button>\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <p-radioButton name=\"filterRadio\" value=\"group\"\r\n                                                        [(ngModel)]=\"filterRadio\"></p-radioButton>\r\n                                                <label>Search by Group:\r\n                                                        Division -> Sector:</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column2\">\r\n                                                <p-dropdown [options]=\"filtereddivSector\"\r\n                                                        placeholder=\"Select Division Sector\" [(ngModel)]=\"divSector\"\r\n                                                        [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                                                        (onChange)=\"divSectorChange($event)\" [virtualScroll]=\"true\"\r\n                                                        [itemSize]=\"31\" filter=\"true\"></p-dropdown>\r\n                                                &nbsp; {{divisionCount}}\r\n\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Industry: </label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column2\">\r\n                                                <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\"\r\n                                                        placeholder=\"Select Industry\" [showClear]=\"true\"\r\n                                                        (onChange)=\"processIndustryChange($event)\"\r\n                                                        [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\"\r\n                                                        [style]=\"{'width':'400px'}\"></p-dropdown>\r\n                                                &nbsp; {{industryCount}}\r\n\r\n                                        </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                        <div class=\"column1\">\r\n                                                <label>Filer Category:</label>\r\n\r\n                                        </div>\r\n                                        <div class=\"column2\">\r\n                                                <p-dropdown [options]=\"filteredfilerCategory\"\r\n                                                        [(ngModel)]=\"filerCategory\" placeholder=\"Select Filer Category\"\r\n                                                        [showClear]=\"true\" (onChange)=\"processfilCatChange($event)\"\r\n                                                        [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\"\r\n                                                        [style]=\"{'width':'400px'}\"></p-dropdown>&nbsp;\r\n                                                {{categoryCount}}\r\n                                        </div>\r\n                                </div>\r\n                                <div>\r\n                                        <button pButton type=\"button\" label=\"Show Resolved\"\r\n                                        class=\"ui-button-rounded\"\r\n                                                (click)=\"showResolved(true)\"></button>\r\n                                        <p-dropdown [options]=\"resolvedRanks\" [(ngModel)]=\"selectResolvedRank\"\r\n                                                placeholder=\"Show Resolved By Rank\" (onChange)=\"showResolved(true)\">\r\n                                        </p-dropdown>\r\n                                        <button pButton type=\"button\" label=\"Show Not Resolved\"\r\n                                        class=\"ui-button-rounded\"\r\n                                                (click)=\"showResolved(false)\"></button>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                <div class=\"column1\">\r\n                                                <p-checkbox [(ngModel)]=\"quaterly\" binary=\"true\" label=\"Quarterly?\">\r\n                                                </p-checkbox>\r\n                                </div>\r\n                                <div class=\"column2\" style=\"width:50%\">\r\n                                       <h3 style=\"text-align: center\"> {{range[0]}} - {{range[1]}} </h3>\r\n                                 <p-slider [(ngModel)]=\"range\" [min]=\"minYear\" [max]=\"maxYear\" [step]=\"1\" [range]=\"true\" [style]=\"{'width':'50em'}\" (onChange)=\"yearChange($event)\"></p-slider>\r\n                                 <!-- <p-slider [ext-tooltip]=\"range[0]\" stickTo=\".ui-slider-handle\" tooltipPosition=\"top\" [(ngModel)]=\"range\" class=\"slider\" [step]=\"2016\" [min]=\"2020\" [max]=\"range[1]\" ></p-slider> -->\r\n                                </div>\r\n                                </div>\r\n\r\n\r\n                        </div>\r\n                        <div class=\"exprcolumn\" style=\"width: 30%; padding: 20px\">\r\n                                <div style=\"float: right; padding-left: 150px\" *ngIf=\"displayGetCoverage\">\r\n                                        <p-chart type=\"doughnut\" [data]=\"chart\" height=\"300\"></p-chart>\r\n                                        <button pButton type=\"button\" label=\"Get Coverage\"\r\n                                                class=\"ui-button-rounded ui-button-success\"\r\n                                                (click)=\"showResolved(true)\"></button>\r\n                                </div>\r\n                        </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row\" *ngIf=\"displayTerms\">\r\n                        <div class=\"exprcolumn\" style=\"width: 100%; padding: 20px\">\r\n                                <p-table #entityTable [columns]=\"entitycols\" [value]=\"entityList\" [paginator]=\"true\"\r\n                                        [rows]=\"10\" [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\"\r\n                                        [resizableColumns]=\"true\" [reorderableColumns]=\"true\" selectionMode=\"single\"\r\n                                        [(selection)]=\"cik\" dataKey=\"cik\" (onRowSelect)=\"onRowClick($event)\"\r\n                                        (onRowUnselect)=\"onRowUnClick($event)\" p-dataTable scrollHeight=\"100px\"\r\n                                        [scrollable]=\"true\" scrollHeight=\"200px\">\r\n                                        <ng-template pTemplate=\"colgroup\" let-columns>\r\n                                                <colgroup>\r\n                                                        <col *ngFor=\"let col of columns\">\r\n                                                </colgroup>\r\n                                        </ng-template>\r\n                                        <ng-template pTemplate=\"header\" let-columns>\r\n                                                <tr>\r\n                                                        <th *ngFor=\"let col of columns\" pResizableColumn\r\n                                                                pReorderableColumn [pSortableColumn]=\"col.field\">\r\n                                                                <div pTooltip=\"Click to sort {{col.header}}\">\r\n                                                                        {{col.header}}\r\n                                                                        <p-sortIcon [field]=\"col.field\"\r\n                                                                                ariaLabel=\"Activate to sort\"\r\n                                                                                ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                                                                ariaLabelAsc=\"Activate to sort in ascending order\">\r\n                                                                        </p-sortIcon>\r\n                                                                </div>\r\n                                                        </th>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                        <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                                                                <div *ngIf=\"col.field !== ''\">\r\n                                                                        <input *ngSwitchCase=\"col.field\" pInputText\r\n                                                                                type=\"text\" placeholder=\"Search\"\r\n                                                                                [value]=\"entityTable.filters[col.field] ? entityTable.filters[col.field].value : ''\"\r\n                                                                                (input)=\"entityTable.filter($event.target.value, col.field, 'contains'); onRowUnClick();onFilter($event.target.value, col.field, 'contains')\"\r\n                                                                                style=\"width: 60px\">\r\n                                                                </div>\r\n                                                        </th>\r\n                                                </tr>\r\n                                        </ng-template>\r\n\r\n                                        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                                                <tr style=\"height:34px\">\r\n                                                        <td *ngFor=\"let col of columns\">\r\n                                                                <div\r\n                                                                        *ngIf=\"col.field !== 'viewResultLink' && col.field !== 'researchLink' && col.field !== 'processTermLink' && col.field !== 'fsqvLink'\">\r\n                                                                        {{rowData[col.field]}}\r\n                                                                </div>\r\n                                                                <div *ngIf=\"col.field === 'viewResultLink'\">\r\n                                                                        <a style=\"color:blue;\"\r\n                                                                                (click)=\"showTermResults(rowData)\"\r\n                                                                                href=\"#/termresults\">View</a>\r\n                                                                </div>\r\n                                                                <div *ngIf=\"col.field === 'researchLink'\">\r\n                                                                        <a style=\"color:blue;\" target=\"_blank\"\r\n                                                                                href=\"https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&type=&dateb=&owner=exclude&count=40&search_text=&CIK={{rowData.cik}}\">Research</a>\r\n                                                                </div>\r\n                                                             <!--  (click)=\"openFSQVLink(rowData)\" -->\r\n                                                                <div *ngIf=\"col.field === 'fsqvLink'\">\r\n                                                                      <a style=\"color: blue;\" target=\"_blank\"\r\n                                                                                href=\"https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&type=&dateb=&owner=exclude&count=40&search_text=&CIK={{rowData.cik}}\">FSQV</a>\r\n                                                                </div>\r\n                                                                <div *ngIf=\"col.field === 'processTermLink'\">\r\n                                                                        <a style=\"color:blue;\"\r\n                                                                                (click)=\"processTermForEntity(rowData)\"\r\n                                                                                href=\"#/home\">Process</a>\r\n                                                                </div>\r\n                                                        </td>\r\n                                                </tr>\r\n                                        </ng-template>\r\n                                        <ng-template pTemplate=\"loadingbody\" let-columns=\"columns\">\r\n                                                <tr style=\"height:34px\">\r\n                                                        <td *ngFor=\"let col of columns\"\r\n                                                                pTooltip=\"{{rowData[col.field]}}\">\r\n                                                                <div class=\"loading-text\"></div>\r\n                                                        </td>\r\n                                                </tr>\r\n                                        </ng-template>\r\n                                        <ng-template pTemplate=\"summary\">\r\n                                                Total number of Records: {{entityTable.totalRecords}}\r\n                                        </ng-template>\r\n                                </p-table>\r\n                        </div>\r\n\r\n                </div>\r\n\r\n        </div>\r\n\r\n</div>\r\n\r\n\r\n<p-dialog header=\"Term Expression Builder\" [(visible)]=\"editExpression\" [modal]=\"true\" [style]=\"{width: '95vw'}\"\r\n        [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\" [draggable]=\"true\" [resizable]=\"true\"\r\n        [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n        <div class=\"row\">\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Term Name:\r\n                        </label>\r\n                        <textarea pInputTextarea [(ngModel)]=\"termName\" cols=\"30\" disabled></textarea>\r\n                        <label>\r\n                                Definition:\r\n                        </label>\r\n                        <textarea pInputTextarea cols=\"150\" [(ngModel)]=\"definition\" disabled></textarea>\r\n\r\n                </div>\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Term Code:\r\n                        </label>\r\n                        <textarea pInputTextarea [(ngModel)]=\"termCode\" cols=\"30\" disabled></textarea>\r\n\r\n                </div>\r\n        </div>\r\n        <div>\r\n                <p-tabView [activeIndex]=\"index\" (onChange)=\"onTabChange($event)\">\r\n                        <p-tabPanel header=\"Concept Match\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"width: 90%; padding-left: 20px\">\r\n                                        <label>\r\n                                                Concept Name:\r\n                                        </label>\r\n                                        <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\"\r\n                                                [suggestions]=\"filteredconcMat\"\r\n                                                (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" [size]=\"170\"\r\n                                                placeholder=\"Concept Match\" [minLength]=\"3\"\r\n                                                (ngModelChange)=\"getconceptNameDefinition()\"></p-autoComplete>\r\n                                        <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                                                {{conceptNameDefinition}}\r\n                                        </div>\r\n                                        <div>\r\n                                                <p-checkbox label=\"Use Positive Facts Only\"\r\n                                                        [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Use Negative Facts Only\"\r\n                                                        [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Reverse Negative Facts\"\r\n                                                        [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                Axis:\r\n                                                        </label>\r\n                                                </div>\r\n\r\n                                                <div class=\"column\">\r\n                                                        <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"axis\"\r\n                                                                placeholder=\"specify axis name\">\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column2\">\r\n                                                        <label>\r\n                                                                Members Exclusion (Virtual Parent):\r\n                                                        </label>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                <textarea pInputTextarea\r\n                                                                        [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                                                                        cols=\"150\"\r\n                                                                        placeholder=\"Enter Exclusion Members\"></textarea>\r\n                                                        </label>\r\n\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Concept Match w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <label>\r\n                                                Concept Name:\r\n                                        </label>\r\n                                        <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\"\r\n                                                [suggestions]=\"filteredconcMat\"\r\n                                                (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" [size]=\"170\"\r\n                                                placeholder=\"Concept Match\" [minLength]=\"3\"\r\n                                                (ngModelChange)=\"getconceptNameDefinition()\"></p-autoComplete>\r\n                                        <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                                                {{conceptNameDefinition}}\r\n                                        </div>\r\n                                        <div>\r\n                                                <p-checkbox name=\"useMaxAxisCount\" value=\"useMaxAxisCount\"\r\n                                                        label=\"Max # Axes/Members:\" [(ngModel)]=\"useMaxAxisCount\"\r\n                                                        inputId=\"useMaxAxisCount\"></p-checkbox>&nbsp;\r\n                                                <input type=\"number\" min=\"0\" id=\"maxAxisCount\" name=\"maxAxisCount\"\r\n                                                        [(ngModel)]=\"maxAxisCount\">\r\n                                        </div>\r\n                                        <div *ngFor=\"let expressionSet of expressionSets; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n\r\n                                                <div class=\"row\">\r\n\r\n                                                        <div class=\"conceptcolumn\">\r\n                                                                <div class=\"row\">\r\n\r\n\r\n                                                                        <div class=\"conceptcolumn1\"> <label>\r\n                                                                                        Axes:\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"axisOption{{i}}\"\r\n                                                                                        value=\"ExactMatch\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisType\"\r\n                                                                                        id=\"axisFullNameOption\"\r\n                                                                                        (onClick)=\"OnExpressionAxisTypeChanged(i); expressionSet.disableAxes=false;expressionSet.disableAxesInc=true\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <input type=\"text\" size=\"30\" pInputText\r\n                                                                                        [(ngModel)]=\"expressionSet.axisName\"\r\n                                                                                        placeholder=\"specify axis name\"\r\n                                                                                        [disabled]=\"expressionSet.disableAxes\">\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"axisOption{{i}}\"\r\n                                                                                        id=\"axisPartialNameOption\"\r\n                                                                                        value=\"InclusionExclusionList\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisType\"\r\n                                                                                        (onClick)=\"OnExpressionAxisTypeChanged(i);expressionSet.disableAxesInc=false;expressionSet.disableAxes=true\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Inclusions(axis name must\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        id=\"axisInclusionList\"\r\n                                                                                        name=\"axisInclusionList\"\r\n                                                                                        [disabled]=\"expressionSet.disableAxesInc\"\r\n                                                                                        placeholder=\"Enter Inclusion Axes\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisInclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Axes\"\r\n                                                                                        (onChange)=\"expressionSet.axisInclusionList = buildListFromString(expressionSet.axisInclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Exclusions (axis name must NOT\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        id=\"axisExclusions\"\r\n                                                                                        name=\"axisExclusions\"\r\n                                                                                        [disabled]=\"expressionSet.disableAxesInc\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisExclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Axes\"\r\n                                                                                        (onChange)=\"expressionSet.axisExclusionList = buildListFromString(expressionSet.axisExclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"conceptcolumn\">\r\n                                                                <div class=\"row\">\r\n\r\n\r\n                                                                        <div class=\"conceptcolumn1\">\r\n                                                                                <label>\r\n                                                                                        Members:\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"memberOption{{i}}\"\r\n                                                                                        id=\"anyMemberOption\" value=\"Any\"\r\n                                                                                        [(ngModel)]=\"expressionSet.memberType\"\r\n                                                                                        (onClick)=\"OnExpressionMemberTypeChanged(i)\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Any Members:\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"memberOption{{i}}\"\r\n                                                                                        value=\"ExactMatch\"\r\n                                                                                        [(ngModel)]=\"expressionSet.memberType\"\r\n                                                                                        (onClick)=\"OnExpressionMemberTypeChanged(i); expressionSet.disableMember=false;expressionSet.disableMemInc=true\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <input type=\"text\" size=\"30\" pInputText\r\n                                                                                        [(ngModel)]=\"expressionSet.memberName\"\r\n                                                                                        placeholder=\"specify member name\"\r\n                                                                                        [disabled]=\"expressionSet.disableMember\">\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"memberOption{{i}}\"\r\n                                                                                        value=\"InclusionExclusionList\"\r\n                                                                                        [(ngModel)]=\"expressionSet.memberType\"\r\n                                                                                        inputId=\"partialMemberOption\"\r\n                                                                                        (onClick)=\"OnExpressionMemberTypeChanged(i);expressionSet.disableMember=true; expressionSet.disableMemInc=false\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Inclusions(member name must\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        [(ngModel)]=\"expressionSet.memberInclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Members\"\r\n                                                                                        [disabled]=\"expressionSet.disableMemInc\"\r\n                                                                                        (onChange)=\"expressionSet.memberInclusionList = buildListFromString(expressionSet.memberInclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Exclusions (member name must NOT\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        [(ngModel)]=\"expressionSet.memberExclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Members\"\r\n                                                                                        [disabled]=\"expressionSet.disableMemInc\"\r\n                                                                                        (onChange)=\"expressionSet.memberExclusionList = buildListFromString(expressionSet.memberExclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                </div>\r\n                                                <div style=\"float: center;\">\r\n                                                        <button type=\"button\" pButton icon=\"pi pi-times\"\r\n                                                                (click)=\"removeSet(i)\" label=\"Remove Set\"\r\n                                                                class=\"ui-button-rounded ui-button-success\"></button>\r\n\r\n                                                </div>\r\n\r\n                                        </div>\r\n                                        <div>\r\n                                                <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                                                        (click)=\"AddExpressionSet()\" label=\"Add New Set\"\r\n                                                        class=\"ui-button-rounded ui-button-success\"></button>\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Extended Check\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <div class=\"row\">\r\n                                                <div class=\"conceptcolumn\" style=\"width: 30%\">\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name Contains:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameContains\" cols=\"40\"\r\n                                                                                rows=\"5\" placeholder=\"Name Contains\"\r\n                                                                                (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name does not Contain:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameDoesNotContains\"\r\n                                                                                cols=\"40\" rows=\"5\"\r\n                                                                                placeholder=\"Name Does Not Contain\"\r\n                                                                                (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Balance Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"ExtendedGroup\"\r\n                                                                                value=\"debit\" label=\"Debit\"\r\n                                                                                [(ngModel)]=\"balType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"ExtendedGroup\"\r\n                                                                                value=\"credit\" label=\"Credit\"\r\n                                                                                [(ngModel)]=\"balType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"ExtendedGroup\" value=\"na\"\r\n                                                                                label=\"NA\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                        <p-radioButton name=\"ExtendedGroup\" value=\"none\"\r\n                                                                                label=\"Ignore\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Period Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"perTypeGroup\"\r\n                                                                                value=\"instant\" label=\"Instant\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"perTypeGroup\"\r\n                                                                                value=\"duration\" label=\"duration\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\"\r\n                                                                                binary=\"true\" label=\"Share Item Type? \">\r\n                                                                        </p-checkbox>\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                </div>\r\n                                                <div class=\"conceptcolumn\"\r\n                                                        style=\"background-color: #ccc; width: 65%; height: 80%;\">\r\n                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                <div class=\"conceptcolumn3\" style=\"width: 100%\">\r\n                                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                                <div class=\"column1\">\r\n\r\n                                                                                        <label>\r\n                                                                                                Division ->\r\n                                                                                                Sector:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filtereddivSector\"\r\n                                                                                                placeholder=\"Select Division Sector\"\r\n                                                                                                [(ngModel)]=\"divSector\"\r\n                                                                                                [style]=\"{'width':'500px'}\"\r\n                                                                                                dropdownIcon=\"pi pi-chevron-down\"\r\n                                                                                                (onChange)=\"divSectorChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{divisionCount}}\r\n\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Industry: </label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredindustry\"\r\n                                                                                                [(ngModel)]=\"industry\"\r\n                                                                                                placeholder=\"Select Industry\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processIndustryChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'500px'}\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{sectorCount}}\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Filer Category:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredfilerCategory\"\r\n                                                                                                [(ngModel)]=\"filerCategory\"\r\n                                                                                                placeholder=\"Select Filer Category\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processfilCatChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'500px'}\">\r\n                                                                                        </p-dropdown>&nbsp;\r\n                                                                                        {{categoryCount}}\r\n                                                                                </div>\r\n\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                        <p-table #expressionTable\r\n                                                                                [columns]=\"expressioncols\"\r\n                                                                                [value]=\"expTableList\"\r\n                                                                                [paginator]=\"true\" [rows]=\"10\"\r\n                                                                                [responsive]=\"true\"\r\n                                                                                [rowsPerPageOptions]=\"[10,20,30]\"\r\n                                                                                [resizableColumns]=\"true\"\r\n                                                                                [reorderableColumns]=\"true\"\r\n                                                                                selectionMode=\"single\"\r\n                                                                                [(selection)]=\"termId\" dataKey=\"termId\"\r\n                                                                                (onRowSelect)=\"onRowClick($event)\"\r\n                                                                                (onRowUnselect)=\"onRowUnClick($event)\"\r\n                                                                                p-dataTable scrollHeight=\"100px\"\r\n                                                                                [scrollable]=\"true\"\r\n                                                                                scrollHeight=\"200px\">\r\n\r\n                                                                        </p-table>\r\n                                                                </div>\r\n                                                                <div style=\"float: left; padding: 10px;\">\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Resolve\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Include\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Exclude\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                </div>\r\n\r\n                                                        </div>\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Extended Check w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <div class=\"row\">\r\n                                                <div class=\"conceptcolumn\" style=\"width: 30%\">\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name Contains:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameContains\" cols=\"40\"\r\n                                                                                rows=\"5\" placeholder=\"Name Contains\"\r\n                                                                                (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name does not Contain:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameDoesNotContains\"\r\n                                                                                cols=\"40\" rows=\"5\"\r\n                                                                                placeholder=\"Name Does Not Contain\"\r\n                                                                                (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Balance Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"balType\"\r\n                                                                                value=\"debit\" label=\"Debit\"\r\n                                                                                [(ngModel)]=\"balType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"balType\" value=\"credit\"\r\n                                                                                label=\"Credit\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                        <p-radioButton name=\"balType\" value=\"na\"\r\n                                                                                label=\"NA\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                        <p-radioButton name=\"balType\" value=\"none\"\r\n                                                                                label=\"Ignore\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Period Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"radioGroup1\"\r\n                                                                                value=\"instant\" label=\"Instant\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"radioGroup1\"\r\n                                                                                value=\"duration\" label=\"duration\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\"\r\n                                                                                binary=\"true\" label=\"Share Item Type? \">\r\n                                                                        </p-checkbox>\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Axes:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea [(ngModel)]=\"axes\"\r\n                                                                                cols=\"40\" rows=\"5\"\r\n                                                                                placeholder=\"Enter Axes\"\r\n                                                                                (onChange)=\"updateAxes(axes)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Members:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"axesMembers\" cols=\"40\"\r\n                                                                                rows=\"5\" placeholder=\"Enter Members\"\r\n                                                                                (onChange)=\"updateAxesMembers(axesMembers)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                </div>\r\n                                                <div class=\"conceptcolumn\"\r\n                                                        style=\"background-color: #ccc; width: 65%; height: 80%;\">\r\n                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                <div class=\"conceptcolumn3\" style=\"width: 100%\">\r\n                                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                                <div class=\"column1\">\r\n\r\n                                                                                        <label>\r\n                                                                                                Division ->\r\n                                                                                                Sector:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filtereddivSector\"\r\n                                                                                                placeholder=\"Select Division Sector\"\r\n                                                                                                [(ngModel)]=\"divSector\"\r\n                                                                                                [style]=\"{'width':'800px'}\"\r\n                                                                                                dropdownIcon=\"pi pi-chevron-down\"\r\n                                                                                                (onChange)=\"divSectorChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{divisionCount}}\r\n\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Industry: </label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredindustry\"\r\n                                                                                                [(ngModel)]=\"industry\"\r\n                                                                                                placeholder=\"Select Industry\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processIndustryChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'800px'}\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{sectorCount}}\r\n\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Filer Category:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredfilerCategory\"\r\n                                                                                                [(ngModel)]=\"filerCategory\"\r\n                                                                                                placeholder=\"Select Filer Category\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processfilCatChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'800px'}\">\r\n                                                                                        </p-dropdown>&nbsp;\r\n                                                                                        {{categoryCount}}\r\n                                                                                </div>\r\n\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                        <p-table #expressionTable\r\n                                                                                [columns]=\"expressioncols\"\r\n                                                                                [value]=\"expTableList\"\r\n                                                                                [paginator]=\"true\" [rows]=\"10\"\r\n                                                                                [responsive]=\"true\"\r\n                                                                                [rowsPerPageOptions]=\"[10,20,30]\"\r\n                                                                                [resizableColumns]=\"true\"\r\n                                                                                [reorderableColumns]=\"true\"\r\n                                                                                selectionMode=\"single\"\r\n                                                                                [(selection)]=\"termId\" dataKey=\"termId\"\r\n                                                                                (onRowSelect)=\"onRowClick($event)\"\r\n                                                                                (onRowUnselect)=\"onRowUnClick($event)\"\r\n                                                                                p-dataTable scrollHeight=\"100px\"\r\n                                                                                [scrollable]=\"true\"\r\n                                                                                scrollHeight=\"200px\">\r\n\r\n                                                                        </p-table>\r\n                                                                </div>\r\n                                                                <div style=\"float: left; padding: 10px;\">\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Resolve\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Include\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Exclude\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                </div>\r\n\r\n                                                        </div>\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Formula\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\"\r\n                                [style]=\"{height: '500px'}\">\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <div *ngFor=\"let formulaSet of formulaSets; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n\r\n                                                <div class=\"row\" style=\"width: 100%\">\r\n\r\n                                                        <div class=\"conceptcolumn\" style=\"width: 100%\">\r\n                                                                <div class=\"row\" style=\"width: 100%\">\r\n\r\n\r\n                                                                        <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                                                <label>\r\n                                                                                        Term Name:\r\n                                                                                </label>\r\n                                                                                <p-autoComplete\r\n                                                                                        [(ngModel)]=\"formulaSet.termName\"\r\n                                                                                        name=\"formulaTermName\"\r\n                                                                                        [size]=\"50\"\r\n                                                                                        [suggestions]=\"formulaFilteredTerms\"\r\n                                                                                        (completeMethod)=\"searchTermNames($event)\"\r\n                                                                                        placeholder=\"Search Term Name\"\r\n                                                                                        [dropdown]=\"true\">\r\n                                                                                </p-autoComplete>&nbsp;\r\n                                                                                <p-checkbox\r\n                                                                                        [(ngModel)]=\"formulaSet.nullable\"\r\n                                                                                        binary=\"true\"></p-checkbox>\r\n                                                                                &nbsp;\r\n                                                                                <label>\r\n                                                                                        Allow Null? Operators:\r\n                                                                                </label>\r\n                                                                                <p-dropdown\r\n                                                                                        [options]=\"formulaOperatorsList\"\r\n                                                                                        [(ngModel)]=\"formulaSet.operation\"\r\n                                                                                        optionLabel=\"name\"\r\n                                                                                        [showClear]=\"true\"></p-dropdown>\r\n                                                                                &nbsp;\r\n                                                                                <button type=\"button\" pButton\r\n                                                                                        (click)=\"deleteFormula(i)\"\r\n                                                                                        (keydown.enter)=\"deleteFormula(i)\"\r\n                                                                                        icon=\"pi pi-trash\"\r\n                                                                                        styleClass=\"ui-button-info\"\r\n                                                                                        pTooltip=\"Delete Term Name\"></button>\r\n\r\n                                                                        </div>\r\n                                                                </div>\r\n\r\n                                                        </div>\r\n                                                </div>\r\n\r\n                                        </div>\r\n                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                        <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                                                                (click)=\"addAnotherFormula()\"\r\n                                                                label=\"Add + Another Term to Formula\"\r\n                                                                class=\"ui-button-rounded ui-button-success\"></button>\r\n                                                </div>\r\n                                        </div>\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Concept Match Multiple\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"width: 90%; padding-left: 20px\">\r\n                                        <div *ngFor=\"let conceptSet of conceptMatchMultipleList; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n                                                <div class=\"row\">\r\n                                                        <div class=\"column\">\r\n                                                                <label>\r\n                                                                        Concept Name:\r\n                                                                </label>\r\n                                                        </div>\r\n                                                        <div class=\"column\">\r\n                                                                <p-autoComplete [(ngModel)]=\"conceptMatchMultiple[i]\"\r\n                                                                        [suggestions]=\"filteredconcMat\"\r\n                                                                        (completeMethod)=\"filterConceptMatch($event)\"\r\n                                                                        [size]=\"80\" field=\"id\"\r\n                                                                        placeholder=\"Enter Concept Name\"\r\n                                                                        [minLength]=\"3\"></p-autoComplete>\r\n                                                                <button type=\"button\" pButton\r\n                                                                        (click)=\"deleteConceptMatchMultipleItem(i)\"\r\n                                                                        (keydown.enter)=\"deleteConceptMatchMultipleItem(i)\"\r\n                                                                        icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                                                                        pTooltip=\"Delete Concept\"></button>\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <button type=\"button\" pButton (click)=\"addAnotherConcept()\"\r\n                                                        label=\"Add + Another Concept\"\r\n                                                        class=\"ui-button-rounded ui-button-success\"></button>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <p-checkbox label=\"Use Positive Facts Only\"\r\n                                                        [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Use Negative Facts Only\"\r\n                                                        [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Reverse Negative Facts\"\r\n                                                        [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                Axis:\r\n                                                        </label>\r\n                                                </div>\r\n\r\n                                                <div class=\"column\">\r\n                                                        <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"axis\"\r\n                                                                placeholder=\"specify axis name\">\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column2\">\r\n                                                        <label>\r\n                                                                Members Exclusion (Virtual Parent):\r\n                                                        </label>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                <textarea pInputTextarea\r\n                                                                        [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                                                                        cols=\"150\"\r\n                                                                        placeholder=\"Enter Exclusion Members\"></textarea>\r\n                                                        </label>\r\n\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                </p-tabView>\r\n        </div>\r\n        <p-footer>\r\n                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"editExpression=false; saveExpression()\"\r\n                        label=\"Save Expression\"></button>\r\n                <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"editExpression=false\" label=\"Cancel\"\r\n                        class=\"ui-button-secondary\"></button>\r\n        </p-footer>\r\n</p-dialog>\r\n<p-dialog header=\"Term Validation Builder\" [(visible)]=\"addEditValidation\" [modal]=\"true\" [style]=\"{width: '95vw'}\"\r\n        [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\" [draggable]=\"true\" [resizable]=\"true\"\r\n        [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n        <div style=\"padding-left: 20px\">\r\n                <div class=\"row\">\r\n                        <div class=\"column\">\r\n                                <label>\r\n                                        Term Name:\r\n                                </label>\r\n                                <textarea pInputTextarea [(ngModel)]=\"termName\" cols=\"30\" disabled></textarea>\r\n                                <label>\r\n                                        Definition:\r\n                                </label>\r\n                                <textarea pInputTextarea cols=\"150\" [(ngModel)]=\"definition\" disabled></textarea>\r\n\r\n                        </div>\r\n                        <div class=\"column\">\r\n                                <label>\r\n                                        Term Code:\r\n                                </label>\r\n                                <textarea pInputTextarea [(ngModel)]=\"termCode\" cols=\"30\" disabled></textarea>\r\n\r\n                        </div>\r\n                </div>\r\n                <div *ngFor=\"let formulaSet of formulaSets; let i = index\" [attr.data-index]=\"i\">\r\n\r\n                        <div class=\"row\" style=\"width: 100%\">\r\n\r\n                                <div class=\"conceptcolumn\" style=\"width: 100%\">\r\n                                        <div class=\"row\" style=\"width: 100%\">\r\n\r\n\r\n                                                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                        <label>\r\n                                                                Term Name:\r\n                                                        </label>\r\n                                                        <p-autoComplete [(ngModel)]=\"formulaSet.termName\"\r\n                                                                name=\"formulaTermName\" [size]=\"100\"\r\n                                                                [suggestions]=\"formulaFilteredTerms\"\r\n                                                                (completeMethod)=\"searchTermNames($event)\"\r\n                                                                placeholder=\"Search Term Name\" [dropdown]=\"true\">\r\n                                                        </p-autoComplete>&nbsp;\r\n                                                        <p-checkbox [(ngModel)]=\"formulaSet.nullable\" binary=\"true\">\r\n                                                        </p-checkbox>&nbsp;\r\n                                                        <label>\r\n                                                                Allow Null? Operators:\r\n                                                        </label>\r\n                                                        <p-dropdown [options]=\"formulaOperatorsList\"\r\n                                                                [(ngModel)]=\"formulaSet.operation\" optionLabel=\"name\"\r\n                                                                [showClear]=\"true\"></p-dropdown>&nbsp;\r\n                                                        <button type=\"button\" pButton (click)=\"deleteFormula(i)\"\r\n                                                                (keydown.enter)=\"deleteFormula(i)\" icon=\"pi pi-trash\"\r\n                                                                styleClass=\"ui-button-info\"\r\n                                                                pTooltip=\"Delete Term Name\"></button>\r\n\r\n                                                </div>\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </div>\r\n\r\n                </div>\r\n                <div class=\"row\" style=\"width: 100%\">\r\n                        <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherFormula()\"\r\n                                        label=\"Add + Another Term to Formula\"\r\n                                        class=\"ui-button-rounded ui-button-success\"></button>\r\n                        </div>\r\n                </div>\r\n                <div class=\"row\" style=\"width: 100%\">\r\n                        <p-checkbox [(ngModel)]=\"showExpression\" binary=\"true\"\r\n                                (ngModelChange)=\"getValidationExpression()\"></p-checkbox>&nbsp;\r\n                        <label>\r\n                                Show Expression ?\r\n                        </label>\r\n                </div>\r\n                <div class=\"row\" style=\"width: 100%\" *ngIf=\"showExpression\">\r\n                        <label> Rank : {{validationRank}}\r\n                        </label>\r\n                </div>\r\n                <div class=\"row\" style=\"width: 100%\" *ngIf=\"showExpression\">\r\n                        <label> Expression : {{validationExpression}}\r\n                        </label>\r\n                </div>\r\n        </div>\r\n\r\n        <p-footer>\r\n                <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                        (click)=\"addEditValidation=false; saveRuleWithValidation()\" label=\"Save Validation\"></button>\r\n                <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"addEditValidation=false\" label=\"Cancel\"\r\n                        class=\"ui-button-secondary\"></button>\r\n        </p-footer>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Term Override Expression Builder\" [(visible)]=\"addEditIndustry\" [modal]=\"true\"\r\n        [style]=\"{width: '95vw'}\" [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\"\r\n        [draggable]=\"true\" [resizable]=\"true\" [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n        <div class=\"row\">\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Term Name:\r\n                        </label>\r\n                        <textarea pInputTextarea [(ngModel)]=\"termName\" cols=\"30\" disabled></textarea>\r\n                        <label>\r\n                                Definition:\r\n                        </label>\r\n                        <textarea pInputTextarea cols=\"150\" [(ngModel)]=\"definition\" disabled></textarea>\r\n\r\n                </div>\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Term Code:\r\n                        </label>\r\n                        <textarea pInputTextarea [(ngModel)]=\"termCode\" cols=\"30\" disabled></textarea>\r\n\r\n                </div>\r\n        </div>\r\n        <div class=\"row\">\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Companies/Industries to override:\r\n                        </label>\r\n                </div>\r\n\r\n        </div>\r\n        <div class=\"row\">\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Override Name:\r\n                        </label>\r\n                </div>\r\n                <div class=\"column2\">\r\n                        <!-- <p-dropdown [options]=\"indovrDrpList\" [(ngModel)]=\"overrideName\" placeholder=\"Enter Override Name\" optionLabel=\"name\"  [style]=\"{'width':'400px'}\" [showClear]=\"true\"></p-dropdown> -->\r\n                        <p-autoComplete [(ngModel)]=\"overrideName\" [suggestions]=\"companyovrRideList\"\r\n                                (completeMethod)=\"getOverRides($event)\" (onSelect)=\"getCurrentOverrideDetails()\"\r\n                                field=\"name\"></p-autoComplete>\r\n                        <!-- <input id=\"typeahead-http\" type=\"text\" class=\"form-control mx-sm-3\"  [selectItem]=\"getCurrentOverrideDetails()\"\r\n                        [class.is-invalid]=\"searchFailed\" [(ngModel)]=\"overrideName\" [ngbTypeahead]=\"termRule.overrides\" placeholder=\"Enter Override Name\" /> -->\r\n                </div>\r\n                <div class=\"column\">\r\n                        <p-checkbox [(ngModel)]=\"mergeBaseExpressions\" binary=\"true\" label=\" Merge Base Expressions?\">\r\n                        </p-checkbox>\r\n\r\n\r\n                </div>\r\n\r\n        </div>\r\n        <!-- <div class=\"row\" *ngIf=\"searchFailed\">Sorry, suggestions could not be loaded.</div> -->\r\n        <div class=\"row\" style=\"height: 5px;\"></div>\r\n        <div *ngFor=\"let overrides of entityOverrides; let i = index\" [attr.data-index]=\"i\">\r\n                <div class=\"row\">\r\n                        <div class=\"column\">\r\n                                <label>\r\n                                        Company:\r\n                                </label>\r\n                        </div>\r\n                        <div class=\"column\">\r\n                                <p-autoComplete [(ngModel)]=\"overrides.entityname\" name=\"overridecompanyName\"\r\n                                        [size]=\"50\" [suggestions]=\"filteredCompany\"\r\n                                        (completeMethod)=\"searchCompany($event)\" placeholder=\"Search Company\"\r\n                                        [dropdown]=\"true\">\r\n                                </p-autoComplete>\r\n                        </div>\r\n\r\n                </div>\r\n                <div class=\"row\" style=\"height: 5px;\"></div>\r\n                <div class=\"row\" style=\"width: 100%\">\r\n                        <div class=\"column\">\r\n\r\n                                <label>\r\n                                        Division -> Sector:</label>\r\n\r\n                        </div>\r\n                        <div class=\"column\">\r\n                                <p-autoComplete [(ngModel)]=\"overrides.divisionSector\" name=\"overrideDivSec\" [size]=\"50\"\r\n                                        [suggestions]=\"filtereddivSector\"\r\n                                        (completeMethod)=\"searchDivisionSector($event)\"\r\n                                        placeholder=\"Search Division Sector\" [dropdown]=\"true\">\r\n                                </p-autoComplete> &nbsp;&nbsp;\r\n                                <button type=\"button\" pButton (click)=\"removeOverride(i)\"\r\n                                        (keydown.enter)=\"removeOverride(i)\" icon=\"pi pi-trash\"\r\n                                        styleClass=\"ui-button-info\" pTooltip=\"Delete Override\"></button>\r\n                        </div>\r\n                </div>\r\n                <div class=\"row\" style=\"height: 5px;\"></div>\r\n        </div>\r\n        <div class=\"row\" style=\"width: 100%\">\r\n                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                        <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"addAnotherIndustryOverride()\"\r\n                                label=\"Add + Another Company/Industry\"\r\n                                class=\"ui-button-rounded ui-button-success\"></button>\r\n                </div>\r\n        </div>\r\n        <div>\r\n                <p-tabView [activeIndex]=\"index\" (onChange)=\"onTabChange($event)\">\r\n                        <p-tabPanel header=\"Concept Match\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"width: 90%; padding-left: 20px\">\r\n                                        <label>\r\n                                                Concept Name:\r\n                                        </label>\r\n                                        <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\"\r\n                                                [suggestions]=\"filteredconcMat\"\r\n                                                (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" [size]=\"170\"\r\n                                                placeholder=\"Concept Match\" [minLength]=\"3\"\r\n                                                (ngModelChange)=\"getconceptNameDefinition()\"></p-autoComplete>\r\n                                        <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                                                {{conceptNameDefinition}}\r\n                                        </div>\r\n                                        <div>\r\n                                                <p-checkbox label=\"Use Positive Facts Only\"\r\n                                                        [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Use Negative Facts Only\"\r\n                                                        [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Reverse Negative Facts\"\r\n                                                        [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                Axis:\r\n                                                        </label>\r\n                                                </div>\r\n\r\n                                                <div class=\"column\">\r\n                                                        <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"axis\"\r\n                                                                placeholder=\"specify axis name\">\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column2\">\r\n                                                        <label>\r\n                                                                Members Exclusion (Virtual Parent):\r\n                                                        </label>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                <textarea pInputTextarea\r\n                                                                        [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                                                                        cols=\"150\"\r\n                                                                        placeholder=\"Enter Exclusion Members\"></textarea>\r\n                                                        </label>\r\n\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Concept Match w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <label>\r\n                                                Concept Name:\r\n                                        </label>\r\n                                        <p-autoComplete required=\"true\" [(ngModel)]=\"concMatch\"\r\n                                                [suggestions]=\"filteredconcMat\"\r\n                                                (completeMethod)=\"filterConceptMatch($event)\" field=\"id\" [size]=\"170\"\r\n                                                placeholder=\"Concept Match\" [minLength]=\"3\"\r\n                                                (ngModelChange)=\"getconceptNameDefinition()\"></p-autoComplete>\r\n                                        <div class=\"padding-5\" style=\"background-color: #ccc; text-align: left\">\r\n                                                {{conceptNameDefinition}}\r\n                                        </div>\r\n                                        <div>\r\n                                                <p-checkbox name=\"useMaxAxisCount\" value=\"useMaxAxisCount\"\r\n                                                        label=\"Max # Axes/Members:\" [(ngModel)]=\"useMaxAxisCount\"\r\n                                                        inputId=\"useMaxAxisCount\"></p-checkbox>&nbsp;\r\n                                                <input type=\"number\" min=\"0\" id=\"maxAxisCount\" name=\"maxAxisCount\"\r\n                                                        [(ngModel)]=\"maxAxisCount\">\r\n                                        </div>\r\n                                        <div *ngFor=\"let expressionSet of expressionSets; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n\r\n                                                <div class=\"row\">\r\n\r\n                                                        <div class=\"conceptcolumn\">\r\n                                                                <div class=\"row\">\r\n\r\n\r\n                                                                        <div class=\"conceptcolumn1\"> <label>\r\n                                                                                        Axes:\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"axisOptions{{i}}\"\r\n                                                                                        value=\"ExactMatch\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisType\"\r\n                                                                                        id=\"axsFullNameOption\"\r\n                                                                                        (onClick)=\"OnExpressionAxisTypeChanged(i); expressionSet.disableAxes=false;expressionSet.disableAxesInc=true\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <input type=\"text\" size=\"30\" pInputText\r\n                                                                                        [(ngModel)]=\"expressionSet.axisName\"\r\n                                                                                        placeholder=\"specify axis name\"\r\n                                                                                        [disabled]=\"expressionSet.disableAxes\">\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"axisOptions{{i}}\"\r\n                                                                                        id=\"axisPartialNameOption\"\r\n                                                                                        value=\"InclusionExclusionList\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisType\"\r\n                                                                                        (onClick)=\"OnExpressionAxisTypeChanged(i);expressionSet.disableAxesInc=false;expressionSet.disableAxes=true\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Inclusions(axis name must\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        id=\"axisInclusionList\"\r\n                                                                                        name=\"axisInclusionList\"\r\n                                                                                        [disabled]=\"expressionSet.disableAxesInc\"\r\n                                                                                        placeholder=\"Enter Inclusion Axes\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisInclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Axes\"\r\n                                                                                        (onChange)=\"expressionSet.axisInclusionList = buildListFromString(expressionSet.axisInclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Exclusions (axis name must NOT\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        id=\"axisExclusions\"\r\n                                                                                        name=\"axisExclusions\"\r\n                                                                                        [disabled]=\"expressionSet.disableAxesInc\"\r\n                                                                                        [(ngModel)]=\"expressionSet.axisExclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Axes\"\r\n                                                                                        (onChange)=\"expressionSet.axisExclusionList = buildListFromString(expressionSet.axisExclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"conceptcolumn\">\r\n                                                                <div class=\"row\">\r\n\r\n\r\n                                                                        <div class=\"conceptcolumn1\">\r\n                                                                                <label>\r\n                                                                                        Members:\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"memberOptions{{i}}\"\r\n                                                                                        id=\"anyMemberOption\" value=\"Any\"\r\n                                                                                        [(ngModel)]=\"expressionSet.memberType\"\r\n                                                                                        (onClick)=\"OnExpressionMemberTypeChanged(i)\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Any Members:\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"memberOptions{{i}}\"\r\n                                                                                        value=\"ExactMatch\"\r\n                                                                                        [(ngModel)]=\"expressionSet.memberType\"\r\n                                                                                        (onClick)=\"OnExpressionMemberTypeChanged(i); expressionSet.disableMember=false;expressionSet.disableMemInc=true\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <input type=\"text\" size=\"30\" pInputText\r\n                                                                                        [(ngModel)]=\"expressionSet.memberName\"\r\n                                                                                        placeholder=\"specify member name\"\r\n                                                                                        [disabled]=\"expressionSet.disableMember\">\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                                <p-radioButton name=\"memberOptions{{i}}\"\r\n                                                                                        value=\"InclusionExclusionList\"\r\n                                                                                        [(ngModel)]=\"expressionSet.memberType\"\r\n                                                                                        inputId=\"partialMemberOption\"\r\n                                                                                        (onClick)=\"OnExpressionMemberTypeChanged(i);expressionSet.disableMember=true; expressionSet.disableMemInc=false\">\r\n                                                                                </p-radioButton>\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Inclusions(member name must\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        [(ngModel)]=\"expressionSet.memberInclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Members\"\r\n                                                                                        [disabled]=\"expressionSet.disableMemInc\"\r\n                                                                                        (onChange)=\"expressionSet.memberInclusionList = buildListFromString(expressionSet.memberInclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <label>\r\n                                                                                        Exclusions (member name must NOT\r\n                                                                                        contain the list of words):\r\n                                                                                </label>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div class=\"row\">\r\n                                                                        <div class=\"conceptcolumn1\">\r\n\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn2\">\r\n                                                                        </div>\r\n                                                                        <div class=\"conceptcolumn3\">\r\n                                                                                <textarea pInputTextarea\r\n                                                                                        [(ngModel)]=\"expressionSet.memberExclusionListAsString\"\r\n                                                                                        cols=\"50\"\r\n                                                                                        placeholder=\"Enter Exclusion Members\"\r\n                                                                                        [disabled]=\"expressionSet.disableMemInc\"\r\n                                                                                        (onChange)=\"expressionSet.memberExclusionList = buildListFromString(expressionSet.memberExclusionListAsString)\"></textarea>\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                </div>\r\n                                                <div style=\"float: center;\">\r\n                                                        <button type=\"button\" pButton icon=\"pi pi-times\"\r\n                                                                (click)=\"removeSet(i)\" label=\"Remove Set\"\r\n                                                                class=\"ui-button-rounded ui-button-success\"></button>\r\n\r\n                                                </div>\r\n\r\n                                        </div>\r\n                                        <div>\r\n                                                <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                                                        (click)=\"AddExpressionSet()\" label=\"Add New Set\"\r\n                                                        class=\"ui-button-rounded ui-button-success\"></button>\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Extended Check\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <div class=\"row\">\r\n                                                <div class=\"conceptcolumn\" style=\"width: 30%\">\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name Contains:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameContains\" cols=\"40\"\r\n                                                                                rows=\"5\" placeholder=\"Name Contains\"\r\n                                                                                (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name does not Contain:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameDoesNotContains\"\r\n                                                                                cols=\"40\" rows=\"5\"\r\n                                                                                placeholder=\"Name Does Not Contain\"\r\n                                                                                (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Balance Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"ExtendedGroup1\"\r\n                                                                                value=\"debit\" label=\"Debit\"\r\n                                                                                [(ngModel)]=\"balType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"ExtendedGroup1\"\r\n                                                                                value=\"credit\" label=\"Credit\"\r\n                                                                                [(ngModel)]=\"balType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"ExtendedGroup1\" value=\"na\"\r\n                                                                                label=\"NA\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                        <p-radioButton name=\"ExtendedGroup1\"\r\n                                                                                value=\"none\" label=\"Ignore\"\r\n                                                                                [(ngModel)]=\"balType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Period Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"perTypeGroup1\"\r\n                                                                                value=\"instant\" label=\"Instant\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"perTypeGroup1\"\r\n                                                                                value=\"duration\" label=\"duration\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\"\r\n                                                                                binary=\"true\" label=\"Share Item Type? \">\r\n                                                                        </p-checkbox>\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                </div>\r\n                                                <div class=\"conceptcolumn\"\r\n                                                        style=\"background-color: #ccc; width: 65%; height: 80%;\">\r\n                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                <div class=\"conceptcolumn3\" style=\"width: 100%\">\r\n                                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                                <div class=\"column1\">\r\n\r\n                                                                                        <label>\r\n                                                                                                Division ->\r\n                                                                                                Sector:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filtereddivSector\"\r\n                                                                                                placeholder=\"Select Division Sector\"\r\n                                                                                                [(ngModel)]=\"divSector\"\r\n                                                                                                [style]=\"{'width':'800px'}\"\r\n                                                                                                dropdownIcon=\"pi pi-chevron-down\"\r\n                                                                                                (onChange)=\"divSectorChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{divisionCount}}\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Industry: </label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredindustry\"\r\n                                                                                                [(ngModel)]=\"industry\"\r\n                                                                                                placeholder=\"Select Industry\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processIndustryChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'800px'}\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{sectorCount}}\r\n\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Filer Category:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredfilerCategory\"\r\n                                                                                                [(ngModel)]=\"filerCategory\"\r\n                                                                                                placeholder=\"Select Filer Category\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processfilCatChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'800px'}\">\r\n                                                                                        </p-dropdown>&nbsp;\r\n                                                                                        {{categoryCount}}\r\n                                                                                </div>\r\n\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                        <p-table #expressionTable\r\n                                                                                [columns]=\"expressioncols\"\r\n                                                                                [value]=\"expTableList\"\r\n                                                                                [paginator]=\"true\" [rows]=\"10\"\r\n                                                                                [responsive]=\"true\"\r\n                                                                                [rowsPerPageOptions]=\"[10,20,30]\"\r\n                                                                                [resizableColumns]=\"true\"\r\n                                                                                [reorderableColumns]=\"true\"\r\n                                                                                selectionMode=\"single\"\r\n                                                                                [(selection)]=\"termId\" dataKey=\"termId\"\r\n                                                                                (onRowSelect)=\"onRowClick($event)\"\r\n                                                                                (onRowUnselect)=\"onRowUnClick($event)\"\r\n                                                                                p-dataTable scrollHeight=\"100px\"\r\n                                                                                [scrollable]=\"true\"\r\n                                                                                scrollHeight=\"200px\">\r\n\r\n                                                                        </p-table>\r\n                                                                </div>\r\n                                                                <div style=\"float: left; padding: 10px;\">\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Resolve\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Include\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Exclude\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                </div>\r\n\r\n                                                        </div>\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Extended Check w/ Dim\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <div class=\"row\">\r\n                                                <div class=\"conceptcolumn\" style=\"width: 30%\">\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name Contains:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameContains\" cols=\"40\"\r\n                                                                                rows=\"5\" placeholder=\"Name Contains\"\r\n                                                                                (ngModelChange)=\"updateNameContains(nameContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Element Name does not Contain:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"nameDoesNotContains\"\r\n                                                                                cols=\"40\" rows=\"5\"\r\n                                                                                placeholder=\"Name Does Not Contain\"\r\n                                                                                (ngModelChange)=\"updateNameNotContains(nameDoesNotContains)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Balance Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"balType1\"\r\n                                                                                value=\"debit\" label=\"Debit\"\r\n                                                                                [(ngModel)]=\"balType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"balType1\" value=\"credit\"\r\n                                                                                label=\"Credit\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                        <p-radioButton name=\"balType1\" value=\"na\"\r\n                                                                                label=\"NA\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                        <p-radioButton name=\"balType1\" value=\"none\"\r\n                                                                                label=\"Ignore\" [(ngModel)]=\"balType\">\r\n                                                                        </p-radioButton> &nbsp;\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Period Type:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-radioButton name=\"radioGroup2\"\r\n                                                                                value=\"instant\" label=\"Instant\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n                                                                        <p-radioButton name=\"radioGroup2\"\r\n                                                                                value=\"duration\" label=\"duration\"\r\n                                                                                [(ngModel)]=\"perType\"></p-radioButton>\r\n                                                                        &nbsp;\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        &nbsp; <p-checkbox [(ngModel)]=\"isShareItemType\"\r\n                                                                                binary=\"true\" label=\"Share Item Type? \">\r\n                                                                        </p-checkbox>\r\n\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Axes:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea [(ngModel)]=\"axes\"\r\n                                                                                cols=\"40\" rows=\"5\"\r\n                                                                                placeholder=\"Enter Axes\"\r\n                                                                                (onChange)=\"updateAxes(axes)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <label>\r\n                                                                                Members:\r\n                                                                        </label>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                        <div class=\"row\">\r\n                                                                <div class=\"conceptcolumn3\">\r\n                                                                        <textarea pInputTextarea\r\n                                                                                [(ngModel)]=\"axesMembers\" cols=\"40\"\r\n                                                                                rows=\"5\" placeholder=\"Enter Members\"\r\n                                                                                (onChange)=\"updateAxesMembers(axesMembers)\"></textarea>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                </div>\r\n                                                <div class=\"conceptcolumn\"\r\n                                                        style=\"background-color: #ccc; width: 65%; height: 80%;\">\r\n                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                <div class=\"conceptcolumn3\" style=\"width: 100%\">\r\n                                                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                                                <div class=\"column1\">\r\n\r\n                                                                                        <label>\r\n                                                                                                Division ->\r\n                                                                                                Sector:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filtereddivSector\"\r\n                                                                                                placeholder=\"Select Division Sector\"\r\n                                                                                                [(ngModel)]=\"divSector\"\r\n                                                                                                [style]=\"{'width':'800px'}\"\r\n                                                                                                dropdownIcon=\"pi pi-chevron-down\"\r\n                                                                                                (onChange)=\"divSectorChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{divisionCount}}\r\n\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Industry: </label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredindustry\"\r\n                                                                                                [(ngModel)]=\"industry\"\r\n                                                                                                placeholder=\"Select Industry\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processIndustryChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'800px'}\">\r\n                                                                                        </p-dropdown>\r\n                                                                                        &nbsp; {{sectorCount}}\r\n\r\n                                                                                </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"row\">\r\n                                                                                <div class=\"column1\">\r\n                                                                                        <label>Filer Category:</label>\r\n\r\n                                                                                </div>\r\n                                                                                <div class=\"column2\">\r\n                                                                                        <p-dropdown\r\n                                                                                                [options]=\"filteredfilerCategory\"\r\n                                                                                                [(ngModel)]=\"filerCategory\"\r\n                                                                                                placeholder=\"Select Filer Category\"\r\n                                                                                                [showClear]=\"true\"\r\n                                                                                                (onChange)=\"processfilCatChange($event)\"\r\n                                                                                                [virtualScroll]=\"true\"\r\n                                                                                                [itemSize]=\"31\"\r\n                                                                                                filter=\"true\"\r\n                                                                                                [style]=\"{'width':'800px'}\">\r\n                                                                                        </p-dropdown>&nbsp;\r\n                                                                                        {{categoryCount}}\r\n                                                                                </div>\r\n\r\n                                                                        </div>\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                        <p-table #expressionTable\r\n                                                                                [columns]=\"expressioncols\"\r\n                                                                                [value]=\"expTableList\"\r\n                                                                                [paginator]=\"true\" [rows]=\"10\"\r\n                                                                                [responsive]=\"true\"\r\n                                                                                [rowsPerPageOptions]=\"[10,20,30]\"\r\n                                                                                [resizableColumns]=\"true\"\r\n                                                                                [reorderableColumns]=\"true\"\r\n                                                                                selectionMode=\"single\"\r\n                                                                                [(selection)]=\"termId\" dataKey=\"termId\"\r\n                                                                                (onRowSelect)=\"onRowClick($event)\"\r\n                                                                                (onRowUnselect)=\"onRowUnClick($event)\"\r\n                                                                                p-dataTable scrollHeight=\"100px\"\r\n                                                                                [scrollable]=\"true\"\r\n                                                                                scrollHeight=\"200px\">\r\n\r\n                                                                        </p-table>\r\n                                                                </div>\r\n                                                                <div style=\"float: left; padding: 10px;\">\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Resolve\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Include\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                        <button type=\"button\" pButton\r\n                                                                                (click)=\"editExpression=false\"\r\n                                                                                label=\"Exclude\"\r\n                                                                                class=\"ui-button-rounded ui-button-info\"></button>&nbsp;\r\n                                                                </div>\r\n\r\n                                                        </div>\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Formula\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\"\r\n                                [style]=\"{height: '500px'}\">\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <div *ngFor=\"let formulaSet of formulaSets; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n\r\n                                                <div class=\"row\" style=\"width: 100%\">\r\n\r\n                                                        <div class=\"conceptcolumn\" style=\"width: 100%\">\r\n                                                                <div class=\"row\" style=\"width: 100%\">\r\n\r\n\r\n                                                                        <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                                                <label>\r\n                                                                                        Term Name:\r\n                                                                                </label>\r\n                                                                                <p-autoComplete\r\n                                                                                        [(ngModel)]=\"formulaSet.termName\"\r\n                                                                                        name=\"formulaTermName\"\r\n                                                                                        [size]=\"50\"\r\n                                                                                        [suggestions]=\"formulaFilteredTerms\"\r\n                                                                                        (completeMethod)=\"searchTermNames($event)\"\r\n                                                                                        placeholder=\"Search Term Name\"\r\n                                                                                        [dropdown]=\"true\">\r\n                                                                                </p-autoComplete>&nbsp;\r\n                                                                                <p-checkbox\r\n                                                                                        [(ngModel)]=\"formulaSet.nullable\"\r\n                                                                                        binary=\"true\"></p-checkbox>\r\n                                                                                &nbsp;\r\n                                                                                <label>\r\n                                                                                        Allow Null? Operators:\r\n                                                                                </label>\r\n                                                                                <p-dropdown\r\n                                                                                        [options]=\"formulaOperatorsList\"\r\n                                                                                        [(ngModel)]=\"formulaSet.operation\"\r\n                                                                                        optionLabel=\"name\"\r\n                                                                                        [showClear]=\"true\"></p-dropdown>\r\n                                                                                &nbsp;\r\n                                                                                <button type=\"button\" pButton\r\n                                                                                        (click)=\"deleteFormula(i)\"\r\n                                                                                        (keydown.enter)=\"deleteFormula(i)\"\r\n                                                                                        icon=\"pi pi-trash\"\r\n                                                                                        styleClass=\"ui-button-info\"\r\n                                                                                        pTooltip=\"Delete Term Name\"></button>\r\n\r\n                                                                        </div>\r\n                                                                </div>\r\n\r\n                                                        </div>\r\n                                                </div>\r\n\r\n                                        </div>\r\n                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                        <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                                                                (click)=\"addAnotherFormula()\"\r\n                                                                label=\"Add + Another Term to Formula\"\r\n                                                                class=\"ui-button-rounded ui-button-success\"></button>\r\n                                                </div>\r\n                                        </div>\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Concept Match Multiple\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"width: 90%; padding-left: 20px\">\r\n                                        <div *ngFor=\"let conceptSet of conceptMatchMultipleList; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n                                                <div class=\"row\">\r\n                                                        <div class=\"column\">\r\n                                                                <label>\r\n                                                                        Concept Name:\r\n                                                                </label>\r\n                                                        </div>\r\n                                                        <div class=\"column\">\r\n                                                                <p-autoComplete [(ngModel)]=\"conceptMatchMultiple[i]\"\r\n                                                                        [suggestions]=\"filteredconcMat\"\r\n                                                                        (completeMethod)=\"filterConceptMatch($event)\"\r\n                                                                        [size]=\"80\" field=\"id\"\r\n                                                                        placeholder=\"Enter Concept Name\"\r\n                                                                        [minLength]=\"3\"></p-autoComplete>\r\n                                                                <button type=\"button\" pButton\r\n                                                                        (click)=\"deleteConceptMatchMultipleItem(i)\"\r\n                                                                        (keydown.enter)=\"deleteConceptMatchMultipleItem(i)\"\r\n                                                                        icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                                                                        pTooltip=\"Delete Concept\"></button>\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <button type=\"button\" pButton (click)=\"addAnotherConcept()\"\r\n                                                        label=\"Add + Another Concept\"\r\n                                                        class=\"ui-button-rounded ui-button-success\"></button>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <p-checkbox label=\"Use Positive Facts Only\"\r\n                                                        [(ngModel)]=\"usePositiveFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Use Negative Facts Only\"\r\n                                                        [(ngModel)]=\"useNegativeFacts\" binary=\"true\"></p-checkbox>\r\n                                                &nbsp;&nbsp;\r\n                                                <p-checkbox label=\"Reverse Negative Facts\"\r\n                                                        [(ngModel)]=\"revNegativeFacts\" binary=\"true\"></p-checkbox>\r\n\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                Axis:\r\n                                                        </label>\r\n                                                </div>\r\n\r\n                                                <div class=\"column\">\r\n                                                        <input type=\"text\" size=\"30\" pInputText [(ngModel)]=\"axis\"\r\n                                                                placeholder=\"specify axis name\">\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column2\">\r\n                                                        <label>\r\n                                                                Members Exclusion (Virtual Parent):\r\n                                                        </label>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"column\">\r\n                                                        <label>\r\n                                                                <textarea pInputTextarea\r\n                                                                        [(ngModel)]=\"virtualFactMemberExclusions\"\r\n                                                                        cols=\"150\"\r\n                                                                        placeholder=\"Enter Exclusion Members\"></textarea>\r\n                                                        </label>\r\n\r\n                                                </div>\r\n\r\n                                        </div>\r\n\r\n\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                </p-tabView>\r\n        </div>\r\n        <p-footer>\r\n                <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                        (click)=\"addEditIndustry=false; editExpression=false; saveExpression()\"\r\n                        label=\"Save Expression\"></button>\r\n                <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"addEditIndustry=false; editExpression=false;\"\r\n                        label=\"Cancel\" class=\"ui-button-secondary\"></button>\r\n        </p-footer>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Term Derived Zero Expression Builder\" [(visible)]=\"addEditDerived\" [modal]=\"true\"\r\n        [style]=\"{width: '95vw'}\" [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\"\r\n        [draggable]=\"true\" [resizable]=\"true\" [focusOnShow]=\"true\" [blockScroll]=\"true\">\r\n        <div class=\"row\">\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Term Name:\r\n                        </label>\r\n                        <textarea pInputTextarea [(ngModel)]=\"termName\" cols=\"30\" disabled></textarea>\r\n                        <label>\r\n                                Definition:\r\n                        </label>\r\n                        <textarea pInputTextarea cols=\"150\" [(ngModel)]=\"definition\" disabled></textarea>\r\n\r\n                </div>\r\n                <div class=\"column\">\r\n                        <label>\r\n                                Term Code:\r\n                        </label>\r\n                        <textarea pInputTextarea [(ngModel)]=\"termCode\" cols=\"30\" disabled></textarea>\r\n\r\n                </div>\r\n        </div>\r\n        <div class=\"row\" style=\"height: 5px;\"></div>\r\n\r\n        <div>\r\n                <p-tabView [activeIndex]=\"activeExpressionTabIndex\" (onChange)=\"onDerivedTabChange($event)\">\r\n                        <p-tabPanel header=\"Text Block Check\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"width: 90%; padding-left: 20px\">\r\n                                        <div *ngFor=\"let item of derivedZeroExpressionForEdit.textBlockList; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n                                                <div class=\"row\" style=\"width: 100%\">\r\n                                                        <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                                <label>\r\n                                                                        Text Block:\r\n                                                                </label>\r\n                                                                <label>\r\n                                                                        {{filteredtext[i]}}\r\n                                                                </label>\r\n\r\n                                                                <p-autoComplete [(ngModel)]=\"item.expressionItem\"\r\n                                                                        name=\"textblock\" [size]=\"100\" field=\"id\"\r\n                                                                        [suggestions]=\"filteredconcMat\"\r\n                                                                        (completeMethod)=\"filterConceptMatch($event)\"\r\n                                                                        placeholder=\"Search Term Name\">\r\n                                                                </p-autoComplete>\r\n                                                                <button type=\"button\" pButton\r\n                                                                        (click)=\"removeTextBlock(i)\"\r\n                                                                        (keydown.enter)=\"removeTextBlock(i)\"\r\n                                                                        icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                                                                        pTooltip=\"Delete Term Name\"></button>\r\n\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                        <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                                                                (click)=\"addAnotherTextBlock()\"\r\n                                                                label=\"Add + Another Text Block\"\r\n                                                                class=\"ui-button-rounded ui-button-success\"></button>\r\n                                                </div>\r\n                                        </div>\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Dependent Terms\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n\r\n                                <div style=\"padding-left: 20px\">\r\n                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                        <p-checkbox\r\n                                                                [(ngModel)]=\"derivedZeroExpressionForEdit.allTermsRequired\"\r\n                                                                binary=\"true\" label=\"Dependent on all terms?\">\r\n                                                        </p-checkbox>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div *ngFor=\"let item of derivedZeroExpressionForEdit.depTermNameList; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n                                                <div class=\"row\" style=\"width: 100%\">\r\n                                                        <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                                <label>\r\n                                                                        Term Name:\r\n                                                                </label>\r\n                                                        </div>\r\n\r\n                                                        <div class=\"conceptcolumn2\" style=\"width: 70%\">\r\n                                                                <p-autoComplete [(ngModel)]=\"item.expressionItem\"\r\n                                                                        name=\"formulaTermName\" [size]=\"100\"\r\n                                                                        [suggestions]=\"formulaFilteredTerms\"\r\n                                                                        (completeMethod)=\"searchTermNames($event)\"\r\n                                                                        placeholder=\"Search Term Name\"\r\n                                                                        [dropdown]=\"true\">\r\n                                                                </p-autoComplete>\r\n                                                                <button type=\"button\" pButton\r\n                                                                        (click)=\"removeDerivedTerm(i)\"\r\n                                                                        (keydown.enter)=\"removeDerivedTerm(i, false)\"\r\n                                                                        icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                                                                        pTooltip=\"Delete Term Entry\"></button>\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                        <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                                                                (click)=\"addAnotherItem(false)\"\r\n                                                                label=\"Add + Another Term\"\r\n                                                                class=\"ui-button-rounded ui-button-success\"></button>\r\n                                                </div>\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Exclusive Terms\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"padding-left: 20px\">\r\n\r\n                                        <div *ngFor=\"let item of derivedZeroExpressionForEdit.excTermNameList; let i = index\"\r\n                                                [attr.data-index]=\"i\">\r\n                                                <div class=\"row\" style=\"width: 100%\">\r\n                                                        <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                                <label>\r\n                                                                        Term Name:\r\n                                                                </label>\r\n                                                        </div>\r\n\r\n                                                        <div class=\"conceptcolumn2\" style=\"width: 70%\">\r\n                                                                <p-autoComplete [(ngModel)]=\"item.expressionItem\"\r\n                                                                        name=\"formulaTermName\" [size]=\"100\"\r\n                                                                        [suggestions]=\"formulaFilteredTerms\"\r\n                                                                        (completeMethod)=\"searchTermNames($event)\"\r\n                                                                        placeholder=\"Search Term Name\"\r\n                                                                        [dropdown]=\"true\">\r\n                                                                </p-autoComplete>\r\n                                                                <button type=\"button\" pButton\r\n                                                                        (click)=\"removeDerivedTerm(i)\"\r\n                                                                        (keydown.enter)=\"removeDerivedTerm(i, true)\"\r\n                                                                        icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                                                                        pTooltip=\"Delete Term Entry\"></button>\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\" style=\"width: 100%\">\r\n                                                <div class=\"conceptcolumn1\" style=\"width: 100%\">\r\n                                                        <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                                                                (click)=\"addAnotherItem(true)\"\r\n                                                                label=\"Add + Another Term\"\r\n                                                                class=\"ui-button-rounded ui-button-success\"></button>\r\n                                                </div>\r\n                                        </div>\r\n\r\n                                </div>\r\n                        </p-tabPanel>\r\n                        <p-tabPanel header=\"Exclusive Division->Sector\" leftIcon=\"pi pi-user\" rightIcon=\"pi pi-star\">\r\n                                <div style=\"width: 90%; padding-left: 20px\">\r\n                                        <div class=\"row\">\r\n                                                <div class=\"conceptcolumn1\">\r\n                                                        <label>Division -> Sector:</label>\r\n                                                </div>\r\n                                                <div class=\"column2\">\r\n                                                        <p-dropdown [options]=\"filteredDeriveddivSectors\"\r\n                                                                placeholder=\"Select Division Sector\"\r\n                                                                [(ngModel)]=\"deriveddivSector\"\r\n                                                                [style]=\"{'width':'800px'}\"\r\n                                                                dropdownIcon=\"pi pi-chevron-down\"\r\n                                                                (onChange)=\"derivedDivisionSeleted($event)\"\r\n                                                                [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                                                        </p-dropdown>\r\n                                                        <label>\r\n                                                                {{divisionCount}}\r\n                                                        </label>\r\n                                                </div>\r\n                                        </div>\r\n                                        <div class=\"row\">\r\n                                                <div class=\"conceptcolumn1\">\r\n                                                        <label>Industry: </label>\r\n\r\n                                                </div>\r\n                                                <div class=\"column2\">\r\n                                                        <p-dropdown [options]=\"filteredDerivedindustry\"\r\n                                                                placeholder=\"Select Industry\"\r\n                                                                [(ngModel)]=\"derivedindustry\"\r\n                                                                [style]=\"{'width':'800px'}\"\r\n                                                                dropdownIcon=\"pi pi-chevron-down\"\r\n                                                                (onChange)=\"industryChanged($event)\" filter=\"true\">\r\n                                                        </p-dropdown>\r\n                                                        <label>\r\n                                                                {{sectorCount}}\r\n                                                        </label>\r\n                                                </div>\r\n                                        </div>\r\n                                </div>\r\n                        </p-tabPanel>\r\n                </p-tabView>\r\n        </div>\r\n        <p-footer>\r\n                <button type=\"button\" pButton icon=\"pi pi-check\"\r\n                        (click)=\"addEditDerived=false; saveNewDerivedExpression()\"\r\n                        label=\"Save Derived Expression\"></button>\r\n                <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"addEditDerived=false; \" label=\"Cancel\"\r\n                        class=\"ui-button-secondary\"></button>\r\n        </p-footer>\r\n</p-dialog>\r\n"

/***/ }),

/***/ "./src/app/home/homeComponent.ts":
/*!***************************************!*\
  !*** ./src/app/home/homeComponent.ts ***!
  \***************************************/
/*! exports provided: HomeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomeComponent", function() { return HomeComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _homeService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./homeService */ "./src/app/home/homeService.ts");
/* harmony import */ var _domain_home__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../domain/home */ "./src/app/domain/home.ts");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var _domain_mappedEntity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../domain/mappedEntity */ "./src/app/domain/mappedEntity.ts");
/* harmony import */ var _domain_termRule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../domain/termRule */ "./src/app/domain/termRule.ts");
/* harmony import */ var _domain_editExpression__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../domain/editExpression */ "./src/app/domain/editExpression.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var app_app_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! app/app.component */ "./src/app/app.component.ts");
/* harmony import */ var _ng_idle_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ng-idle/core */ "./node_modules/@ng-idle/core/fesm5/ng-idle-core.js");
/* harmony import */ var _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ng-idle/keepalive */ "./node_modules/@ng-idle/keepalive/fesm5/ng-idle-keepalive.js");
/* harmony import */ var app_services_login_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! app/services/login.service */ "./src/app/services/login.service.ts");














var HomeComponent = /** @class */ (function () {
    function HomeComponent(homeService, app, router, home, utilService, mappedEntity, rule, confirmationService, editForExpression, idle, keepalive, login) {
        var _this = this;
        this.homeService = homeService;
        this.app = app;
        this.router = router;
        this.home = home;
        this.utilService = utilService;
        this.mappedEntity = mappedEntity;
        this.rule = rule;
        this.confirmationService = confirmationService;
        this.editForExpression = editForExpression;
        this.idle = idle;
        this.keepalive = keepalive;
        this.login = login;
        this.subscription = [];
        this.termRuleByStatList = [];
        this.trmRulFinStatmntList = [];
        this.trmRulPriorGrpList = [];
        this.periodTypeList = [{ name: "instant" }, { name: "duration" }, { name: "na" }];
        this.typeList = [{ name: "decimal" }, { name: "integer" }, { name: "monetary" }, { name: "perShare" }, { name: "ratio" }, { name: "shares" }, { name: "na" }];
        this.expressionTypes = ["ConceptMatch", "ConceptMatchWithDim", "ExtendedCheck", "ExtendedCheckWithDim", "Formula", "ConceptMatchMultiple"];
        this.rulePeriodTypes = ["instant", "duration", "na"];
        this.balanceTypes = ["debit", "credit", "na", "none"];
        this.ruleTypes = ["decimal", "integer", "monetary", "perShare", "ratio", "shares", "na"];
        this.derivedZeroTypes = ["NoteBlockExistsCheck", "DependentTermCheck", "ExclusiveTermCheck", "IndustryExclusionCheck"];
        this.populateList = [];
        this.uncategorizedPopulateList = [];
        this.msgs = [];
        this.termTree = [];
        this.expTableList = [];
        this.expressionList = [];
        this.validationList = [];
        this.indOvrrideList = [];
        this.dervdZroExpList = [];
        this.completeEntities = [];
        this.filerCategory = null;
        this.quaterly = true;
        this.errorMsg = '';
        this.chartUrl = '/api/TermRulesStatisticsForCriteria';
        this.isAdminUser = true;
        this.index = 0;
        this.conceptNameDefinition = "";
        this.exprStr = "isExtended";
        this.containsWords = [];
        this.doesNotContainsWords = [];
        this.nameDoesNotContains = [];
        this.nameContains = [];
        this.extendedEntitiesLookup = [];
        this.formulaOperatorsList = [{ name: "" }, { name: "+" }, { name: "-" }, { name: "*" }, { name: "/" }];
        this.termRuleLists = [];
        this.derivedZeroExpressionForEdit = {};
        this.activeExpressionTabIndex = 0;
        this.excludeEntitiesFilter = {};
        this.filteredDeriveddivSectors = [];
        this.deriveddivSector = '';
        this.derivedindustry = '';
        this.filteredDerivedindustry = [];
        this.derivedRank = true;
        // this are for enabling and disabling purpos
        this.displayTerms = false;
        this.processnow = false;
        this.displayGetCoverage = false;
        this.filteredtext = [];
        this.startYear = (new Date()).getFullYear() - 4;
        this.endYear = (new Date()).getFullYear();
        this.range = [(new Date()).getFullYear() - 4, (new Date()).getFullYear()];
        this.minYear = (new Date()).getFullYear() - 4;
        this.maxYear = (new Date()).getFullYear();
        this.timedOut = false;
        this.lastPing = null;
        this.getFormulaExpression = function (expr) {
            var exprStr = "";
            for (var i = 0; i < expr.formulaList.length; i++) {
                var formula = expr.formulaList[i];
                if (!formula) {
                    continue;
                }
                var term = "sec:" + formula.termName;
                if (!term) {
                    continue;
                }
                if (formula.nullable) {
                    term = term + "=0";
                }
                exprStr = exprStr + this.surroundTextWith(term, "{", "}", true);
                if (formula.operation) {
                    var operation = formula.operation.name ? formula.operation.name : formula.operation;
                    exprStr = exprStr + " " + operation;
                }
            }
            return exprStr;
        };
        this.getExtendedCheckExpression = function (expression) {
            //console.log("name contains expression:  " + JSON.stringify(expression));
            var exprStr = "isExtended";
            var nameContainsExpr = this.arrayToExpression(expression.containsWords, " && ", 'nameContains(', ')');
            if (nameContainsExpr && nameContainsExpr.indexOf('nameContains') >= 0) {
                exprStr = exprStr + " && " + nameContainsExpr;
            }
            //console.log("name contains expression:  " + exprStr);
            var notContainsExpr = this.arrayToExpression(expression.doesNotContainsWords, " && ", 'nameNotContains(', ')');
            if (notContainsExpr && notContainsExpr.indexOf('nameNotContains') >= 0) {
                exprStr = exprStr + " && " + notContainsExpr;
            }
            //console.log("name not contains expression:  " + exprStr);
            if (expression.balType === this.balanceTypes[0]) {
                exprStr = exprStr + " && isDebit";
            }
            if (expression.balType === this.balanceTypes[1]) {
                exprStr = exprStr + " && isCredit";
            }
            if (expression.balType === this.balanceTypes[2]) {
                exprStr = exprStr + " && isNA";
            }
            if (expression.perType === this.rulePeriodTypes[0]) {
                exprStr = exprStr + " && isInstant";
            }
            if (expression.perType === this.rulePeriodTypes[1]) {
                exprStr = exprStr + " && isDuration";
            }
            if (expression.isShareItemType) {
                exprStr = exprStr + " && isShareItemType";
            }
            return exprStr;
        };
        this.getDimensionExpression = function (expression) {
            var dim = {};
            dim.memberExpression = this.arrayToExpression(expression.NamedMemberList, " || ", "{", "}");
            dim.axisExpression = this.arrayToExpression(expression.NamedAxisList, " || ", "{", "}");
            return dim;
        };
        this.checkFormulas = function () {
            console.log("checking formulas add allowed");
            var allowAdd = true;
            for (var x = 0; x < this.formulaSets.length; x++) {
                var formula = this.formulaSets[x];
                if (!formula.termName) {
                    console.log("failed validation: " + JSON.stringify(formula));
                    allowAdd = false;
                    break;
                }
                else {
                    if (x !== (this.formulaSets.length - 1) && !formula.operation) {
                        console.log("failed validation: " + JSON.stringify(formula));
                        allowAdd = false;
                        break;
                    }
                }
                //|| !formula.operation
            }
            console.log("checking formulas add allowed: " + allowAdd);
            return allowAdd;
        };
        this.removeOverride = function (index) {
            this.entityOverrides.splice(index, 1);
        };
        this.editDerivedZeroExpression = function (index) {
            this.activeExpressionTabIndex = 3;
            this.derivedZeroExpressionForEdit = this.termRule.derivedZeroExpressions[index];
        };
        this.app.showmenu = true;
        this.chart = {};
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
        idle.setIdle(1800);
        idle.setTimeout(5);
        idle.setInterrupts(_ng_idle_core__WEBPACK_IMPORTED_MODULE_11__["DEFAULT_INTERRUPTSOURCES"]);
        idle.onIdleEnd.subscribe(function () {
            _this.reset();
        });
        idle.onTimeout.subscribe(function () {
            _this.timedOut = true;
            _this.login.logout();
            _this.router.navigate(['/login']);
        });
        idle.onTimeoutWarning.subscribe(function (countdown) {
        });
        if (this.login.currentUserValue) {
            this.router.navigate(['/home']);
        }
        else {
            this.router.navigate(['/login']);
        }
        keepalive.interval(15);
        keepalive.onPing.subscribe(function () { return _this.lastPing = new Date(); });
        this.resetPage();
    }
    HomeComponent.prototype.resetPage = function () {
        this.idle.watch();
        this.timedOut = false;
    };
    HomeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.termRule = new _domain_termRule__WEBPACK_IMPORTED_MODULE_7__["TermRule"];
        //this.expressionForEdit = null;
        this.expressionName = 'Expression';
        this.display = true;
        this.errorMsg = '';
        this.progressSpinner = false;
        this.refresh();
        console.log('homeComponent : calling ngOnInit...');
        this.expressioncols = this.home.homeCols();
        this.getRuleList();
        this.getTermRuleOptions();
        this.getUserRole();
        this.utilService.getCompanyList().subscribe(function (response) { _this.companyList = response; });
        this.utilService.getDivSectorList().subscribe(function (response) {
            _this.divSectorList = response;
            _this.filtereddivSector = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filtereddivSector.push(name);
            });
        });
        this.utilService.getIndustryList().subscribe(function (response) { _this.industryList = response; });
        this.utilService.getFilerCategoryList().subscribe(function (response) {
            _this.filerCategoryList = response;
            _this.filteredfilerCategory = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filteredfilerCategory.push(name);
            });
        });
        this.utilService.getCompleteCompanyList().subscribe(function (response) { _this.completeCompanyList = response; });
        this.addTerm();
    };
    // This method gets all pre options on home page
    HomeComponent.prototype.getTermRuleOptions = function () {
        this.trmRulFinStatmntList;
        this.getPriorityGrpList();
    };
    HomeComponent.prototype.getUserRole = function () {
        var _this = this;
        this.utilService.getUserRolesList().subscribe(function (response) {
            _this.isAdminUser = response.includes('admin');
        }, function (error) { return console.log(error); });
    };
    // This method gets all the term rule in home page
    HomeComponent.prototype.getRuleList = function () {
        var _this = this;
        this.homeService.getTermRuleCategoryList().subscribe(function (response) {
            _this.trmRulFinStatmntList = response;
            _this.trmRulFinStatmntList[_this.trmRulFinStatmntList.length] = ({ "financialStatement": "Uncategorized" });
        }, function (error) { return console.log(error); });
        this.utilService.getTermRuleList().subscribe(function (response) {
            _this.termRulesList = response;
            _this.termRulesList = _this.termRulesList.sort(function (a, b) {
                if (a.termId < b.termId) {
                    return -1;
                }
                if (a.termId > b.termId) {
                    return 1;
                }
                return 0;
            });
            var _loop_1 = function () {
                _this.populateList = [];
                for (var j = 0; j < _this.termRulesList.length; j++) {
                    if (_this.trmRulFinStatmntList[i].financialStatement === _this.termRulesList[j].financialStatement) {
                        _this.populateList.push(_this.termRulesList[j]);
                    }
                }
                var home = new _domain_home__WEBPACK_IMPORTED_MODULE_4__["Home"]();
                home.label = _this.trmRulFinStatmntList[i].financialStatement;
                _this.populateList.forEach(function (obj) {
                    home.children.push({ "label": obj.termId + ' - ' + obj.name, "leaf": true, "key": obj.termId });
                    _this.termRuleLists.push(obj.name);
                });
                home.leaf = false;
                _this.termTree.push(home);
            };
            for (var i = 0; i < _this.trmRulFinStatmntList.length; i++) {
                _loop_1();
            }
        });
    };
    HomeComponent.prototype.termCodeChange = function ($event) {
        console.log(this.termCode);
        if (this.termCode != "" && this.termCode) {
            this.enableTermButton = false;
        }
        else {
            this.enableTermButton = true;
        }
    };
    HomeComponent.prototype.termTreeSelection = function ($event) {
        this.processnow = false;
        this.indovrDrpList = [];
        this.selIndOvrdExpr = null;
        this.indOvrdExprDrop = false;
        if ($event.node.key !== undefined) {
            console.log('selected: ' + $event.node.key);
            this.termId = $event.node.key;
            this.displayTerms = true;
            this.displayGetCoverage = false;
            this.enableTermButton = false;
            this.entitycols = this.home.homeEntityCols();
            this.expressionName = 'Expression';
            this.getTermBasedOnId($event.node.key);
            if (this.entityList) {
                this.showResolved(true);
            }
            else
                this.divisionCount = this.completeCompanyList.length;
            console.log(this.selectedTerm);
        }
    };
    HomeComponent.prototype.getPriorityGrpList = function () {
        var _this = this;
        this.homeService.getTermRulesPriorityGroupList().subscribe(function (response) {
            _this.trmRulPriorGrpList = response;
        });
    };
    HomeComponent.prototype.onTabChange = function (event) {
        this.index = event.index;
        this.expressionForEdit.type = this.expressionTypes[this.index];
    };
    HomeComponent.prototype.onExpressionEdit = function (rowdata) {
        //this.reset();
        //this.expressionList = rowdata.expression;
        if (this.expressionName === 'Expression') {
            this.expressionsEdit(rowdata);
        }
        if (this.expressionName === 'Validation') {
            this.showExpression = false;
            this.validationEdit(rowdata);
        }
        if (this.expressionName === 'Industry') {
            this.isOverrideExpressionForEdit = true;
            this.entityOverrides = [];
            this.addAnotherIndustryOverride();
            this.industryEdit(rowdata);
            this.expressionSets = [];
            this.formulaSets = [];
            this.AddExpressionSet();
            this.expressionsEdit(rowdata);
            this.editExpression = false;
        }
        if (this.expressionName === 'Derived') {
            this.derivedZeroExpressionForEdit = this.termRule.derivedZeroExpressions[rowdata.rank - 1];
            if (rowdata.type == 'NoteBlockExistsCheck') {
                this.derivedZeroExpressionForEdit.type = 'NoteBlockExistsCheck';
                this.activeExpressionTabIndex = 0;
            }
            if (rowdata.type == 'DependentTermCheck') {
                this.derivedZeroExpressionForEdit.type = 'DependentTermCheck';
                this.activeExpressionTabIndex = 1;
            }
            if (rowdata.type == 'ExclusiveTermCheck') {
                this.derivedZeroExpressionForEdit.type = 'ExclusiveTermCheck';
                this.activeExpressionTabIndex = 2;
            }
            if (rowdata.type == 'IndustryExclusionCheck') {
                this.derivedZeroExpressionForEdit.type = 'IndustryExclusionCheck';
                this.activeExpressionTabIndex = 3;
            }
            this.addEditDerived = true;
            this.prepareDerivedZeroExpressionForEdit();
        }
    };
    HomeComponent.prototype.industryEdit = function (rowdata) {
        this.addEditIndustry = true;
        this.editOverrideExpression(rowdata);
    };
    HomeComponent.prototype.validationEdit = function (rowdata) {
        this.addEditValidation = true;
        this.addvalidation = false;
        this.formulaFilteredTerms = this.termRuleLists;
        this.validationRank = rowdata.rank;
        if (rowdata.expression) {
            this.convertExpressionToFormula(rowdata.expression);
        }
        else {
            this.formulaSets = [];
            this.formulaOperatorsList;
            this.addAnotherFormula();
        }
    };
    HomeComponent.prototype.getconceptNameDefinition = function () {
        var _this = this;
        if (this.concMatch.id) {
            this.utilService.getTaxonomyElement(this.concMatch.id).subscribe(function (response) {
                _this.conceptNameDefinition = response.elementDefaultLabel + "\n" + response.elementDefinitionUS;
            });
        }
    };
    HomeComponent.prototype.expressionsEdit = function (rowdata) {
        this.index = 0;
        this.conceptNameDefinition = "";
        this.conceptMatchMultipleList = [];
        this.conceptMatchMultiple = [];
        // this.addAnotherConcept();
        this.concMatch = {};
        //this.expressionForEdit =new EditExpression;
        this.expressionForEdit = rowdata;
        if (rowdata.type == 'ConceptMatch') {
            this.index = 0;
        }
        if (rowdata.type == 'ConceptMatchWithDim') {
            this.index = 1;
        }
        if (rowdata.type == 'ExtendedCheck') {
            this.index = 2;
        }
        if (rowdata.type == 'ExtendedCheckWithDim') {
            this.index = 3;
        }
        if (rowdata.type == 'Formula') {
            this.index = 4;
        }
        if (rowdata.type == 'ConceptMatchMultiple') {
            this.index = 5;
        }
        this.conceptMatchExpression(rowdata);
        this.conceptMatchWithDim(rowdata);
        this.editExtendedCheck(rowdata);
        this.editExtendedCheckWithDim(rowdata);
        this.editFormula(rowdata);
        this.editConceptMultiple(rowdata);
        this.editExpression = true;
    };
    HomeComponent.prototype.reset = function () {
        this.concMatch = {};
        this.usePositiveFacts = false;
        this.useNegativeFacts = false;
        this.revNegativeFacts = false;
        this.axis = null;
        this.virtualFactMemberExclusions = [];
        this.axes = null;
        this.useMaxAxisCount = null;
        this.maxAxisCount = 0;
        this.expressionSets = [];
        this.nameContains = [];
        this.nameDoesNotContains = [];
        this.balType = null;
        this.perType = null;
        this.isShareItemType = false;
        this.divSector = null;
        this.industry = null;
        this.filerCategory = null;
        this.editExpression = false;
        this.axes = null;
        this.axesMembers = null;
        this.formulaSets = [];
        this.conceptMatchMultipleList = [];
        this.overrideName = null;
        this.mergeBaseExpressions = true;
        this.entityOverrides = [];
    };
    HomeComponent.prototype.conceptMatchExpression = function (rowdata) {
        var _this = this;
        if (rowdata.type === 'ConceptMatch') {
            if (rowdata.type === 'ConceptMatch') {
                this.concMatch = rowdata.expression.replace("{", "");
                this.concMatch = { 'id': this.concMatch.replace('}', "") };
                this.utilService.getTaxonomyElement(this.concMatch.id).subscribe(function (response) {
                    _this.conceptNameDefinition = response.elementDefaultLabel + "\n" + response.elementDefinitionUS;
                });
            }
            this.usePositiveFacts = rowdata.usePositiveValuesOnly;
            this.useNegativeFacts = rowdata.useNegativeValuesOnly;
            this.revNegativeFacts = rowdata.reverseNegativeValues;
            this.axis = rowdata.virtualFactAxis;
            this.virtualFactMemberExclusions = rowdata.virtualFactMemberExclusionList;
        }
    };
    HomeComponent.prototype.conceptMatchWithDim = function (rowdata) {
        var _this = this;
        if (rowdata.type === 'ConceptMatchWithDim') {
            if (rowdata.type === 'ConceptMatchWithDim') {
                this.concMatch = rowdata.expression.replace("{", "");
                this.concMatch = { 'id': this.concMatch.replace('}', "") };
                this.utilService.getTaxonomyElement(this.concMatch.id).subscribe(function (response) {
                    _this.conceptNameDefinition = response.elementDefaultLabel + "\n" + response.elementDefinitionUS;
                });
            }
            this.useMaxAxisCount = rowdata.useMaxAxisCount;
            this.maxAxisCount = rowdata.maxAxisCount;
            if (!rowdata.dimensionExpressionSets && rowdata.dimensionExpressionSets == null) {
                this.expressionSets = [];
                this.AddExpressionSet();
            }
            else {
                //this.expressionSets = rowdata.dimensionExpressionSets;
                this.expressionSets = [];
                rowdata.dimensionExpressionSets.forEach(function (expSet) {
                    expSet.axisInclusionListAsString = _this.arrayToExpression(expSet.axisInclusionList, "\n", false, false);
                    expSet.axisExclusionListAsString = _this.arrayToExpression(expSet.axisExclusionList, "\n", false, false);
                    expSet.memberInclusionListAsString = _this.arrayToExpression(expSet.memberInclusionList, "\n", false, false);
                    expSet.memberExclusionListAsString = _this.arrayToExpression(expSet.memberExclusionList, "\n", false, false);
                    if (expSet.memberInclusionListAsString || expSet.memberExclusionListAsString) {
                        expSet.disableMember = true;
                        expSet.disableMemInc = false;
                    }
                    if (expSet.axisExclusionListAsString || expSet.axisInclusionListAsString) {
                        expSet.disableAxes = true;
                        expSet.disableAxesInc = false;
                    }
                    _this.expressionSets.push(expSet);
                });
            }
        }
    };
    HomeComponent.prototype.editExtendedCheck = function (rowdata) {
        if (rowdata.type === 'ExtendedCheck') {
            this.nameContains = this.splitTextToArray(rowdata.containsWords, "\n");
            this.nameDoesNotContains = this.splitTextToArray(rowdata.doesNotContainsWords, "\n");
            this.balType = rowdata.balType;
            this.perType = rowdata.perType;
            this.isShareItemType = rowdata.isShareItemType;
        }
    };
    HomeComponent.prototype.editExtendedCheckWithDim = function (rowdata) {
        if (rowdata.type === 'ExtendedCheckWithDim') {
            this.nameContains = this.splitTextToArray(rowdata.containsWords, "\n");
            this.nameDoesNotContains = this.splitTextToArray(rowdata.doesNotContainsWords, "\n");
            this.balType = rowdata.balType;
            this.perType = rowdata.perType;
            this.isShareItemType = rowdata.isShareItemType;
            this.axes = this.arrayToExpression(rowdata.NamedAxisList, "\n", false, false);
            this.axesMembers = this.arrayToExpression(rowdata.NamedMemberList, "\n", false, false);
        }
    };
    HomeComponent.prototype.editFormula = function (rowdata) {
        var _this = this;
        this.formulaSets = [];
        this.formulaFilteredTerms = this.termRuleLists;
        if (rowdata.type === 'Formula') {
            if (rowdata.formulaList) {
                rowdata.formulaList.forEach(function (obj) {
                    var formula = { termName: obj.termName, nullable: obj.nullable, operation: { name: obj.operation } };
                    _this.formulaSets.push(formula);
                });
            }
        }
        else {
            this.formulaOperatorsList;
            this.addAnotherFormula();
        }
    };
    HomeComponent.prototype.editConceptMultiple = function (rowdata) {
        var _this = this;
        if (rowdata.type === 'ConceptMatchMultiple') {
            this.conceptMatchMultiple = [];
            this.conceptMatchMultipleList = [];
            if (!rowdata.conceptMatchMultipleList) {
                this.addAnotherConcept();
            }
            else {
                rowdata.conceptMatchMultipleList.forEach(function (obj) {
                    _this.conceptMatchMultipleList.push(obj);
                    _this.conceptMatchMultiple.push({ id: obj });
                });
            }
        }
    };
    HomeComponent.prototype.addAnotherFormula = function () {
        var formula = { termName: "", nullable: false, operation: "" };
        this.formulaSets.push(formula);
    };
    HomeComponent.prototype.AddExpressionSet = function () {
        var termExpressionSet = {};
        termExpressionSet.axisType = "ExactMatch";
        termExpressionSet.memberType = "ExactMatch";
        termExpressionSet.disableAxes = false;
        termExpressionSet.disableMember = false;
        termExpressionSet.disableAxesInc = true;
        termExpressionSet.disableMemInc = true;
        termExpressionSet.axisInclusionListAsString = "";
        termExpressionSet.axisExclusionListAsString = "";
        termExpressionSet.axisInclusionList = [];
        termExpressionSet.axisExclusionList = [];
        termExpressionSet.memberName = "";
        termExpressionSet.axisName = "";
        termExpressionSet.memberInclusionListAsString = "";
        termExpressionSet.memberExclusionListAsString = "";
        termExpressionSet.memberInclusionList = [];
        termExpressionSet.memberExclusionList = [];
        this.expressionSets.push(termExpressionSet);
    };
    HomeComponent.prototype.removeSet = function (index) {
        this.expressionSets.splice(index, 1);
    };
    ;
    HomeComponent.prototype.addAnotherConcept = function () {
        if (!this.conceptMatchMultipleList) {
            this.conceptMatchMultipleList = [];
        }
        var conceptExpression = "";
        this.conceptMatchMultipleList.push(conceptExpression);
    };
    ;
    HomeComponent.prototype.deleteConceptMatchMultipleItem = function (index) {
        this.conceptMatchMultipleList.splice(index, 1);
    };
    ;
    HomeComponent.prototype.getTermBasedOnId = function (id) {
        var _this = this;
        this.showError = false;
        this.homeService.getTermRule(id).subscribe(function (response) {
            _this.termRule = response;
            _this.definition = response.description;
            _this.termCode = response.termId;
            if (_this.termCode != "") {
                _this.enableTermCode = true;
            }
            else {
                _this.enableTermCode = false;
            }
            _this.termName = response.name;
            _this.periodType = { name: response.periodType };
            _this.type = { name: response.type };
            _this.incAccuTest = response.includeInAccuracyTests;
            _this.finStatement = { financialStatement: response.financialStatement };
            _this.priorgroup = { name: response.priorityGroup };
            _this.processingOrder = response.order;
            _this.expTableList = response.expressions;
            _this.expLabel = 'Add Expression';
            _this.expressionList = [];
            _this.expressionList = response.expressions;
            _this.validationList = [];
            if (response.validationExpressions)
                response.validationExpressions.forEach(function (obj) {
                    obj.type = 'V';
                    _this.validationList.push(obj);
                });
            // this.validationList = response.validationExpressions;
            _this.indOvrrideList = [];
            _this.indOvrrideList = response.overrides;
            _this.dervdZroExpList = [];
            _this.dervdZroExpList = response.derivedZeroExpressions;
        });
    };
    HomeComponent.prototype.onExpressionButtonClick = function (type) {
        var _this = this;
        this.indovrDrpList = [];
        this.indOvrdExprDrop = false;
        this.selIndOvrdExpr = null;
        if (type == 'expressions') {
            this.expTableList = this.expressionList;
            this.expLabel = 'Add Expression';
            this.expressionName = 'Expression';
            return;
        }
        if (type == 'validations') {
            this.expTableList = this.validationList;
            this.expressionName = 'Validation';
            this.expLabel = 'Add Validations';
            return;
        }
        if (type == 'industry') {
            this.expTableList = [];
            if (this.indOvrrideList[0] != null) {
                this.indOvrrideList.forEach(function (obj) {
                    _this.expTableList = _this.indOvrrideList[0].expressions;
                    _this.indovrDrpList.push({ "name": obj.name });
                });
                this.selIndOvrdExpr = this.indovrDrpList[0].name;
                this.indOvrdExprDrop = true;
            }
            this.expressionName = 'Industry';
            this.expLabel = 'Add Industry Override Expressions';
            return;
        }
        if (type == 'derived') {
            this.expTableList = this.dervdZroExpList;
            this.expressionName = 'Derived';
            this.expLabel = 'Add Derived Zero Expressions';
            return;
        }
    };
    HomeComponent.prototype.industryChange = function () {
        var _this = this;
        this.selIndOvrdExpr;
        this.indOvrrideList.forEach(function (obj) {
            if (_this.selIndOvrdExpr.name == obj.name) {
                _this.expTableList = obj.expressions;
            }
        });
    };
    HomeComponent.prototype.expressionClick = function () {
        this.reset();
        if (this.expLabel === 'Add Expression') {
            this.expressionName = 'Expression';
            this.addingExpression();
        }
        if (this.expLabel === 'Add Validations') {
            this.expressionName = 'Validation';
            this.addValidations();
        }
        if (this.expLabel === 'Add Industry Override Expressions') {
            this.expressionName = 'Industry';
            this.entityOverrides = [];
            this.addAnotherIndustryOverride();
            this.addOverrideExpression();
            this.addEditIndustry = true;
        }
        if (this.expLabel === 'Add Derived Zero Expressions') {
            this.expressionName = 'Derived';
            this.addDerivedZeroExpression();
        }
    };
    HomeComponent.prototype.deleteFormula = function (index) {
        this.formulaSets.splice(index, 1);
    };
    HomeComponent.prototype.goToPeer = function (event) {
        var _this = this;
        this.errorMsg = '';
        this.showError = false;
        this.company = null;
        if (this.companyName != undefined && this.companyName.length > 15) {
            this.company = this.companyName.substr(0, this.companyName.length - 12);
            var peer = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.division = peer[0].division;
            this.sector = peer[0].sector;
            this.divSector = peer[0].division + ' -> ' + peer[0].sector;
            this.divSectorChange(this.divSector);
            this.industry = peer[0].sic + '-' + peer[0].industry;
            this.processIndustryChange(this.industry);
            this.filerCategory = peer[0].filerCategory;
            this.processfilCatChange(this.filerCategory);
            this.filterRadio = 'group';
        }
        else {
            window.scroll(0, 0);
            this.errorMsg = 'Please Select Company';
            this.showError = true;
        }
    };
    HomeComponent.prototype.searchCompany = function (event) {
        this.filteredCompany = [];
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i];
            if ((cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) || (cname != null && cname.toLowerCase().includes(event.query.toLowerCase()))) {
                this.filteredCompany.push(cname);
            }
        }
    };
    HomeComponent.prototype.searchIndustry = function (event) {
        this.filteredindustry = [];
        for (var i = 0; i < this.industryList.length; i++) {
            var cname = this.industryList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredindustry.push(cname);
            }
        }
    };
    HomeComponent.prototype.searchDivisionSector = function (event) {
        this.filtereddivSector = [];
        for (var i = 0; i < this.divSectorList.length; i++) {
            var cname = this.divSectorList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filtereddivSector.push(cname);
            }
        }
    };
    HomeComponent.prototype.derivedDivisionSeleted = function (event) {
        this.deriveddivSector;
        console.log(event.value);
        if (event.value) {
            var division = event.value.substr(0, event.value.indexOf('->') - 1);
            var sector = event.value.substr(event.value.indexOf('->') + 3, event.value.length);
            this.setExcDivSec(division, sector);
        }
    };
    HomeComponent.prototype.industryChanged = function (event) {
        console.log(event.value);
        var sic = event.value.substr(0, 4);
        var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === sic; });
        this.industryCount = completeEntities.length;
        this.categoryCount = completeEntities.length;
    };
    HomeComponent.prototype.searchFilerCategory = function (event) {
        this.filteredfilerCategory = [];
        for (var i = 0; i < this.filerCategoryList.length; i++) {
            var cname = this.filerCategoryList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredfilerCategory.push(cname);
            }
        }
    };
    HomeComponent.prototype.searchTermNames = function (event) {
        this.formulaFilteredTerms = [];
        for (var i = 0; i < this.termRuleLists.length; i++) {
            var cname = this.termRuleLists[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.formulaFilteredTerms.push(cname);
            }
        }
    };
    HomeComponent.prototype.resetCoverage = function () {
        this.companyName = undefined;
        this.divSector = undefined;
        this.filterRadio = undefined;
        this.division = undefined;
        this.sector = undefined;
        this.industry = undefined;
        this.divisionCount = this.completeCompanyList.length;
        this.industryCount = null;
        this.categoryCount = null;
        this.startYear = (new Date()).getFullYear() - 4;
        this.endYear = (new Date()).getFullYear();
        this.filerCategory = undefined;
        this.entityList = [];
        this.chart = {};
        this.errorMsg = '';
        this.showError = false;
    };
    HomeComponent.prototype.showResolved = function (isShow) {
        var _this = this;
        var mp = new _domain_mappedEntity__WEBPACK_IMPORTED_MODULE_6__["MappedEntity"]();
        var url = '/api/UnMappedEntitiesForCriteria';
        if (isShow) {
            url = '/api/MappedEntitiesForCriteria';
        }
        else {
            this.selectResolvedRank = undefined;
        }
        //url = '/api/UnMappedEntitiesForCriteria';
        mp.termRuleId = this.termId;
        this.showError = false;
        if (this.filterRadio !== 'group' && this.companyName != undefined && this.companyName.length > 15) {
            var selectionData = this.companyName;
            selectionData = selectionData.substring((selectionData.indexOf("(") + 1), selectionData.indexOf(")"));
            var entities = this.completeCompanyList.filter(function (obj) { return obj.entityId === selectionData; });
            var company = entities.length == 1 ? entities[0] : null;
            if (!company) {
                this.errorMsg = 'Please select a company, division->Sector or Filer Category before getting coverage statistics.';
                this.showError = true;
                window.scroll(0, 0);
                return;
            }
            else {
                mp.entityId = company.entityId;
            }
        }
        if (this.filterRadio === 'group' && (this.divSector === undefined)) {
            this.errorMsg = 'Please select a company, division->Sector or Filer Category before getting coverage statistics.';
            this.showError = true;
            window.scroll(0, 0);
            return;
        }
        this.displayGetCoverage = true;
        if (this.filterRadio === 'group' && this.division != undefined && this.sector != undefined) {
            mp.division = this.division;
            mp.sector = this.sector;
        }
        if (this.filterRadio === 'group' && this.divSector != '' && this.divSector != undefined) {
            mp.division = this.divSector.substr(0, this.divSector.indexOf('->') - 1);
            mp.sector = this.divSector.substr(this.divSector.indexOf('->') + 3, this.divSector.length);
            mp.entityId = 'NULL';
            mp.filerCategory = this.filerCategory;
            mp.rankId = 0;
            mp.minYear = this.startYear;
            mp.maxYear = this.endYear;
        }
        else {
            mp.division = "settoinvalid";
            mp.sector = "settoinvalid";
        }
        if (this.industry != undefined) {
            mp.sic = this.industry.substr(0, 4);
            mp.includeQuarterly = true;
        }
        else {
            mp.sic = 'NULL';
            mp.filerCategory = 'NULL';
            mp.includeQuarterly = this.quaterly;
        }
        if (this.selectResolvedRank) {
            mp.rankId = Number(this.selectResolvedRank);
        }
        this.homeService.getMappedEntityList(mp, this.chartUrl).subscribe(function (response) {
            _this.chartData = response;
            _this.resolvedRanks = [];
            _this.chartData.resultsByRank.forEach(function (obj) {
                var name = { label: obj, value: obj };
                var ranks = { label: 'Rank ' + obj.rankId + ' (' + obj.nonDistinctMappedEntityCount + ')', value: obj.rankId };
                _this.resolvedRanks.push(ranks);
            });
            _this.getChartData(_this.chartData);
        });
        this.homeService.getMappedEntityList(mp, url).subscribe(function (response) {
            _this.entityList = response;
            if (response.length === 0) {
                _this.homeService.getMappedEntityList(mp, '/api/UnMappedEntitiesForCriteria').subscribe(function (response) {
                    _this.entityList = response;
                    _this.entityList.forEach(function (obj) {
                        obj.show = false;
                    });
                });
            }
            else {
                _this.entityList.forEach(function (obj) {
                    obj.show = true;
                });
            }
        });
    };
    HomeComponent.prototype.showNotResolved = function () {
        this.displayGetCoverage = true;
    };
    HomeComponent.prototype.getChartData = function (data) {
        this.showError = false;
        this.chart = {
            labels: ['Unresolved', 'Resolved'],
            datasets: [
                {
                    data: [data.unMappedEntityCount, data.mappedEntityCount],
                    backgroundColor: [
                        "#FF6384",
                        "#36A2EB",
                        "#FFCE56"
                    ],
                    hoverBackgroundColor: [
                        "#FF6384",
                        "#36A2EB",
                        "#FFCE56"
                    ]
                }
            ]
        };
    };
    HomeComponent.prototype.getFormulaSuffix = function (formula) {
        if (formula.nullable && formula.nullable === true) {
            return "=0 " + formula.operation;
        }
        return formula.operation;
    };
    HomeComponent.prototype.showTermResultnavigate = function (event, data) {
        console.log(data);
        if (data !== undefined) {
            console.log('selected: ' + data);
            event.preventDefault();
            var term = this.getTermIdFromTermName(data);
            this.termId = term;
            this.displayTerms = true;
            this.displayGetCoverage = false;
            this.entitycols = this.home.homeEntityCols();
            this.getTermBasedOnId(term);
            console.log(term);
        }
    };
    HomeComponent.prototype.showTermResults = function (data) {
        this.router.navigate(['/termresults'], {
            state: {
                termName: this.termCode,
                entityId: data.entityId,
                companyName: data.companyName
            }
        });
    };
    HomeComponent.prototype.getTermIdOrEntityName = function (inputValue) {
        var outputValue = inputValue.substring((inputValue.indexOf("(") + 1), inputValue.indexOf(")"));
        return outputValue;
    };
    HomeComponent.prototype.getTermIdFromTermName = function (termName) {
        for (var i = 0; i < this.termRulesList.length; i++) {
            var termRule = this.termRulesList[i];
            if (termRule.name === termName) {
                return termRule.termId;
            }
        }
        return "LSE";
    };
    HomeComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    HomeComponent.prototype.moveRankBy = function (index, amount) {
        this.msgs = [];
        var e1 = Object.assign(this.expressionList[index]);
        var e2 = Object.assign(this.expressionList[index + amount]);
        console.log("e1:" + e1);
        console.log("e2:" + e2);
        console.log(e1.rank + " will be moved to " + e2.rank);
        e2.rank = index + 1;
        e1.rank = index + amount + 1;
        this.expressionList[index] = e2;
        this.expressionList[index + amount] = e1;
        //utilService.saveTerm("Expression Rank " + e2.rank + " moved to " + e1.rank);
        // updateExpressionTableParams(rule);
    };
    ;
    HomeComponent.prototype.addTerm = function () {
        this.showError = false;
        this.msgs = [];
        this.newTerm = true;
        this.refresh();
        this.definition = '';
        this.termCode = '';
        this.termName = '';
        this.periodType = { name: '' };
        this.type = { name: '' };
        this.incAccuTest = false;
        this.finStatement = { financialStatement: '' };
        this.priorgroup = { name: '' };
        this.processingOrder = '';
        this.termRule = this.rule;
    };
    HomeComponent.prototype.processTermnow = function () {
        this.refresh();
        this.processnow = true;
        if (this.divisionCount === 0) {
            this.divisionCount = this.completeCompanyList.length;
        }
        this.enableTermCode = true;
        this.displayTerms = true;
        this.displayGetCoverage = true;
        if (this.termCode != '') {
            this.enableTermButton = false;
        }
    };
    HomeComponent.prototype.divSectorChange = function (event) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        event = event.value ? event.value : event;
        var division = event.substr(0, event.indexOf('->') - 1);
        var sector = event.substr(event.indexOf('->') + 3, event.length);
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        this.filteredindustry = [];
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredindustry.push(name);
        });
        this.divisionCount = this.completeEntities.length;
        this.industryCount = this.completeEntities.length;
        this.categoryCount = this.completeEntities.length;
        ;
        // if(this.derivedZeroExpressionForEdit.industry) {
        //   var completeEntities = this.completeEntities.filter(obj => obj.sic === this.derivedZeroExpressionForEdit.industry);
        //   this.sectorCount = completeEntities.length
        // }
    };
    HomeComponent.prototype.processIndustryChange = function (event) {
        event = event.value ? event.value : event;
        event = event.substring(0, 4);
        var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === event; });
        this.industryCount = completeEntities.length;
        this.categoryCount = completeEntities.length;
    };
    HomeComponent.prototype.processfilCatChange = function (event) {
        var _this = this;
        event = event.value ? event.value : event;
        var completeEntities = this.completeEntities.filter(function (obj) {
            return obj.filerCategory === event && obj.sic === _this.industry.substr(0, 4);
        });
        this.industryCount = completeEntities.length;
        this.categoryCount = completeEntities.length;
    };
    HomeComponent.prototype.processNow = function () {
        var _this = this;
        this.refresh();
        if (this.companyName && this.divSector && this.division && this.sector) {
            this.processTermRule();
            window.scroll(0, 0);
            return;
        }
        else {
            this.confirmationService.confirm({
                message: 'Are you sure you want to process all entities for the selected term?',
                header: 'Processing Term Rule ' + this.termId,
                icon: 'pi pi-exclamation-triangle',
                accept: function () {
                    //this.msgs = [{severity:'info', summary:'Process Term', detail:'Process Term'}];
                    _this.processTermRule();
                },
                reject: function () {
                    //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
                }
            });
        }
        window.scroll(0, 0);
    };
    HomeComponent.prototype.removeTerm = function () {
        var _this = this;
        this.refresh();
        this.confirmationService.confirm({
            message: 'Term Rule will be removed, are you sure?',
            header: 'Remove Rule ' + this.termId,
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.utilService.removeTerm(_this.termId).subscribe(function (response) {
                    if (response.errorMessage) {
                        _this.msgs = [{ severity: 'info', summary: 'Confirmed', detail: response.errorMessage }];
                    }
                    else {
                        _this.msgs = [{ severity: 'info', summary: '', detail: 'Term Rule Removed' }];
                    }
                    console.log("Remove Term  completed ");
                    _this.selectedTerm = null;
                    _this.termTree = [];
                    _this.getRuleList();
                }, function (error) { return console.log(error); });
            },
            reject: function () {
                //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
            }
        });
    };
    HomeComponent.prototype.saveTerm = function () {
        var _this = this;
        this.showError = false;
        if (!this.newTerm && this.termRule.termId != '') {
            this.termRule.expressions = this.expressionList;
        }
        this.termRule.termId = this.termCode;
        this.termRule.name = this.termName;
        this.termRule.description = this.definition;
        this.termRule.includeInAccuracyTests = this.incAccuTest;
        if (this.periodType.name === '') {
            this.termRule.periodType = null;
        }
        else {
            this.termRule.periodType = this.periodType.name;
        }
        if (this.type.name === '') {
            this.termRule.type = null;
        }
        else {
            this.termRule.type = this.type.name;
        }
        if (this.finStatement.financialStatement === '') {
            this.termRule.financialStatement = null;
        }
        else {
            this.termRule.financialStatement = this.finStatement.financialStatement;
        }
        if (this.priorgroup.name === '') {
            this.termRule.priorityGroup = null;
        }
        else {
            this.termRule.priorityGroup = this.priorgroup.name;
        }
        this.utilService.saveTerm(this.termRule).subscribe(function (response) {
            console.log("Save Term  completed ");
            _this.msgs = [{ severity: 'info', summary: 'Term', detail: _this.termRule.termId + ' saved successfully' }];
            _this.termTree = [];
            _this.getRuleList();
            //return;
        }, function (error) {
            console.log(error);
            _this.msgs = [{ severity: 'danger', summary: 'Term Rule Save Failed' }];
            return;
        });
    };
    HomeComponent.prototype.refresh = function () {
        this.processnow = false;
        this.msgs = [];
        // this.displayTerms = false;
        // this.displayGetCoverage = false;
        this.showError = false;
        this.enableTermButton = true;
        this.enableTermCode = false;
    };
    HomeComponent.prototype.processTermRule = function () {
        var _this = this;
        console.log("process Rule : " + JSON.stringify(this.termId));
        this.progressSpinner = true;
        this.msgs = [{ severity: 'info', summary: 'Started processing for ' + this.termName, detail: '' }];
        if (this.divSector && this.filerCategory && this.industry) {
            var sic = "NULL";
            if (this.industry) {
                sic = this.industry.substr(0, this.industry.indexOf('-'));
            }
            var filerCategory = "NULL";
            if (this.filerCategory) {
                filerCategory = this.filerCategory;
            }
            var division = "NULL";
            var sector = "NULL";
            if (this.divSector) {
                division = this.divSector.substr(0, this.divSector.indexOf('->') - 1);
                sector = this.divSector.substr(this.divSector.indexOf('->') + 3, this.divSector.length);
            }
            this.utilService.processTermForCriteria(this.termCode, division, sector, sic, filerCategory).subscribe(function (response) {
                if (!response.data) {
                    window.scroll(0, 0);
                    _this.msgs = [{ severity: 'info', summary: 'Term processing for' + _this.termName, detail: ' processed successfully' }];
                    _this.progressSpinner = false;
                }
                else {
                    window.scroll(0, 0);
                    _this.msgs = [{ severity: 'info', summary: 'Process Term Rule failed' + _this.termName, detail: '' }];
                    _this.progressSpinner = false;
                }
            }, function (err) {
            });
        }
        else {
            if (this.isAdminUser) {
                //we can allow admin users to process all entities for a given term....
                this.processTermRuleAdmin();
                return;
            }
            else {
                window.scroll(0, 0);
                this.msgs = [{ severity: 'info', summary: 'Please select a division->Sector or Filer Category before processing Term Rule.', detail: '' }];
                this.progressSpinner = false;
                return;
            }
        }
        // adminProcessAllTermsClicked('#processTermForCriteria');
    };
    ;
    HomeComponent.prototype.processTermRuleAdmin = function () {
        var _this = this;
        this.utilService.processTerm(this.termRule).subscribe(function (response) {
            if (!response.data) {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Term processing for ' + _this.termName, detail: 'processed successfully' }];
                _this.progressSpinner = false;
            }
            else {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Process Term Rule failed for ' + _this.termName, detail: ' ' }];
                _this.progressSpinner = false;
            }
        }, function (err) {
        });
    };
    HomeComponent.prototype.filterConceptMatch = function (event) {
        this.conceptMatch(event.query.toLowerCase());
    };
    HomeComponent.prototype.conceptMatch = function (q) {
        var _this = this;
        this.utilService.getTaxonomyElements(q, false).subscribe(function (response) {
            _this.filteredconcMat = response;
        });
    };
    HomeComponent.prototype.OnExpressionAxisTypeChanged = function (index) {
        var expSet = this.expressionSets[index];
        if (this.expressionSets[index].axisType === "ExactMatch") {
            this.expressionSets[index].axisInclusionListAsString = "";
            this.expressionSets[index].axisExclusionListAsString = "";
            this.expressionSets[index].axisInclusionList = [];
            this.expressionSets[index].axisExclusionList = [];
        }
        else {
            this.expressionSets[index].axisName = "";
        }
        //this.expressionSets[index] = expSet;
    };
    ;
    HomeComponent.prototype.OnExpressionMemberTypeChanged = function (index) {
        var expSet = this.expressionSets[index];
        if (this.expressionSets[index].memberType === "Any") {
            this.expressionSets[index].memberName = "";
            this.expressionSets[index].memberInclusionListAsString = "";
            this.expressionSets[index].memberExclusionListAsString = "";
            this.expressionSets[index].memberInclusionList = [];
            this.expressionSets[index].memberExclusionList = [];
        }
        else if (this.expressionSets[index].memberType === "ExactMatch") {
            this.expressionSets[index].memberInclusionListAsString = "";
            this.expressionSets[index].memberExclusionListAsString = "";
            this.expressionSets[index].memberInclusionList = [];
            this.expressionSets[index].memberExclusionList = [];
        }
        else {
            this.expressionSets[index].memberName = "";
        }
    };
    ;
    HomeComponent.prototype.buildListFromString = function (listAsString) {
        return this.splitTextToArray(listAsString, "\n");
    };
    ;
    HomeComponent.prototype.splitTextToArray = function (textData, spliter) {
        //console.log("TextArea to array : " + textData + ", splitter : " + spliter);
        var strArray = [];
        if (!textData) {
            return strArray;
        }
        strArray = textData.toString().split(spliter);
        //console.log("TextArea to array : result array: " + JSON.stringify(strArray));
        return strArray;
    };
    HomeComponent.prototype.updateNameContains = function (nameContains) {
        this.containsWords = this.splitTextToArray(nameContains, "\n");
    };
    ;
    HomeComponent.prototype.updateNameNotContains = function (nameNotContains) {
        this.doesNotContainsWords = this.splitTextToArray(nameNotContains, "\n");
    };
    ;
    HomeComponent.prototype.resolve = function () {
        var _this = this;
        // this.updateExpressionForEditFromTextArea();
        var expressionObject = {};
        expressionObject.type = this.expressionForEdit.type;
        switch (this.expressionForEdit.type) {
            case this.expressionTypes[2]:
                {
                    expressionObject.expression = getExtendedCheckExpression(this.expressionForEdit);
                    break;
                }
            case this.expressionTypes[3]:
                {
                    //extended check with dimension
                    expressionObject.expression = getExtendedCheckExpression(this.expressionForEdit);
                    var dim = getDimensionExpression(this.expressionForEdit);
                    expressionObject.axisExpression = dim.axisExpression;
                    expressionObject.memberExpression = dim.memberExpression;
                    break;
                }
        }
        ;
        var getDimensionExpression = function (expression) {
            var dim = {};
            dim.memberExpression = this.arrayToExpression(expression.NamedMemberList, " || ", "{", "}");
            dim.axisExpression = this.arrayToExpression(expression.NamedAxisList, " || ", "{", "}");
            return dim;
        };
        var getExtendedCheckExpression = function (expression) {
            var nameContainsExpr = _this.arrayToExpression(expression.containsWords, " && ", 'nameContains(', ')');
            if (nameContainsExpr.indexOf('nameContains') >= 0) {
                _this.exprStr = _this.exprStr + " && " + nameContainsExpr;
            }
            //console.log("name contains expression:  " + this.exprStr);
            var notContainsExpr = _this.arrayToExpression(expression.doesNotContainsWords, " && ", 'nameNotContains(', ')');
            if (notContainsExpr.indexOf('nameNotContains') >= 0) {
                _this.exprStr = _this.exprStr + " && " + notContainsExpr;
            }
            //console.log("name not contains expression:  " + this.exprStr);
            if (expression.balType === _this.balanceTypes[0]) {
                _this.exprStr = _this.exprStr + " && isDebit";
            }
            if (expression.balType === _this.balanceTypes[1]) {
                _this.exprStr = _this.exprStr + " && isCredit";
            }
            if (expression.balType === _this.balanceTypes[2]) {
                _this.exprStr = _this.exprStr + " && isNA";
            }
            if (expression.perType === _this.rulePeriodTypes[0]) {
                _this.exprStr = _this.exprStr + " && isInstant";
            }
            if (expression.perType === _this.rulePeriodTypes[1]) {
                _this.exprStr = _this.exprStr + " && isDuration";
            }
            if (expression.isShareItemType) {
                _this.exprStr = _this.exprStr + " && isShareItemType";
            }
            // return exprStr;
        };
        //console.log("resolve - : " + JSON.stringify( expressionObject));
        this.getExtendedEntityLookup(this.filteredCompany, expressionObject);
    };
    ;
    HomeComponent.prototype.getExtendedEntityLookup = function (companiesFilter, expression) {
        //console.log("extended entity lookup call with : " + JSON.stringify(companiesFilter) + ", expression:" + JSON.stringify(expression) + ",TOKEN: " + this.csrfToken);
        var _this = this;
        var query = {};
        query.sic = companiesFilter.sic;
        query.division = companiesFilter.divisionSector.division;
        query.sector = companiesFilter.divisionSector.sector;
        query.filerCategory = companiesFilter.filerCategory;
        query.expression = expression;
        this.utilService.extendedEntityLookup(query).subscribe(function (response) {
            _this.extendedEntitiesLookup = response.data;
        });
    };
    ;
    HomeComponent.prototype.updateAxes = function (axes) {
        //console.log("updateAxes: " + this.axes + " - " + axes);
        this.namedAxisList = this.splitTextToArray(axes, '\n');
    };
    ;
    HomeComponent.prototype.updateAxesMembers = function (axesMembers) {
        this.namedMemberList = this.splitTextToArray(axesMembers, "\n");
    };
    ;
    HomeComponent.prototype.arrayToExpression = function (arrayData, splitter, prefix, suffix) {
        if (!prefix) {
            prefix = "";
        }
        if (!suffix) {
            suffix = "";
        }
        //console.log("arrayToExpression with spliter: " + splitter + ",prefix: " + prefix + ", suffix: " + suffix);
        var textData;
        if (!arrayData) {
            return textData;
        }
        for (var i = 0; i < arrayData.length; i++) {
            //
            var elem = arrayData[i].trim();
            //console.log("word from array : " + elem);
            if (elem.length > 0) {
                if (i === 0) {
                    textData = this.surroundTextWith(elem, prefix, suffix, false);
                }
                else {
                    textData = textData + splitter + this.surroundTextWith(elem, prefix, suffix, false);
                }
            }
        }
        //console.log("arrayToExpression converted expression : " + textData);
        return textData;
    };
    ;
    HomeComponent.prototype.surroundTextWith = function (str, prefix, suffix, check) {
        //console.log("surround text " + str + " with " + prefix + " and "+ suffix);
        if (!check) {
            str = prefix + str + suffix;
        }
        else {
            var patt1 = new RegExp("^" + prefix);
            var patt2 = new RegExp(suffix + "$");
            if (!patt1.test(str)) {
                str = prefix + str;
            }
            if (!patt2.test(str)) {
                str = str + suffix;
            }
        }
        return str;
    };
    ;
    HomeComponent.prototype.addingExpression = function () {
        this.expressionForEdit = {};
        this.conceptMatchMultipleList = [];
        this.conceptMatchMultiple = [];
        this.concMatch = {};
        this.index = 0;
        this.isOverrideExpressionForEdit = false;
        this.expressionForEdit.expression = "";
        // this.expressionForEdit.type = this.expressionTypes[0];
        this.expressionForEdit.type = this.expressionTypes[this.index];
        this.expressionForEdit.NamedAxisList = [];
        this.expressionForEdit.useVirtualParentNew = true;
        this.expressionForEdit.useMaxAxisCount = false;
        this.expressionForEdit.maxAxisCount = 2;
        this.expressionForEdit.NamedMemberList = [];
        this.expressionForEdit.dimensionExpressionSets = [];
        this.expressionForEdit.virtualFactMemberExclusionList = [];
        this.expressionForEdit.containsWords = [];
        this.expressionForEdit.doesNotContainsWords = [];
        this.conceptNameDefinition = "";
        this.formulaSets = [];
        this.expressionSets = [];
        this.AddExpressionSet();
        this.addAnotherConcept();
        this.addAnotherFormula();
        this.editExpression = true;
    };
    ;
    HomeComponent.prototype.saveExpression = function () {
        this.saveValues(this.expressionForEdit);
        if (!!this.formulaSets) {
            for (var i = 0; i < this.formulaSets.length; i++) {
                var formula = this.formulaSets[i];
                if (this.formulaSets.length == 1 && formula.termName == "" && formula.nullable == false && formula.operation == "") {
                    break;
                }
                if (!formula.termName) {
                    this.errorMsg = 'Incomplete Formula", "Please complete Term Rule selection';
                    this.showError = true;
                    window.scroll(0, 0);
                    return;
                }
                else {
                    if (i !== (this.formulaSets.length - 1) && !formula.operation) {
                        this.errorMsg = 'Incomplete Formula", "Please complete missing operation';
                        this.showError = true;
                        window.scroll(0, 0);
                        return;
                    }
                }
            }
        }
        if (this.expressionForEdit.type === this.expressionTypes[1]) {
            if (this.validateDimensionalExpressions() === false)
                return;
        }
        if (this.isOverrideExpressionForEdit) {
            var overrideName = this.overrideName.name ? this.overrideName.name : this.overrideName;
            if (!overrideName) {
                this.errorMsg = 'Incomplete override information, Please provide an override name for the expression being added.';
                this.showError = true;
                window.scroll(0, 0);
                return;
            }
            //verify that override name is populated...
        }
        switch (this.expressionForEdit.type) {
            case this.expressionTypes[0]:
                {
                    this.expressionForEdit.expression = this.getExpression();
                    this.expressionForEdit.conceptName = this.expressionForEdit.expression;
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
            case this.expressionTypes[1]:
                {
                    this.expressionForEdit.expression = this.surroundTextWith(this.concMatch.id, "{", "}", true);
                    this.expressionForEdit.conceptName = this.expressionForEdit.expression;
                    //cleanup old code...
                    this.expressionForEdit.axisExpression = null;
                    this.expressionForEdit.memberExpression = null;
                    this.expressionForEdit.NamedAxisList = null;
                    this.expressionForEdit.NamedMemberList = null;
                    break;
                }
            case this.expressionTypes[2]:
                {
                    this.expressionForEdit.expression = this.getExtendedCheckExpression(this.expressionForEdit);
                    this.expressionForEdit.dimensionExpressionSets = null;
                    break;
                }
            case this.expressionTypes[3]:
                {
                    //extended check with dimension
                    this.expressionForEdit.expression = this.getExtendedCheckExpression(this.expressionForEdit);
                    var dim = this.getDimensionExpression(this.expressionForEdit);
                    this.expressionForEdit.axisExpression = dim.axisExpression;
                    this.expressionForEdit.memberExpression = dim.memberExpression;
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
            case this.expressionTypes[4]:
                {
                    //formula
                    this.expressionForEdit.expression = this.getFormulaExpression(this.expressionForEdit);
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
            case this.expressionTypes[5]:
                {
                    //conceptmatchmultiple
                    this.expressionForEdit.expression = this.expressionForEdit.conceptMatchMultipleList.join("||");
                    this.expressionForEdit.dimensionExpressionSets = null;
                    this.expressionSets = null;
                    break;
                }
        }
        if (this.isOverrideExpressionForEdit) {
            this.updateOverrideFromUIToRule();
        }
        else {
            if (!this.expressionForEdit.rank) {
                this.expressionForEdit.rank = this.termRule.expressions.length + 1;
                this.termRule.expressions.push(this.expressionForEdit);
            }
            else {
                var index = this.expressionForEdit.rank - 1;
                this.termRule.expressions[index] = this.expressionForEdit;
            }
        }
        // this.activeExpressionTabIndex = this.isOverrideExpressionForEdit ? 2 : 0;
        this.saveTerm();
        this.addEditIndustry = false;
        this.editExpression = false;
        this.addEditDerived = false;
        window.scroll(0, 0);
        this.msgs = [{ severity: 'info', summary: 'Saved Expression successfully' }];
    };
    HomeComponent.prototype.getExpression = function () {
        var exprStr = "";
        switch (this.expressionForEdit.type) {
            case this.expressionTypes[0]:
                {
                    exprStr = this.surroundTextWith(this.concMatch.id, "{", "}", true);
                    break;
                }
            case this.expressionTypes[1]:
                {
                    exprStr = this.surroundTextWith(this.concMatch.id, "{", "}", true);
                    var dim = this.getDimensionExpression(this.expressionForEdit);
                    exprStr = exprStr + ", axisExpression:" + dim.axisExpression + ", memberExpression:" + dim.memberExpression;
                    break;
                }
            case this.expressionTypes[2]:
                {
                    exprStr = this.getExtendedCheckExpression(this.expressionForEdit);
                    break;
                }
            case this.expressionTypes[3]:
                {
                    exprStr = this.getExtendedCheckExpression(this.expressionForEdit);
                    var dim = this.getDimensionExpression(this.expressionForEdit);
                    exprStr = exprStr + ", axisExpression:" + dim.axisExpression + ", memberExpression:" + dim.memberExpression;
                    break;
                }
            case this.expressionTypes[4]:
                {
                    exprStr = this.getFormulaExpression(this.expressionForEdit);
                    break;
                }
            case this.expressionTypes[5]:
                {
                    exprStr = this.expressionForEdit.conceptMatchMultipleList.join("||");
                    break;
                }
        }
        return exprStr;
    };
    HomeComponent.prototype.saveValues = function (expression) {
        var _this = this;
        // Concept Match
        if (this.concMatch) {
            this.expressionForEdit.conceptName = this.concMatch.id !== undefined ? this.concMatch.id : null;
        }
        this.expressionForEdit.usePositiveValuesOnly = this.usePositiveFacts ? true : false;
        this.expressionForEdit.useNegativeValuesOnly = this.useNegativeFacts ? true : false;
        this.expressionForEdit.reverseNegativeValues = this.revNegativeFacts ? true : false;
        this.expressionForEdit.virtualFactAxis = this.axis;
        if (this.virtualFactMemberExclusions && this.virtualFactMemberExclusions[0] != null) {
            // this.expressionForEdit.virtualFactMemberExclusionList = [];
            this.expressionForEdit.virtualFactMemberExclusionList.push(this.virtualFactMemberExclusions);
        }
        else {
            this.expressionForEdit.virtualFactMemberExclusionList = [];
        }
        // Concept Match With Dim
        if (this.expressionSets) {
            this.expressionForEdit.dimensionExpressionSets = [];
            this.expressionSets.forEach(function (obj) {
                if (obj.memberInclusionListAsString) {
                    obj.memberInclusionList = [];
                    obj.memberInclusionList.push(obj.memberInclusionListAsString);
                }
                if (obj.memberExclusionListAsString) {
                    obj.memberExclusionList = [];
                    obj.memberExclusionList.push(obj.memberExclusionListAsString);
                }
                if (obj.axisExclusionListAsString) {
                    obj.axisExclusionList = [];
                    obj.axisExclusionList.push(obj.axisExclusionListAsString);
                }
                if (obj.axisInclusionListAsString) {
                    obj.axisInclusionList = [];
                    obj.axisInclusionList.push(obj.axisInclusionListAsString);
                }
            });
            this.expressionForEdit.dimensionExpressionSets = this.expressionSets;
        }
        // Extended check
        this.expressionForEdit.containsWords = this.containsWords;
        this.expressionForEdit.doesNotContainsWords = this.doesNotContainsWords;
        this.expressionForEdit.balType = this.balType !== undefined ? this.balType : null;
        this.expressionForEdit.perType = this.perType !== undefined ? this.perType : null;
        this.expressionForEdit.isShareItemType = this.isShareItemType !== undefined ? this.isShareItemType : null;
        // Extended check with dim
        this.expressionForEdit.NamedAxisList = this.splitTextToArray(this.axes, '\n');
        this.expressionForEdit.NamedMemberList = this.splitTextToArray(this.axesMembers, '\n');
        //Formula
        this.formulaSets.forEach(function (obj) {
            obj.operation = obj.operation.name ? obj.operation.name : "";
        });
        this.expressionForEdit.formulaList = this.formulaSets;
        if (this.formulaSets.length > 1) {
            this.expressionForEdit.formulaList = [];
            this.formulaSets.forEach(function (obj) {
                var formula = { termName: obj.termName, nullable: obj.nullable, operation: obj.operation.name != undefined ? obj.operation.name : "" };
                _this.expressionForEdit.formulaList.push(formula);
            });
        }
        //Concept Match Multiple
        if (this.conceptMatchMultiple[0] != "") {
            this.expressionForEdit.conceptMatchMultipleList = [];
            this.conceptMatchMultiple.forEach(function (obj) {
                _this.expressionForEdit.conceptMatchMultipleList.push(obj.id);
            });
        }
    };
    HomeComponent.prototype.validateDimensionalExpressions = function () {
        if (this.expressionForEdit.dimensionExpressionSets == null ||
            this.expressionForEdit.dimensionExpressionSets.length == 0) {
            this.errorMsg = 'Incomplete Dimension", "Please specify dimensional information.';
            this.showError = true;
            window.scroll(0, 0);
            return false;
        }
        this.expressionForEdit.dimensionExpressionSets.forEach(function (expSet) {
            if (expSet.axisType === "ExactMatch") {
                if (!expSet.axisName || expSet.axisName.length === 0) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify Axis name for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
            else {
                var hasData = false;
                if (expSet.axisInclusionList && expSet.axisInclusionList.length > 0) {
                    hasData = true;
                }
                if (expSet.axisExclusionList && expSet.axisExclusionList.length > 0) {
                    hasData = true;
                }
                if (hasData === false) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify Axis inclusion /exclusion data for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
            if (expSet.memberType === "ExactMatch") {
                if (!expSet.memberName || expSet.memberName.length === 0) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify Member name for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
            else if (expSet.memberType === "InclusionExclusionList") {
                var hasData = false;
                if (expSet.memberInclusionList && expSet.memberInclusionList.length > 0) {
                    hasData = true;
                }
                if (expSet.memberExclusionList && expSet.memberExclusionList.length > 0) {
                    hasData = true;
                }
                if (hasData === false) {
                    this.errorMsg = 'Incomplete Dimension", "Please specify member inclusion /exclusion data for the dimensional information.';
                    this.showError = true;
                    window.scroll(0, 0);
                    return false;
                }
            }
        });
        return true;
    };
    HomeComponent.prototype.deleteWithRank = function (index) {
        if (this.expressionName === 'Expression')
            this.deleteExpressions(index);
        if (this.expressionName === 'Validation')
            this.deleteValidation(index);
        if (this.expressionName === 'Industry')
            this.deleteIndustry(index);
    };
    ;
    HomeComponent.prototype.deleteIndustry = function (index) {
        var _this = this;
        var ind = index + 1;
        this.confirmationService.confirm({
            message: 'Override Expression will be removed, are you sure?',
            header: 'Delete Override Expression',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                var override = _this.getOverride(_this.selIndOvrdExpr.name);
                if (override) {
                    override.expressions.splice(index, 1);
                    for (var j = 0; j < override.expressions.length; j++) {
                        override.expressions[j].rank = j + 1;
                    }
                }
                // this.termRule.overrides.push( override.expressions);
                _this.saveTerm();
                _this.expTableList = override.expressions;
                window.scroll(0, 0);
                _this.msgs = [];
                _this.msgs = [{ severity: 'info', summary: 'Deleted Override Expression successfully' }];
            },
            reject: function () {
            }
        });
    };
    HomeComponent.prototype.deleteExpressions = function (index) {
        var _this = this;
        var ind = index + 1;
        this.confirmationService.confirm({
            message: 'Rank ' + ind + ' Expression will be removed, are you sure?',
            header: 'Delete Expression',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.expressionList.splice(index, 1);
                for (var i = 0; i < _this.expressionList.length; i++) {
                    _this.expressionList[i].rank = i + 1;
                }
                _this.termRule.expressions = _this.expressionList;
                _this.saveTerm();
                _this.expTableList = _this.termRule.expressions;
                window.scroll(0, 0);
                _this.msgs = [];
                _this.msgs = [{ severity: 'info', summary: 'Deleted Expression with rank ', detail: index + ' successfully' }];
            },
            reject: function () {
                //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
            }
        });
    };
    HomeComponent.prototype.addValidations = function () {
        this.addEditValidation = true;
        this.formulaSets = [];
        this.addAnotherFormula();
        this.addvalidation = true;
        //   if(!this.termRule.validationExpressions) {
        //     this.termRule.validationExpressions = [];
        // }
        // this.validation = {};
        // this.validation.rank = this.termRule.validationExpressions.length+1;
        // this.validation.formulaList = [];
        // this.validation.formulaList.push({});
        // this.validation.expression = "";
    };
    HomeComponent.prototype.saveRuleWithValidation = function () {
        var _this = this;
        if (!this.checkFormulas()) {
            this.errorMsg = "Error", "Incomplete Validation entry found. Please complete before saving.";
            this.showError = true;
            window.scroll(0, 0);
            return;
        }
        ;
        var val = {};
        if (this.addvalidation) {
            val.rank = this.termRule.validationExpressions.length + 1;
            val.expression = this.convertFormulaToExpression(this.formulaSets);
            this.termRule.validationExpressions[val.rank - 1] = val;
        }
        else {
            val.rank = this.validationRank;
            val.expression = this.convertFormulaToExpression(this.formulaSets);
            this.formulaSets = [];
            this.termRule.validationExpressions[val.rank - 1] = val;
        }
        //this.activeExpressionTabIndex = 1;
        this.saveTerm();
        this.msgs = [];
        window.scroll(0, 0);
        this.msgs = [{ severity: 'info', summary: 'Saved Validation successfully' }];
        this.validationList = [];
        this.expTableList = [];
        this.termRule.validationExpressions.forEach(function (obj) {
            obj.type = 'V';
            _this.validationList.push(obj);
        });
        this.expTableList = this.validationList;
    };
    HomeComponent.prototype.convertFormulaToExpression = function (formulaList) {
        console.log("convertFormulaToExpression: " + JSON.stringify(formulaList));
        var expression = "work in progress... available soon";
        expression = "";
        for (var x = 0; x < formulaList.length; x++) {
            var formula = formulaList[x];
            if (!!formula.termName) {
                expression = expression + "{sec:" + formula.termName;
                if (!!formula.nullable) {
                    expression = expression + "=0";
                }
                expression = expression + "}";
                if (!!formula.operation) {
                    expression = expression + formula.operation.name;
                }
            }
        }
        return expression;
    };
    HomeComponent.prototype.getValidationExpression = function () {
        this.validationExpression = this.convertFormulaToExpression(this.formulaSets);
        this.validationRank = this.termRule.validationExpressions.length + 1;
    };
    HomeComponent.prototype.deleteValidation = function (index) {
        var _this = this;
        var ind = index + 1;
        this.confirmationService.confirm({
            message: 'Rank ' + ind + ' validation will be removed, are you sure?',
            header: 'Delete Validation',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.termRule.validationExpressions.splice(index, 1);
                for (var i = 0; i < _this.termRule.validationExpressions.length; i++) {
                    var elem = _this.termRule.validationExpressions[i];
                    elem.rank = i + 1;
                }
                _this.saveTerm();
                _this.expTableList = _this.termRule.validationExpressions;
                _this.msgs = [];
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Deleted Validation with rank ', detail: ind + ' successfully' }];
            },
            reject: function () {
                //this.msgs = [{severity:'info', summary:'Rejected', detail:'You have rejected'}];
            }
        });
        if (confirm("Rank " + ind + " validation will be removed, are you sure?")) {
        }
        else {
        }
    };
    ;
    HomeComponent.prototype.addOverrideExpression = function () {
        this.expressionForEdit = {};
        this.expressionSets = [];
        this.formulaSets = [];
        this.AddExpressionSet();
        this.addAnotherFormula();
        this.overrideName = null;
        this.mergeBaseExpressions = null;
        this.overridecompanyName = null;
        this.disableAxes = false;
        this.disableMember = false;
        this.disableAxesInc = true;
        this.disableMemInc = true;
        this.overrideForEdit = {};
        this.mergeBaseExpressions = true;
        // this.expressionForEdit.expression = "";
        // this.expressionForEdit.type = this.expressionTypes[0];
        // this.expressionForEdit.NamedAxisList = [];
        // this.expressionForEdit.NamedMemberList = [];
        // this.expressionForEdit.useVirtualParentNew = true;
        // this.expressionForEdit.useMaxAxisCount = false;
        // this.expressionForEdit.maxAxisCount = 2;
        // this.expressionForEdit.dimensionExpressionSets = [];
        // this.expressionForEdit.virtualFactMemberExclusionList = [];
        // this.expressionForEdit.containsWords = [];
        // this.expressionForEdit.doesNotContainsWords = [];
        this.conceptNameDefinition = "";
        this.showExpression = false;
        this.addingExpression();
        this.isOverrideExpressionForEdit = true;
    };
    ;
    HomeComponent.prototype.editOverrideExpression = function (rowdata) {
        this.entityOverrides = [];
        var override = this.getOverride(this.selIndOvrdExpr.name);
        this.overrideForEdit = {};
        if (!override)
            return;
        this.expressionForEdit = override.expressions[rowdata.rank - 1];
        this.overrideForEdit.name = override.name;
        this.overrideForEdit.mergeBaseExpressions = override.mergeBaseExpressions;
        this.overrideForEdit.origName = override.name;
        this.overrideName = { name: override.name };
        this.mergeBaseExpressions = override.mergeBaseExpressions;
        if (override.entityOverrides[0] != null) {
            this.setCurrentOverrideIndustryInformation(override);
        }
        else {
            this.entityOverrides = null;
            this.addAnotherIndustryOverride();
        }
        this.isOverrideExpressionForEdit = true;
        if (!this.expressionForEdit.type || this.expressionForEdit.type === 'na') {
            this.expressionForEdit.type = this.expressionTypes[0];
        }
    };
    ;
    HomeComponent.prototype.setCurrentOverrideIndustryInformation = function (override) {
        this.entityOverrides = [];
        for (var j = 0; j < override.entityOverrides.length; j++) {
            var entityOverride = {};
            if (override.entityOverrides[j].entityId) {
                var entity = this.completeCompanyList.filter(function (obj) { return obj.entityId === override.entityOverrides[j].entityId; });
                if (entity && entity.length > 0) {
                    entityOverride.entityname = entity[0].companyName + "(" + entity[0].entityId + ")";
                }
            }
            if (!entityOverride.entityname) {
                entityOverride.overrideDivSec = this.divSector;
            }
            this.entityOverrides.push(entityOverride);
        }
    };
    HomeComponent.prototype.addAnotherIndustryOverride = function () {
        var overrideEntity = { divisionSector: "", entityname: "" };
        if (!this.entityOverrides) {
            this.entityOverrides = [];
        }
        this.entityOverrides.push(overrideEntity);
    };
    HomeComponent.prototype.updateOverrideFromUIToRule = function () {
        var overrideName = this.overrideName.name ? this.overrideName.name : this.overrideName;
        var index = -1;
        var existingExpressions = [];
        if (!this.termRule.overrides) {
            this.termRule.overrides = [];
        }
        for (var i = 0; i < this.termRule.overrides.length; i++) {
            if (overrideName) {
                if (overrideName === this.termRule.overrides[i].name) {
                    index = i;
                    existingExpressions = this.termRule.overrides[i].expressions;
                    break;
                }
            }
            else {
                if (this.overrideForEdit.name === this.termRule.overrides[i].name) {
                    index = i;
                    existingExpressions = this.termRule.overrides[i].expressions;
                    break;
                }
            }
        }
        var override = {};
        override.name = overrideName;
        override.mergeBaseExpressions = this.mergeBaseExpressions;
        override.expressions = existingExpressions;
        override.entityOverrides = [];
        for (var i = 0; i < this.entityOverrides.length; i++) {
            var indOverride = {};
            if (this.entityOverrides[i].entityname) {
                // entityOverride.overridecompanyName = entity[0].companyName.substr(0, entity[0].companyName.indexOf( '(');
                // mp.division = this.divSector.substr(0,this.divSector.indexOf( '->')-1);
                // mp.sector =  this.divSector.substr(this.divSector.indexOf( '->')+3, this.divSector.length);
                indOverride.entityId = this.getCompanyIdFromName(this.entityOverrides[i].entityname.substr(0, this.entityOverrides[i].entityname.indexOf('(')));
            }
            else {
                if (this.entityOverrides[i].divisionSector) {
                    indOverride.division = this.entityOverrides[i].divisionSector.division;
                    indOverride.sector = this.entityOverrides[i].divisionSector.sector;
                }
            }
            if (!indOverride.division && !indOverride.entityId) {
                continue;
            }
            override.entityOverrides.push(indOverride);
        }
        if (this.expressionForEdit.rank) {
            //console.log("Updating Expression array index : " + index);
            override.expressions[this.expressionForEdit.rank - 1] = this.expressionForEdit;
        }
        else {
            this.expressionForEdit.rank = override.expressions.length + 1;
            override.expressions.push(this.expressionForEdit);
        }
        if (index < 0) {
            this.termRule.overrides.push(override);
        }
        else {
            this.termRule.overrides[index] = override;
        }
    };
    HomeComponent.prototype.getCompanyIdFromName = function (input) {
        var entities = this.completeCompanyList.filter(function (obj) { return obj.companyName === input; });
        if (entities.length > 0) {
            return entities[0].entityId;
        }
        return null;
    };
    HomeComponent.prototype.getOverride = function (overrideName) {
        if (overrideName && this.termRule.overrides) {
            for (var i = 0; i < this.termRule.overrides.length; i++) {
                if (this.termRule.overrides[i].name === overrideName) {
                    return this.termRule.overrides[i];
                }
            }
        }
        return null;
    };
    ;
    HomeComponent.prototype.deleteOverrideExpressionWithRank = function (selectedOverride, index) {
        if (confirm("Override Expression will be removed, are you sure?")) {
            var override = this.getOverride(selectedOverride);
            if (override) {
                override.expressions.splice(index, 1);
                for (var j = 0; j < override.expressions.length; j++) {
                    override.expressions[j].rank = j + 1;
                }
            }
            this.saveTerm();
        }
        else {
        }
    };
    ;
    HomeComponent.prototype.convertExpressionToFormula = function (expression) {
        console.log("convertExpressionToFormula: " + expression);
        var parts = expression.split("{");
        this.formulaSets = [];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (!!part) {
                var fields = part.split("}");
                if (fields.length > 0) {
                    var term = fields[0];
                    term = term.replace("sec:", "");
                    var nullable = false;
                    if ((term.length - 2) === term.lastIndexOf("=0")) {
                        nullable = true;
                    }
                    if (fields.length === 2) {
                        var operation = fields[1].trim();
                        term = term.replace("=0", "");
                    }
                    this.formulaSets.push({ termName: term, nullable: nullable, operation: { name: operation } });
                }
            }
        }
    };
    HomeComponent.prototype.getCurrentOverrideDetails = function () {
        var override = this.getOverride(this.overrideName.name);
        if (override) {
            this.setCurrentOverrideIndustryInformation(override);
        }
    };
    ;
    HomeComponent.prototype.getOverRides = function (event) {
        this.companyovrRideList = [];
        for (var i = 0; i < this.termRule.overrides.length; i++) {
            var cname = this.termRule.overrides[i].name;
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.companyovrRideList.push({ name: cname });
            }
        }
    };
    HomeComponent.prototype.removeTextBlock = function (index) {
        this.derivedZeroExpressionForEdit.textBlockList.splice(index, 1);
    };
    ;
    HomeComponent.prototype.addAnotherTextBlock = function () {
        var item = { expressionItem: "" };
        this.derivedZeroExpressionForEdit.textBlockList.push(item);
    };
    ;
    HomeComponent.prototype.addDerivedZeroExpression = function () {
        this.addEditDerived = true;
        this.derivedZeroExpressionForEdit = {};
        this.activeExpressionTabIndex = 0;
        this.derivedZeroExpressionForEdit.expression = "";
        this.derivedZeroExpressionForEdit.type = this.derivedZeroTypes[0];
        this.derivedZeroExpressionForEdit.textBlockList = [];
        var item = { expressionItem: "" };
        this.derivedZeroExpressionForEdit.textBlockList.push(item);
        this.derivedZeroExpressionForEdit.depTermNameList = [];
        this.derivedZeroExpressionForEdit.excTermNameList = [];
        this.divisionCount = this.completeCompanyList.length;
        this.addAnotherItem(false);
        this.addAnotherItem(true);
    };
    ;
    HomeComponent.prototype.saveNewDerivedExpression = function () {
        if (!this.termRule.derivedZeroExpressions) {
            this.termRule.derivedZeroExpressions = [];
        }
        var derivedZeroExpression = {};
        derivedZeroExpression.type = this.derivedZeroExpressionForEdit.type;
        derivedZeroExpression.rank = this.derivedZeroExpressionForEdit.rank;
        derivedZeroExpression.allTermsRequired = false;
        switch (this.derivedZeroExpressionForEdit.type) {
            case this.derivedZeroTypes[0]:
                {
                    derivedZeroExpression.expression = this.getTextBlockExpression(this.derivedZeroExpressionForEdit.textBlockList);
                    break;
                }
            case this.derivedZeroTypes[1]:
                {
                    derivedZeroExpression.allTermsRequired = this.derivedZeroExpressionForEdit.allTermsRequired;
                    var splitStr = derivedZeroExpression.allTermsRequired && derivedZeroExpression.allTermsRequired == true ? "&&" : "||";
                    derivedZeroExpression.expression = this.getTermExpression(this.derivedZeroExpressionForEdit.depTermNameList, splitStr);
                    break;
                }
            case this.derivedZeroTypes[2]:
                {
                    derivedZeroExpression.expression = this.getTermExpression(this.derivedZeroExpressionForEdit.excTermNameList, "||");
                    break;
                }
            case this.derivedZeroTypes[3]:
                {
                    var division = this.deriveddivSector.substr(0, this.deriveddivSector.indexOf('->') - 1);
                    var sector = this.deriveddivSector.substr(this.deriveddivSector.indexOf('->') + 3, this.deriveddivSector.length);
                    var sic = this.derivedindustry.substr(0, 4);
                    derivedZeroExpression.division = division;
                    derivedZeroExpression.sector = sector;
                    derivedZeroExpression.industry = sic;
                    derivedZeroExpression.expression = this.getExcludeIndustryExpression(derivedZeroExpression);
                    break;
                }
        }
        ;
        if (!derivedZeroExpression.rank) {
            derivedZeroExpression.rank = this.termRule.derivedZeroExpressions.length + 1;
            this.termRule.derivedZeroExpressions.push(derivedZeroExpression);
        }
        else {
            var index = this.derivedZeroExpressionForEdit.rank - 1;
            //console.log("Updating Expression array index : " + index);
            this.termRule.derivedZeroExpressions[index] = derivedZeroExpression;
        }
        this.activeExpressionTabIndex = 3;
        this.saveTerm();
    };
    HomeComponent.prototype.onDerivedTabChange = function (event) {
        this.activeExpressionTabIndex = event.index;
        this.derivedZeroExpressionForEdit = [];
        this.deriveddivSector = '';
        this.derivedindustry = '';
        this.filteredDerivedindustry = [];
        // this.divisionCount =0;
        // this.sectorCount = 0;
        this.derivedZeroExpressionForEdit.type = this.derivedZeroTypes[this.activeExpressionTabIndex];
        this.prepareDerivedZeroExpressionForEdit();
    };
    HomeComponent.prototype.getTermExpression = function (tnList, splitStr) {
        var exprStr = "";
        for (var i = 0; i < tnList.length; i++) {
            var exp = tnList[i].expressionItem;
            if (i === 0) {
                exprStr = this.surroundTextWith(exp, "{sec:", "}", true);
            }
            else {
                exprStr = exprStr + splitStr + this.surroundTextWith(exp, "{sec:", "}", true);
            }
        }
        return exprStr;
    };
    ;
    HomeComponent.prototype.getExcludeIndustryExpression = function (derivedZeroExpression) {
        var exp = "";
        if (derivedZeroExpression.division) {
            exp = derivedZeroExpression.division + "->" + derivedZeroExpression.sector;
        }
        if (derivedZeroExpression.industry) {
            exp = exp + " " + derivedZeroExpression.industry;
        }
        return exp;
    };
    HomeComponent.prototype.getTextBlockExpression = function (tnList) {
        var exprStr = "";
        for (var i = 0; i < tnList.length; i++) {
            var exp = tnList[i].expressionItem;
            if (i === 0) {
                exprStr = this.surroundTextWith(exp.id, "{", "}", true);
            }
            else {
                exprStr = exprStr + '||' + this.surroundTextWith(exp.id, "{", "}", true);
            }
        }
        return exprStr;
    };
    HomeComponent.prototype.addAnotherItem = function (isExclusion) {
        var item = { expressionItem: "" };
        if (isExclusion) {
            this.derivedZeroExpressionForEdit.excTermNameList.push(item);
        }
        else {
            this.derivedZeroExpressionForEdit.depTermNameList.push(item);
        }
        //console.log(this.derivedZeroExpressionForEdit.formulaList);
    };
    ;
    HomeComponent.prototype.removeDerivedTerm = function (index, isExclusion) {
        if (isExclusion) {
            this.derivedZeroExpressionForEdit.excTermNameList.splice(index, 1);
        }
        else {
            this.derivedZeroExpressionForEdit.depTermNameList.splice(index, 1);
        }
    };
    HomeComponent.prototype.prepareDerivedZeroExpressionForEdit = function () {
        var _this = this;
        switch (this.derivedZeroExpressionForEdit.type) {
            case this.derivedZeroTypes[0]:
                {
                    this.setTextBlockExpression();
                    break;
                }
            case this.derivedZeroTypes[1]:
                {
                    this.setDepTermExpression();
                    break;
                }
            case this.derivedZeroTypes[2]:
                {
                    this.setExlTermExpression();
                    break;
                }
            case this.derivedZeroTypes[3]:
                {
                    this.derivedRank = false;
                    this.divSectorList.forEach(function (obj) {
                        var name = { label: obj, value: obj };
                        _this.filteredDeriveddivSectors.push(name);
                    });
                    this.setExcludeEntitiesExpression();
                    break;
                }
        }
    };
    HomeComponent.prototype.setTextBlockExpression = function () {
        // if (!this.derivedZeroExpressionForEdit.textBlockList) {
        this.derivedZeroExpressionForEdit.textBlockList = [];
        if (!this.derivedZeroExpressionForEdit.expression) {
            this.filteredtext = [];
            this.addAnotherTextBlock();
        }
        else {
            this.filteredtext = [];
            var strArray = this.derivedZeroExpressionForEdit.expression.split("||");
            for (var i = 0; i < strArray.length; i++) {
                var itemExpression = strArray[i];
                itemExpression = itemExpression.replace("{", "");
                itemExpression = itemExpression.replace("}", "");
                var item = { 'expressionItem': itemExpression };
                this.derivedZeroExpressionForEdit.textBlockList.push(item);
                this.filteredtext.push(itemExpression);
            }
            //this.derivedZeroExpressionForEdit.expression = null;
        }
        // }
    };
    HomeComponent.prototype.setDepTermExpression = function () {
        // if (!this.derivedZeroExpressionForEdit.depTermNameList) {
        this.derivedZeroExpressionForEdit.depTermNameList = [];
        if (!this.derivedZeroExpressionForEdit.expression) {
            this.addAnotherItem(false);
        }
        else {
            var splitStr = this.derivedZeroExpressionForEdit.allTermsRequired == true ? "&&" : "||";
            var strArray = this.derivedZeroExpressionForEdit.expression.split(splitStr);
            for (var i = 0; i < strArray.length; i++) {
                var itemExpression = strArray[i];
                itemExpression = itemExpression.replace("{sec:", "");
                itemExpression = itemExpression.replace("}", "");
                var item = { expressionItem: itemExpression };
                this.derivedZeroExpressionForEdit.depTermNameList.push(item);
            }
            //this.derivedZeroExpressionForEdit.expression = null;
        }
        // }
    };
    HomeComponent.prototype.setExlTermExpression = function () {
        if (!this.derivedZeroExpressionForEdit.excTermNameList) {
            this.derivedZeroExpressionForEdit.excTermNameList = [];
            if (!this.derivedZeroExpressionForEdit.expression) {
                this.addAnotherItem(true);
            }
            else {
                var strArray = this.derivedZeroExpressionForEdit.expression.split("||");
                for (var i = 0; i < strArray.length; i++) {
                    var itemExpression = strArray[i];
                    itemExpression = itemExpression.replace("{sec:", "");
                    itemExpression = itemExpression.replace("}", "");
                    var item = { expressionItem: itemExpression };
                    this.derivedZeroExpressionForEdit.excTermNameList.push(item);
                }
                // this.derivedZeroExpressionForEdit.expression = null;
            }
        }
    };
    HomeComponent.prototype.setExcludeEntitiesExpression = function () {
        var _this = this;
        if (this.derivedZeroExpressionForEdit.division && this.derivedZeroExpressionForEdit.sector) {
            var divSec = {
                "division": this.derivedZeroExpressionForEdit.division,
                "sector": this.derivedZeroExpressionForEdit.sector
            };
            this.filteredDerivedindustry = [];
            this.setExcDivSec(this.derivedZeroExpressionForEdit.division, this.derivedZeroExpressionForEdit.sector);
            if (this.derivedZeroExpressionForEdit.sector && this.derivedZeroExpressionForEdit.industry)
                this.deriveddivSector = this.derivedZeroExpressionForEdit.division + ' -> ' + this.derivedZeroExpressionForEdit.sector;
            this.filteredDerivedindustry.forEach(function (obj) {
                var sic = obj.label.substr(0, 4);
                if (sic === _this.derivedZeroExpressionForEdit.industry) {
                    _this.derivedindustry = obj.label;
                }
            });
            // this.derivedindustry = this.derivedZeroExpressionForEdit.industry + ' - ' + this.derivedZeroExpressionForEdit.sector;
            if (!this.excludeEntitiesFilter)
                this.excludeEntitiesFilter = {};
            this.excludeEntitiesFilter.sic = this.derivedZeroExpressionForEdit.industry;
        }
        else {
            this.excludeEntitiesFilter = {};
        }
    };
    HomeComponent.prototype.setExcDivSec = function (division, sector) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredDerivedindustry.push(name);
        });
        this.divisionCount = this.completeEntities.length;
        if (this.derivedZeroExpressionForEdit.industry) {
            var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === _this.derivedZeroExpressionForEdit.industry; });
            this.industryCount = completeEntities.length;
        }
    };
    HomeComponent.prototype.processTermForEntity = function (rowdata) {
        var _this = this;
        //console.log("Process rule " + $scope.rule.termId + " with token " + $scope.csrfToken + " for entity: " + entityId);
        this.progressSpinner = true;
        this.msgs = [{ severity: 'info', summary: 'Started processing for ' + this.termName, detail: '' }];
        this.utilService.processTerms(this.termRule.termId, rowdata.entityId, null).subscribe(function (response) {
            if (!response.data) {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Term processing for' + _this.termName, detail: ' processed successfully' }];
                _this.progressSpinner = false;
            }
            else {
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Process Term Rule failed' + _this.termName, detail: '' }];
                _this.progressSpinner = false;
            }
        }, function (err) {
        });
    };
    HomeComponent.prototype.yearChange = function (event) {
        this.startYear = this.range[0];
        this.endYear = this.range[1];
    };
    HomeComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'home-page',
            template: __webpack_require__(/*! ./home.html */ "./src/app/home/home.html"),
            styles: [__webpack_require__(/*! ../app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_homeService__WEBPACK_IMPORTED_MODULE_3__["HomeService"], app_app_component__WEBPACK_IMPORTED_MODULE_10__["AppComponent"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _domain_home__WEBPACK_IMPORTED_MODULE_4__["Home"], _utils_utilService__WEBPACK_IMPORTED_MODULE_5__["UtilService"], _domain_mappedEntity__WEBPACK_IMPORTED_MODULE_6__["MappedEntity"], _domain_termRule__WEBPACK_IMPORTED_MODULE_7__["TermRule"],
            primeng_api__WEBPACK_IMPORTED_MODULE_9__["ConfirmationService"], _domain_editExpression__WEBPACK_IMPORTED_MODULE_8__["EditExpression"], _ng_idle_core__WEBPACK_IMPORTED_MODULE_11__["Idle"], _ng_idle_keepalive__WEBPACK_IMPORTED_MODULE_12__["Keepalive"], app_services_login_service__WEBPACK_IMPORTED_MODULE_13__["LoginService"]])
    ], HomeComponent);
    return HomeComponent;
}());



/***/ }),

/***/ "./src/app/home/homeService.ts":
/*!*************************************!*\
  !*** ./src/app/home/homeService.ts ***!
  \*************************************/
/*! exports provided: HomeService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomeService", function() { return HomeService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");





var HomeService = /** @class */ (function () {
    //Test Purpose
    // private termRuleCategoryListUrl = 'https://localhost:18081/api/TermRulesCategoryList';
    // private entityListUrl = 'https://localhost:18081/api/EntityList';
    // private termRulesPriorityGroupListUrl = 'https://localhost:18081/api/TermRulesPriorityGroupList';
    // private userDisplayNameUrl = 'https://localhost:18081/api/UserDisplayName';
    // private termRuleUrl = 'https://localhost:18081/api/TermRule';
    // private companyListUrl = "https://localhost:18081/EntitiesList";
    // private unMappedEntityListUrl = 'https://localhost:18081/api/UnMappedEntitiesForCriteria';
    // private ruleGraphUrl = 'https://localhost:18081/api/api/getRuleGraph/';
    // private termResults = 'https://localhost:18081/api/TermResultsByRuleEntity'
    function HomeService(http) {
        this.http = http;
        this.termRuleCategoryListUrl = '/api/TermRulesCategoryList';
        this.entityListUrl = '/api/EntityList';
        this.termRulesPriorityGroupListUrl = '/api/TermRulesPriorityGroupList';
        this.userRolesListUrl = '/api/UserRolesList';
        this.userDisplayNameUrl = '/api/UserDisplayName';
        this.termRuleUrl = '/api/TermRule';
        this.companyListUrl = "/EntitiesList";
        this.mappedEntityListUrl = '/api/MappedEntitiesForCriteria';
        this.ruleGraphUrl = '/api/getRuleGraph/';
        this.termResults = '/api/TermResultsByRuleEntity';
    }
    HomeService.prototype.getTermRuleCategoryList = function () {
        console.log('HomeService : getTermRuleCategoryList()...');
        return this.http.get("" + this.termRuleCategoryListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    HomeService.prototype.getEntityList = function () {
        console.log('HomeService : getEntityList()...');
        return this.http.get("" + this.entityListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    HomeService.prototype.getTermRulesPriorityGroupList = function () {
        console.log('HomeService : getTermRulesPriorityGroupList()...');
        return this.http.get("" + this.termRulesPriorityGroupListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    HomeService.prototype.getUserDisplayName = function () {
        console.log('HomeService : getUserDisplayName()...');
        return this.http.get("" + this.userDisplayNameUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    HomeService.prototype.getTermRule = function (id) {
        console.log('HomeService : getTermRule() with termId ' + id);
        return this.http.get(this.termRuleUrl + "?id=" + id).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    HomeService.prototype.getRuleGraph = function (id) {
        console.log('HomeService : getTermRule() with termId ' + id);
        return this.http.get("" + this.ruleGraphUrl + id + "/null").pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    HomeService.prototype.getCompanyList = function () {
        console.log('HomeService : getCompanyList()...');
        return this.http.get("" + this.companyListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    HomeService.prototype.getMappedEntityList = function (mappedEntity, url) {
        console.log('HomeService : getMappedEntityList()...');
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        var body = JSON.stringify({
            termRuleId: mappedEntity.termRuleId, division: mappedEntity.division, sector: mappedEntity.sector, sic: mappedEntity.sic, filerCategory: mappedEntity.filerCategory,
            entityId: mappedEntity.entityId, maxYear: mappedEntity.maxYear, minYear: mappedEntity.minYear, includeQuarterly: mappedEntity.includeQuarterly, rankId: mappedEntity.rankId
        });
        return this.http.put("" + url, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) { return data.json(); }));
    };
    HomeService.prototype.getTermResults = function (termId, entityId) {
        console.log('HomeService : getTermResults()');
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        var body = JSON.stringify({
            termRuleId: termId, entityId: entityId
        });
        return this.http.put("" + this.termResults, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) { return data.json(); }));
    };
    HomeService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"]])
    ], HomeService);
    return HomeService;
}());



/***/ }),

/***/ "./src/app/login/login.component.css":
/*!*******************************************!*\
  !*** ./src/app/login/login.component.css ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "label{\r\n    margin: 0px 0px 0px 0px !important;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtDQUFrQztBQUN0QyIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJsYWJlbHtcclxuICAgIG1hcmdpbjogMHB4IDBweCAwcHggMHB4ICFpbXBvcnRhbnQ7XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/login/login.component.html":
/*!********************************************!*\
  !*** ./src/app/login/login.component.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n  <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\" strokeWidth=\"8\"\r\n    fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n  <p-messages [style]=\"{color: 'black'}\" [value]=\"msgs\"></p-messages>\r\n</div>\r\n\r\n<div class=\"container shadow-lg p-3 mb-5 bg-white rounded\" style=\"margin-top: 7%;\">\r\n\r\n  <p-card>\r\n    <div>\r\n      <strong\r\n        style=\"text-align: center; padding-left: 45%; font-size: 30px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\"><b>MAXDS\r\n          Login</b></strong><span style=\"font-weight: bold; color: blue;\" class=\"pull-right\"><u>(Build\r\n          Version\r\n          2.0.0.2)</u></span>\r\n    </div>\r\n\r\n    <hr style=\"border: 1px solid blue;\">\r\n    <p style=\"font-size: small; text-align: right;\" class=\"text-center\">\r\n      <I><strong> Please enter your SEC Username and Password. Username must exist in Active Directory to be a valid\r\n          user to login. Please go to <a href=\"https://seceamsprod.servicenowservices.com/secsp?id=sc_cat_item&sys_id=c77141fb6fcb3100256068826e3ee45c\" target=\"_blank\">AskIT</a> to request access.\r\n        </strong></I></p>\r\n    <form>\r\n      <input type=\"hidden\" name=\"_csrf.parameterName\" value=\"_csrf.token\" />\r\n      <div class=\"col-lg-3\" style=\"text-align: center;\">\r\n        <img src=\"../../assets/images/sec_logo.jpg\" alt=\"mxdscompanylogo\"\r\n          style=\"width: 250px ; height: 250px; margin-top: 25px;\">\r\n      </div>\r\n      <div class=\"col-lg-9\">\r\n        <div class=\"col-lg-12\" style=\"margin-left:5%; margin-top: 5%;\">\r\n          <div>\r\n          <span ng-show=\"showErrors\" style=\"color: red; margin-left: 30%\"><strong>{{loginErrorMsg}}</strong></span>\r\n          <span ng-show=\"showLoginErrors\" style=\"color: red;\"><strong style=\"float: left;\">{{loginErrorMessg[0]}}</strong></span><br>\r\n          <span ng-show=\"showLoginErrors\" style=\"color: red;\"><strong  style=\"float: left;\">{{loginErrorMessg[1]}}</strong></span>\r\n        </div>\r\n          <br>\r\n\r\n        </div>\r\n        <div  class=\"col-lg-12\" style=\"margin-left:5%; margin-top: 2%;\">\r\n          <label for=\"username\" class=\"col-lg-2\" style=\"margin: 2px !important; font-size: 18px;\">Username:</label>\r\n          <input name=\"username\" [(ngModel)]=\"user.username\" type=\"text\" class=\"col-lg-8 form-control\"\r\n            placeholder=\"Username\" required autofocus>\r\n            </div>\r\n        <div class=\"col-lg-12\" style=\"margin-left:5%; margin-top: 2%;\">\r\n          <label for=\"pwd\" class=\"col-lg-2\" style=\"margin: 2px !important; font-size: 18px;\">Password:</label>\r\n          <input id=\"pwd\" name=\"password\" [(ngModel)]=\"user.password\" type=\"password\" class=\"col-lg-8 form-control\"\r\n            placeholder=\"Password\" required>\r\n\r\n        </div>\r\n        <div class=\"col-lg-12\" style=\"text-align: center; padding-top: 6%; padding-bottom: 3%;\">\r\n          <button pButton type=\"submit\" label=\"Login\" icon=\"pi pi-check\" style=\"margin-right: .25em\"\r\n            (keyup.enter)=\"onLoginSubmit()\" (click)=\"onLoginSubmit()\"></button>\r\n          <button pButton type=\"reset\" label=\"Reset\" icon=\"pi pi-times\" class=\"ui-button-secondary\"></button>\r\n        </div>\r\n      </div>\r\n\r\n    </form>\r\n\r\n  </p-card>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!--<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n      <h1 class=\" text-center login-title\">Sign In</h1>\r\n\r\n\r\n      <h5 style=\"font: bold;color: blue;text-align: right;margin-right: 50px\">MaxDS (Build Version 2.0.0.2)\r\n      </h5>\r\n      <p style=\"font-size: medium; text-align: right;\" class=\"text-center\">Please enter your SEC Username and Password.\r\n        Username\r\n        must exist\r\n        in Active Directory to be a valid user to login.</p>\r\n\r\n    </div>\r\n    <div class=\"col-sm-6 col-md-4 col-md-offset-4\">\r\n\r\n      <form (ngSubmit)=\"onLoginSubmit()\">\r\n\r\n        <input type=\"hidden\" name=\"_csrf.parameterName\" value=\"_csrf.token\" />\r\n        <div class=\"form-group row\">\r\n          <label for=\"username\" class=\"pull-left\" style=\"margin: 2px !important;\">Username:</label>\r\n          <input name=\"username\" [(ngModel)]=\"user.username\" type=\"text\" class=\"form-control\" placeholder=\"Username\"\r\n            required autofocus>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"pwd\" class=\"pull-left\" style=\"margin: 2px !important;\">Password:</label>\r\n          <input id=\"pwd\" name=\"password\" [(ngModel)]=\"user.password\" type=\"password\" class=\"form-control\"\r\n            placeholder=\"Password\" required>\r\n          <span *ngIf=\"showErrors\" style=\"color: red;\">{{loginErrorMsg}}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group row\">\r\n          <button type=\"submit\" class=\"btn btn-default pull-left\">Login</button>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"checkbox1\" style=\"margin: 2px !important;\"> Invalidate existing login session </label>\r\n          <input type=\"checkbox\" name=\"checkbox1\" value='0' title='Invalidate existing login by user' onclick='javascript:if (this.checked) {\r\n                                          this.value = \"1\"\r\n                                      } else {\r\n                                          this.value = \"0\"\r\n                                      }'>\r\n        </div>\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n-->\r\n"

/***/ }),

/***/ "./src/app/login/login.component.ts":
/*!******************************************!*\
  !*** ./src/app/login/login.component.ts ***!
  \******************************************/
/*! exports provided: LoginComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginComponent", function() { return LoginComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var app_services_login_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/services/login.service */ "./src/app/services/login.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var app_app_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/app.component */ "./src/app/app.component.ts");
/* harmony import */ var app_header_header_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/header/header.component */ "./src/app/header/header.component.ts");
/* harmony import */ var app_services_common_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/services/common.service */ "./src/app/services/common.service.ts");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");








var LoginComponent = /** @class */ (function () {
    function LoginComponent(loginService, profileService, router, app, header) {
        this.loginService = loginService;
        this.profileService = profileService;
        this.router = router;
        this.app = app;
        this.header = header;
        this.user = { username: "", password: "", };
        this.showErrors = false;
        this.showLoginErrors = false;
        this.loginErrorMessg = [];
        this.progressSpinner = false;
        this.app.showmenu = false;
        this.showLoginErrors = false;
        this.loginErrorMessg = [];
    }
    LoginComponent.prototype.ngOnInit = function () {
        // if (!this.app.loggedUsername) {
        //   console.log("logout");
        //   this.loginService.logout();
        // }
        this.showLoginErrors = false;
        this.loginErrorMessg = [];
        if (localStorage.getItem('user') !== null && localStorage.getItem('error') === 'true') {
            this.showLoginErrors = true;
            this.loginErrorMessg[0] = 'User name not available in the list of valid MAXDS users. Please contact support.';
            this.loginErrorMessg[1] = 'User is not part of Active Directory. Please contact SEC-HELP';
        }
        else {
            localStorage.clear();
        }
    };
    LoginComponent.prototype.onLoginSubmit = function () {
        var _this = this;
        this.showLoginErrors = false;
        this.loginErrorMessg = [];
        this.loginService.loginApp(this.user.username, this.user.password).subscribe(function (response) {
            _this.app.showmenu = true;
            if (response.status) {
                _this.app.loggedUsername = _this.user.username;
                _this.app.showmenu = true;
                _this.loginService.userId = response.resultObject.userid;
                _this.getAllSharedProfiles();
                _this.router.navigate(['/home'], {
                    state: {
                        loggedUsername: _this.user.username,
                    }
                });
            }
            else {
                console.log("error");
                _this.showErrors = true;
                _this.loginErrorMsg = "Invalid Login credentails";
                _this.router.navigate(['/login'], {});
            }
        }, function (error) {
            _this.showErrors = true;
            _this.loginErrorMsg = "Invalid Login credentails";
            console.log(error);
        });
    };
    LoginComponent.prototype.getAllSharedProfiles = function () {
        var _this = this;
        this.progressSpinner = true;
        this.profileService.getAllSharedProfiles().subscribe(function (response) {
            var preferencesList = [];
            response.forEach(function (preferences) {
                var pname = preferences.companyName.split("$");
                preferencesList.push(_this.getRootRecords(preferences, pname));
            });
            app_services_common_service__WEBPACK_IMPORTED_MODULE_6__["CommonService"].emitsharedPreferenceNotificationEvent(preferencesList);
            _this.progressSpinner = false;
        }, function (error) {
            console.log(error);
            _this.progressSpinner = false;
        });
    };
    LoginComponent.prototype.getRootRecords = function (preferences, companyNames) {
        var entityName = companyNames[0];
        return {
            "data": {
                processId: preferences.processId, companyName: entityName, preferenceName: preferences.preferenceName,
                code: preferences.code, userid: preferences.userid, termName: preferences.termName, resultLink: preferences.resultLink, validationStatus: preferences.validationStatus,
                researchLink: preferences.researchLink, cik: preferences.cik, cName: preferences.cName, quaterly: preferences.quaterly
            },
            "children": this.getChildRecord(preferences, companyNames)
        };
    };
    ;
    LoginComponent.prototype.getChildRecord = function (preferences, companyNames) {
        var childrens = [];
        for (var i = 1; i < companyNames.length; i++) {
            childrens.push({
                "data": {
                    processId: preferences.processId, companyName: companyNames[i], preferenceName: preferences.preferenceName,
                    code: preferences.code, userid: preferences.userid, termName: preferences.termName, resultLink: preferences.resultLink, validationStatus: preferences.validationStatus,
                    researchLink: preferences.researchLink, cik: preferences.cik, cName: preferences.cName, quaterly: preferences.quaterly
                }
            });
        }
        return childrens;
    };
    LoginComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-login',
            template: __webpack_require__(/*! ./login.component.html */ "./src/app/login/login.component.html"),
            styles: [__webpack_require__(/*! ./login.component.css */ "./src/app/login/login.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_login_service__WEBPACK_IMPORTED_MODULE_2__["LoginService"], app_services_profile_service__WEBPACK_IMPORTED_MODULE_7__["ProfileService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], app_app_component__WEBPACK_IMPORTED_MODULE_4__["AppComponent"], app_header_header_component__WEBPACK_IMPORTED_MODULE_5__["HeaderComponent"]])
    ], LoginComponent);
    return LoginComponent;
}());



/***/ }),

/***/ "./src/app/manageTerm/manageTerm.html":
/*!********************************************!*\
  !*** ./src/app/manageTerm/manageTerm.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\" strokeWidth=\"8\"\r\n        fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n    <p-messages [value]=\"msgs\"></p-messages>\r\n</div>\r\n<p-confirmDialog [style]=\"{width: '50vw'}\" [baseZIndex]=\"10000\"></p-confirmDialog>\r\n<div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{errorMsg}}</strong>\r\n</div>\r\n<div>\r\n\r\n    <h2 style=\"background-color:lightblue; width: 100%; text-align: center;\"> Manage Term </h2>\r\n\r\n</div>\r\n<div class=\"row\">\r\n\r\n    <label style=\"float: left; padding-left: 30px;\">Mapping Groups:</label>\r\n\r\n    <!-- <button pButton type=\"button\" label=\"Compustat\" style=\"float: left;\" class=\"ui-button-rounded\" (click)=\"compuStatClick()\"></button>\r\n\r\n<button pButton type=\"button\" label=\"IFRS\" style=\"float: center;\" class=\"ui-button-rounded\" (click)=\"ifrsClick()\"></button>\r\n\r\n<button pButton type=\"button\" label=\"Bloomberg\"  style=\"float: right;\" class=\"ui-button-rounded\" (click)=\"bloombergClick()\"></button> -->\r\n    <div *ngFor=\"let group of termMappingGroups; let idx = index\" style=\"padding-left:50px;\">\r\n        <button pButton type=\"button\" label=\"{{group.mapName}}\" style=\"float: left;\" class=\"ui-button-rounded\"\r\n            (click)=\"groupClick(group, idx)\"></button>&nbsp;&nbsp;\r\n        <button type=\"button\" pButton style=\"float: left;\" (click)=\"removeGroup(group.mapName)\" icon=\"pi pi-times\"\r\n            Class=\"ui-button-danger\" pTooltip=\"Delete Group\"></button>&nbsp;\r\n    </div>\r\n\r\n</div>\r\n<div style=\"height: 5%;\">\r\n    &nbsp;\r\n</div>\r\n<div style=\"text-align: left;\">\r\n    <input [disabled]=\"disableNewGroup\" type=\"text\" [(ngModel)]=\"newGroupName\" name=\"group\" placeholder=\"Group Name\"\r\n        joyrideStep=\"groupName\" title=\"Group Name\" text=\"This is where a user can enter a desired group name.\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;\r\n    <button [disabled]=\"disableNewGroup\" pButton type=\"button\" label=\"New Group\" icon=\"pi pi-plus\" class=\"\"\r\n        id=\"newGroup\" (click)=\"addNewGroup()\" joyrideStep=\"newGroupStep\" title=\"New Group\"\r\n        text=\"Once a user has entered a group name, to create a new group, click the “New Group” button. \"></button>\r\n    <button pButton type=\"button\" style=\" margin-left: 15px; \" label=\"New Row\" icon=\"pi pi-plus\" class=\"\" id=\"newRow\"\r\n        joyrideStep=\"newRowStep\" title=\"New Row\"\r\n        text=\"Once a user has entered a group name, to create a new row, click the “New Row” button. \"\r\n        (click)=\"addNewTermMapping()\"></button>\r\n    <!-- <button pButton type=\"button\" label=\"Export Term Map\" style=\"float: right\" ></button> &nbsp;&nbsp; -->\r\n</div>\r\n<div style=\"height: 5%;\">\r\n    &nbsp;\r\n</div>\r\n<div>\r\n    <p-table #termMapTable [columns]=\"termMapcols\" [value]=\"actualTermList\" [paginator]=\"true\" [rows]=\"10\"\r\n        editMode=\"row\" p-dataTable [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n        columnResizeMode=\"expand\" [reorderableColumns]=\"true\" dataKey=\"termId\" exportFilename=\"termMapData\">\r\n\r\n        <ng-template pTemplate=\"caption\">\r\n            <div class=\"ui-helper-clearfix\">\r\n                <i class=\"pi pi-search\" style=\"margin:4px 4px 0 0\"></i>\r\n                <input type=\"text\" pInputText size=\"50\" placeholder=\"Search Term Map\" joyrideStep=\"searchTermMap\"\r\n                    title=\"Search Term Map\" text=\"This is where a user can search the term map for a desired result.\"\r\n                    (input)=\"termMapTable.filterGlobal($event.target.value, 'contains')\" style=\"width:auto\">\r\n                <button type=\"button\" joyrideStep=\"exportTermMap\" title=\"Export Term Map\"\r\n                    text=\"Click the “Export Term Map” Button to generate a CSV file with the complete mapping information. The file will be named 'ExportTermMapInformation.csv' and stored in the default download folder.\"\r\n                    class=\"ui-button-warning\" pButton icon=\"fa fa-file-o\" iconPos=\"left\" label=\"Export Term Map\"\r\n                    (click)=\"termMapTable.exportCSV()\" style=\"float:right\"></button>\r\n            </div>\r\n        </ng-template>\r\n\r\n        <ng-template pTemplate=\"header\" let-columns>\r\n            <tr style=\"background-color: aqua\">\r\n                <th colspan=\"3\">MAXDS</th>\r\n                <th colspan=\"4\" *ngFor=\"let col of topCol\"> {{col.field}}</th>\r\n\r\n            </tr>\r\n            <tr>\r\n                <th *ngFor=\"let col of termMapcols\" pResizableColumn pReorderableColumn [pSortableColumn]=\"col.field\"\r\n                    [hidden]=\"!col.isDisplayed\" [ngSwitch]=\"col.field\">\r\n                    <div pTooltip=\"Click to sort {{col.header}}\">\r\n                        {{col.header}}\r\n                        <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                            ariaLabelDesc=\"Activate to sort in descending order\"\r\n                            ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n            <tr>\r\n                <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\" [hidden]=\"!col.isDisplayed\">\r\n                    <div *ngIf=\"col.field !== ''\">\r\n                        <input *ngIf=\"col.field === 'termId'\"\r\n                        pInputText type=\"text\" placeholder= {{presetTermId}}\r\n                        [value]=\"termMapTable.filters[col.field] ? termMapTable.filters[col.field].value : ''\"\r\n                        (input)=\"termMapTable.filter($event.target.value, col.field, col.filterMatchMode);resetPlaceholder()\"\r\n                        style=\"width: 60px\">\r\n                        <input *ngIf=\"col.field === 'name' || col.field === 'description'\"\r\n                            pInputText type=\"text\" placeholder= \"Search\"\r\n                            [value]=\"termMapTable.filters[col.field] ? termMapTable.filters[col.field].value : ''\"\r\n                            (input)=\"termMapTable.filter($event.target.value, col.field, col.filterMatchMode);\"\r\n                            style=\"width: 60px\">\r\n                        <input *ngIf=\"col.field !== 'termId' && col.field !== 'name' && col.field !== 'description'\"\r\n                            pInputText type=\"text\" placeholder=\"Search\"\r\n                            [value]=\"termMapTable.filters[col.field] ? termMapTable.filters[col.field].value : ''\"\r\n                            (input)=\"termMapTable.filter($event.target.value, col.field, col.filterMatchMode);onFilter($event.target.value, col.field, col.filterMatchMode)\"\r\n                            style=\"width: 60px\">\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-index=\"rowIndex\" let-editing=\"editing\">\r\n            <tr [pSelectableRow]=\"rowData\" [pEditableRow]=\"rowData\">\r\n                <td style=\"word-break:  break-all\" pTooltip=\"{{rowData.termId}}\" pEditableColumn>\r\n                    {{rowData.termId}}\r\n                </td>\r\n                <td style=\"word-break:  break-all\" pTooltip=\"{{rowData.name}}\" pEditableColumn>\r\n                    {{rowData.name}}\r\n                </td>\r\n                <td style=\"word-break:  break-all\" pTooltip=\"{{rowData.description}}\" pEditableColumn>\r\n                    {{rowData.description}}\r\n                </td>\r\n                <ng-container *ngFor=\"let mappingInfo of rowData.mappedInfoSets let idx = index\">\r\n                    <td *ngIf=\"isGroupVisible(mappingInfo.mapName)\" style=\"word-break:  break-all\"\r\n                        pTooltip=\"{{mappingInfo.mapTermId}}\" pEditableColumn>\r\n                        <div *ngIf=\"!rowData.isEditing\">{{rowData.mappedInfoSets[idx].mapTermId}}</div>\r\n                        <div *ngIf=\"rowData.isEditing\"><input type=\"text\" size=\"5\" [(ngModel)]=\"mappingInfo.mapTermId\">\r\n                        </div>\r\n\r\n                    </td>\r\n                    <td *ngIf=\"isGroupVisible(mappingInfo.mapName)\" style=\"word-break:  break-all\"\r\n                        pTooltip=\"{{mappingInfo.mapTermName}}\" pEditableColumn>\r\n                        <div *ngIf=\"!rowData.isEditing\">{{mappingInfo.mapTermName}}</div>\r\n                        <div *ngIf=\"rowData.isEditing\"><textarea rows=\"5\" cols=\"5\" type=\"text\"\r\n                                [(ngModel)]=\"mappingInfo.mapTermName\"></textarea> </div>\r\n                    </td>\r\n                    <td *ngIf=\"isGroupVisible(mappingInfo.mapName)\" style=\"word-break:  break-all\"\r\n                        pTooltip=\"{{mappingInfo.mapTermDescription}}\" pEditableColumn>\r\n                        <div *ngIf=\"!rowData.isEditing\">{{mappingInfo.mapTermDescription}}</div>\r\n                        <div *ngIf=\"rowData.isEditing\"><textarea rows=\"5\" cols=\"5\" type=\"text\"\r\n                                [(ngModel)]=\"mappingInfo.mapTermDescription\"></textarea> </div>\r\n                    </td>\r\n                    <td *ngIf=\"isGroupVisible(mappingInfo.mapName)\" style=\"word-break:  break-all\"\r\n                        pTooltip=\"{{mappingInfo.mapTermMappingInfo}}\" pEditableColumn>\r\n                        <div *ngIf=\"!rowData.isEditing\">{{mappingInfo.mapTermMappingInfo}}</div>\r\n                        <div *ngIf=\"rowData.isEditing\"><textarea rows=\"5\" cols=\"5\" type=\"text\"\r\n                                [(ngModel)]=\"mappingInfo.mapTermMappingInfo\"></textarea> </div>\r\n                    </td>\r\n                </ng-container>\r\n                <td>\r\n                    <button *ngIf=\"!rowData.isEditing\" type=\"button\" pInitEditableRow pButton\r\n                        (click)=\"onRowEdit(rowData, index)\" icon=\"pi pi-pencil\" styleClass=\"ui-button-info\"\r\n                        pTooltip=\"Edit Manage Term Data\"></button>&nbsp;\r\n                    <button *ngIf=\"rowData.isEditing\" type=\"button\" pSaveEditableRow pButton\r\n                        (click)=\"onRowSave(rowData, index)\" icon=\"pi pi-save\" styleClass=\"ui-button-info\"\r\n                        pTooltip=\"Save Manage Term Data\"></button>&nbsp;\r\n                    <button *ngIf=\"rowData.isEditing\" type=\"button\" pCancelEditableRow pButton\r\n                        (click)=\"onRowCancel(rowData, index)\" icon=\"pi pi-times\" Class=\"ui-button-danger\"\r\n                        pTooltip=\"Cancel Edit\"></button>&nbsp;\r\n                    <button *ngIf=\"!rowData.isEditing\" type=\"button\" pButton (click)=\"onRowDelete(rowData, index)\"\r\n                        pInitEditableRow icon=\"pi pi-trash\" styleClass=\"ui-button-info\"\r\n                        pTooltip=\"Delete Manage Term Data\"></button>&nbsp;\r\n\r\n                </td>\r\n            </tr>\r\n\r\n        </ng-template>\r\n        <ng-template pTemplate=\"summary\">\r\n            Total number of Records: {{termMapTable.totalRecords}}\r\n        </ng-template>\r\n    </p-table>\r\n\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/manageTerm/manageTermComponent.ts":
/*!***************************************************!*\
  !*** ./src/app/manageTerm/manageTermComponent.ts ***!
  \***************************************************/
/*! exports provided: ManageTermComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManageTermComponent", function() { return ManageTermComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _manageTermService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./manageTermService */ "./src/app/manageTerm/manageTermService.ts");
/* harmony import */ var _domain_termMap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../domain/termMap */ "./src/app/domain/termMap.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_5__);







var ManageTermComponent = /** @class */ (function () {
    function ManageTermComponent(manageTermService, router, termMap, confirmationService) {
        this.manageTermService = manageTermService;
        this.router = router;
        this.termMap = termMap;
        this.confirmationService = confirmationService;
        this.subscription = [];
        //termMapList: any[] = [];
        this.editTerms = {};
        this.actualTermList = [];
        this.msgs = [];
        this.errorMsg = '';
        this.termMappingGroups = [];
        this.topCol = [];
        this.toogleCols = [];
        this.disableNewGroup = false;
        this.newRow = false;
        this.shownGroupCount = 0;
        this.first = 0;
        this.rows = 10;
        this.presetTermId = 'Search';
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
    }
    ManageTermComponent.prototype.ngOnInit = function () {
        console.log('manageTermComponent : calling ngOnInit...');
        //this.termMapcols = this.termMap.termMapCols();
        this.loadTermMappingInformationList();
        this.getTermMapGroups();
        //pre set termId filter with termid passed in from AccuracyTest page, when user clicks on termid link
        if (sessionStorage.getItem('accuracyTest.presetTermId') !== null) {
            this.presetTermId = sessionStorage.getItem('accuracyTest.presetTermId');
            this.onFilter(this.presetTermId, 'termId', 'contains');
            sessionStorage.removeItem('accuracyTest.presetTermId');
        }
    };
    ManageTermComponent.prototype.resetPlaceholder = function () {
        this.presetTermId = 'Search';
    };
    ManageTermComponent.prototype.getTermMapGroups = function () {
        var _this = this;
        this.manageTermService.getTermMapGroupNameList().subscribe(function (response) {
            _this.termMappingGroups = response;
            if (_this.termMappingGroups.length >= 6) {
                _this.disableNewGroup = true;
            }
            else
                _this.disableNewGroup = false;
            _this.termMappingGroups.forEach(function (obj) {
                obj.isDisplayed = true;
                var desc = { field: obj.mapName, header: obj.mapName };
                _this.topCol.push(desc);
            });
        });
    };
    ManageTermComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    ManageTermComponent.prototype.onFilter = function (filter, col, cont) {
        // if (col === 'cik') {
        //     if (filter.length === 10) {
        //         filter = filter.replace(/^0+/, '');
        //     }
        //     this.termMapTable.filter(filter, col, 'contains');
        // }
        this.termMapTable.filter(filter, col, 'contains');
    };
    ManageTermComponent.prototype.formatHeaders = function (list) {
        this.termMapcols = [
            { field: 'termId', header: 'Term ID', isDisplayed: true, group: 'Maxds' },
            { field: 'name', header: 'Term Name', isDisplayed: true, group: 'Maxds' },
            { field: 'description', header: 'Description', isDisplayed: true, group: 'Maxds' },
        ];
        if (list.mappedInfoSets[0]) {
            this.termMapcols.push({ field: 'atermId', header: 'Term ID', group: 0, isDisplayed: true }, { field: 'atermName', header: 'Term Name', group: 0, isDisplayed: true }, { field: 'adescription', header: 'Description', group: 0, isDisplayed: true }, { field: 'amapping', header: 'Mapping', group: 0, isDisplayed: true });
        }
        if (list.mappedInfoSets[1]) {
            this.termMapcols.push({ field: 'btermId', header: 'Term ID', group: 1, isDisplayed: true }, { field: 'btermName', header: 'Term Name', group: 1, isDisplayed: true }, { field: 'bdescription', header: 'Description', group: 1, isDisplayed: true }, { field: 'bmapping', header: 'Mapping', group: 1, isDisplayed: true });
        }
        if (list.mappedInfoSets[2]) {
            this.termMapcols.push({ field: 'ctermId', header: 'Term ID', group: 2, isDisplayed: true }, { field: 'ctermName', header: 'Term Name', group: 2, isDisplayed: true }, { field: 'cdescription', header: 'Description', group: 2, isDisplayed: true }, { field: 'cmapping', header: 'Mapping', group: 2, isDisplayed: true });
        }
        if (list.mappedInfoSets[3]) {
            this.termMapcols.push({ field: 'dtermId', header: 'Term ID', group: 3, isDisplayed: true }, { field: 'dtermName', header: 'Term Name', group: 3, isDisplayed: true }, { field: 'ddescription', header: 'Description', group: 3, isDisplayed: true }, { field: 'dmapping', header: 'Mapping', group: 3, isDisplayed: true });
        }
        if (list.mappedInfoSets[4]) {
            this.termMapcols.push({ field: 'etermId', header: 'Term ID', group: 4, isDisplayed: true }, { field: 'etermName', header: 'Term Name', group: 4, isDisplayed: true }, { field: 'edescription', header: 'Description', group: 4, isDisplayed: true }, { field: 'eapping', header: 'Mapping', group: 4, isDisplayed: true });
        }
        if (list.mappedInfoSets[5]) {
            this.termMapcols.push({ field: 'ftermId', header: 'Term ID', group: 5, isDisplayed: true }, { field: 'ftermName', header: 'Term Name', group: 5, isDisplayed: true }, { field: 'fdescription', header: 'Description', group: 5, isDisplayed: true }, { field: 'fmapping', header: 'Mapping', group: 5, isDisplayed: true });
        }
        this.termMapcols.push({ field: '', header: 'Options', isDisplayed: true, group: 'Options' });
    };
    ManageTermComponent.prototype.onRowEdit = function (rowdata, index) {
        // this.actualTermList[index].isEditing = true;
        rowdata.isEditing = true;
        this.editTerms[rowdata.termId] = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, rowdata);
    };
    ManageTermComponent.prototype.onRowCancel = function (rowdata, index) {
        // this.actualTermList[index].isEditing = false;
        rowdata.isEditing = false;
        delete this.editTerms[rowdata.termId];
        if (this.newRow) {
            this.actualTermList.shift();
        }
    };
    ManageTermComponent.prototype.onRowDelete = function (rowdata, index) {
        var _this = this;
        this.msgs = [];
        var mapInfo = rowdata;
        this.confirmationService.confirm({
            message: 'Are you sure you want to delete this ' + mapInfo.termId + ' ?',
            header: 'Remove Term Id ' + mapInfo.termId,
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.manageTermService.removeTermMap(mapInfo).subscribe(function (response) {
                    if (response) {
                        //this.termMapList[index].termId = re;
                        // this.actualTermList[index].isEditing = false;
                        rowdata.isEditing = false;
                        window.scroll(0, 0);
                        _this.msgs = [{ severity: 'info', summary: 'Term Map', detail: ' Successfully removed Mapping information for the term ' + mapInfo.termId }];
                        _this.loadTermMappingInformationList();
                        //this.getTermMapGroups();
                    }
                });
                rowdata.isEditing = false;
            },
            reject: function () {
            }
        });
    };
    ManageTermComponent.prototype.addNewTermMapping = function () {
        var _this = this;
        var termMap = {};
        termMap.mappingInfo = {};
        termMap.termId = 'TBD';
        termMap.isEditing = true;
        termMap.isTermRule = false;
        termMap.mappedInfoSets = [];
        for (var i = 0; i < this.termMappingGroups.length; i++) {
            var mappingInfo = {};
            mappingInfo.mapName = this.termMappingGroups[i].mapName;
            termMap.mappedInfoSets.push(mappingInfo);
        }
        this.newRow = true;
        this.actualTermList.forEach(function (obj) {
            if (obj.termId === termMap.termId) {
                var counter = _this.actualTermList.length + 1;
                termMap.termId = termMap.termId + ' ' + counter;
            }
        });
        this.actualTermList.unshift(termMap);
    };
    ;
    ManageTermComponent.prototype.onRowSave = function (rowdata, index) {
        var _this = this;
        //this.editTerms[index] = rowdata
        //this.termMapList[index] = this.editTerms[rowdata.termId];
        // var mapInfo = this.actualTermList[index];
        var mapInfo = rowdata;
        this.msgs = [];
        this.manageTermService.saveTermMap(mapInfo).subscribe(function (response) {
            if (response) {
                //this.termMapList[index].termId = re;
                // this.actualTermList[index].isEditing = false;
                rowdata.isEditing = false;
                _this.loadTermMappingInformationList();
                //this.getTermMapGroups();
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Term Map', detail: ' Successfully saved Mapping information for the term ' + mapInfo.termId }];
            }
        });
        // this.actualTermList[index].isEditing = false;
        rowdata.isEditing = false;
        delete this.editTerms[rowdata.termId];
        //this.editTerms = [];
    };
    ManageTermComponent.prototype.addNewGroup = function () {
        var _this = this;
        this.errorMsg = "";
        this.showError = false;
        if (!this.newGroupName || this.newGroupName.length === 0) {
            window.scroll(0, 0);
            this.errorMsg = 'Error","Please enter a valid term mapping group name.';
            this.showError = true;
            return;
        }
        this.manageTermService.addTermMappingGroup(this.newGroupName).subscribe(function (response) {
            if (response.status) {
                var newData = { mapName: _this.newGroupName };
                _this.termMappingGroups.push(newData);
                _this.newGroupName = "";
                _this.actualTermList = [];
                _this.topCol = [];
                _this.getTermMapGroups();
                _this.loadTermMappingInformationList();
                window.scroll(0, 0);
                _this.msgs = [{ severity: 'info', summary: 'Add new Group', detail: ' Successfully added new Term Mapping group' }];
            }
            else {
                window.scroll(0, 0);
                _this.errorMsg = response.errorMessage;
                _this.showError = true;
            }
        }, function (err) {
            window.scroll(0, 0);
            this.errorMsg = 'Failed to add Term Mapping group.';
            this.showError = true;
        });
    };
    ManageTermComponent.prototype.removeGroup = function (groupName) {
        var _this = this;
        this.msgs = [];
        this.errorMsg = "";
        this.showError = false;
        this.confirmationService.confirm({
            message: 'Are you sure you want to delete all the mapping info associated with the group ' + groupName + ' ?',
            header: 'Remove Group ' + groupName,
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.manageTermService.removeTermMappingGroup(groupName).subscribe(function (response) {
                    if (response.status === true) {
                        _this.termMappingGroups = [];
                        _this.actualTermList = [];
                        _this.topCol = [];
                        _this.getTermMapGroups();
                        _this.loadTermMappingInformationList();
                        window.scroll(0, 0);
                        _this.msgs = [{ severity: 'info', summary: 'Successfully removed group and all the mapping associated with the group.', detail: '' }];
                    }
                    else {
                        window.scroll(0, 0);
                        _this.errorMsg = response.errorMessage;
                        _this.showError = true;
                    }
                });
            },
            reject: function () {
            }
        });
    };
    ManageTermComponent.prototype.loadTermMappingInformationList = function () {
        var _this = this;
        this.manageTermService.getManageTermMap().subscribe(function (response) {
            _this.actualTermList = response;
            _this.termMapcols = [];
            _this.formatHeaders(response[0]);
        });
    };
    ;
    ManageTermComponent.prototype.groupClick = function (group, index) {
        console.log(group, index);
        if (this.toogleCols.includes(group)) {
            this.termMappingGroups[index].isDisplayed = true;
            this.topCol.splice(this.termMappingGroups.indexOf(group), 0, { field: group.mapName, header: group.mapName });
            var removeIndex = this.toogleCols.indexOf(group);
            this.toogleCols.splice(removeIndex, 1);
            this.termMapcols.forEach(function (obj) {
                if (obj.group === index) {
                    obj.isDisplayed = true;
                }
            });
        }
        else {
            this.termMapcols.forEach(function (obj) {
                if (obj.group === index) {
                    obj.isDisplayed = false;
                }
            });
            this.termMappingGroups[index].isDisplayed = false;
            this.topCol = this.topCol.filter(function (item) { return item.field !== group.mapName; });
            //this.topCol.splice(index,1);
            this.toogleCols.push(group);
        }
    };
    ManageTermComponent.prototype.isGroupVisible = function (mapName) {
        for (var i = 0; i < this.termMappingGroups.length; i++) {
            if (mapName === this.termMappingGroups[i].mapName) {
                return this.termMappingGroups[i].isDisplayed;
            }
        }
        return true;
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(('termMapTable')),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ManageTermComponent.prototype, "termMapTable", void 0);
    ManageTermComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'export-page',
            template: __webpack_require__(/*! ./manageTerm.html */ "./src/app/manageTerm/manageTerm.html"),
            styles: [__webpack_require__(/*! ../app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_manageTermService__WEBPACK_IMPORTED_MODULE_3__["ManageTermService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _domain_termMap__WEBPACK_IMPORTED_MODULE_4__["TermMap"], primeng_api__WEBPACK_IMPORTED_MODULE_5__["ConfirmationService"]])
    ], ManageTermComponent);
    return ManageTermComponent;
}());



/***/ }),

/***/ "./src/app/manageTerm/manageTermService.ts":
/*!*************************************************!*\
  !*** ./src/app/manageTerm/manageTermService.ts ***!
  \*************************************************/
/*! exports provided: ManageTermService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManageTermService", function() { return ManageTermService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");




var ManageTermService = /** @class */ (function () {
    // private manageTermMapUrl: string = "https://localhost:18081/api/TermMap/GetAllMapInformation";
    // private termMapGroupNameListUrl: string = "https://localhost:18081/api/TermMap/GroupNames";
    // private addTermMapGroupUrl: string = "https://localhost:18081/api/TermMap/AddGroup";
    // private removeTermMapGroupUrl = 'https://localhost:18081/api/TermMap/RemoveGroup';
    // private saveTermMapUrl = 'https://localhost:18081/api/TermMap/MapInformation/Save';
    // private removeTermMapUrl = 'https://localhost:18081/api/TermMap/MapInformation/RemoveItem';
    function ManageTermService(http) {
        this.http = http;
        this.manageTermMapUrl = "/api/TermMap/GetAllMapInformation";
        this.termMapGroupNameListUrl = "/api/TermMap/GroupNames";
        this.addTermMapGroupUrl = "/api/TermMap/AddGroup";
        this.removeTermMapGroupUrl = '/api/TermMap/RemoveGroup';
        this.saveTermMapUrl = '/api/TermMap/MapInformation/Save';
        this.removeTermMapUrl = '/api/TermMap/MapInformation/RemoveItem';
    }
    ManageTermService.prototype.getManageTermMap = function () {
        console.log('Manage Term Map : getManageTermMap()...');
        return this.http.get("" + this.manageTermMapUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ManageTermService.prototype.getTermMapGroupNameList = function () {
        console.log('Manage Term Map : getTermMapGroupNameList()...');
        return this.http.get("" + this.termMapGroupNameListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ManageTermService.prototype.addTermMappingGroup = function (groupName) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ groupName: groupName });
        headers.append('Content-Type', 'application/json');
        return this.http.get(this.addTermMapGroupUrl + "?groupName=" + groupName).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ManageTermService.prototype.removeTermMappingGroup = function (groupName) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ groupName: groupName });
        headers.append('Content-Type', 'application/json');
        return this.http.get(this.removeTermMapGroupUrl + "?groupName=" + groupName + "&userId=" + localStorage.getItem('userid')).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ManageTermService.prototype.saveTermMap = function (info) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ termId: info.termId, name: info.name, description: info.description, isEditing: info.isEditing, isTermRule: info.isTermRule,
            mappedInfoSets: info.mappedInfoSets });
        headers.append('Content-Type', 'application/json');
        return this.http.put("" + this.saveTermMapUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    ManageTermService.prototype.removeTermMap = function (info) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ termId: info.termId, name: info.name, description: info.description, isEditing: info.isEditing, isTermRule: info.isTermRule,
            mappedInfoSets: info.mappedInfoSets });
        headers.append('Content-Type', 'application/json');
        return this.http.put("" + this.removeTermMapUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    ManageTermService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"]])
    ], ManageTermService);
    return ManageTermService;
}());



/***/ }),

/***/ "./src/app/processingTerms/processingTerms.html":
/*!******************************************************!*\
  !*** ./src/app/processingTerms/processingTerms.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\" strokeWidth=\"8\"\r\n        fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n    <p-messages [value]=\"msgs\"></p-messages>\r\n</div>\r\n<div *ngIf=\"showError\" class=\"alert alert-danger\" role=\"alert\">\r\n    <strong>{{errorMsg}}</strong>\r\n</div>\r\n<p-confirmDialog [style]=\"{width: '50vw'}\" [baseZIndex]=\"10000\"></p-confirmDialog>\r\n<div>\r\n\r\n    <h2 style=\"background-color:lightblue; width: 100%; text-align: center;\">Term Rule Processing</h2>\r\n\r\n</div>\r\n<p-tabView>\r\n    <p-tabPanel header=\"Process All Terms\" *ngIf=\"isAdmin\">\r\n        <div class=\"row\">\r\n            <div class=\"exprcolumn\" style=\"width: 100%\">\r\n\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        <p-radioButton name=\"filterRadio\" value=\"company\" [(ngModel)]=\"filterRadio\"></p-radioButton>\r\n                        <label>Search by Company: </label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-autoComplete [(ngModel)]=\"companyName\" name=\"companyName\" [size]=\"50\"\r\n                            [suggestions]=\"filteredCompany\" (completeMethod)=\"searchCompany($event)\"\r\n                            (ngModelChange)=\"onSelectCompany($event)\"\r\n                            placeholder=\"Search Company\" [size]=\"50\" [dropdown]=\"true\">\r\n                        </p-autoComplete>\r\n\r\n                        <button pButton type=\"button\" label=\"Go To Peer Group\" class=\"ui-button-rounded\"\r\n                            (click)=\"goToPeer($event)\"></button>&nbsp;&nbsp;\r\n                        <button type=\"button\" pButton (click)=\"resetCoverage()\" icon=\"pi pi-times\"\r\n                            Class=\"ui-button-danger\" pTooltip=\"Reset Term Rule Processing\"></button>&nbsp;\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\" style=\"height: 5px;\">\r\n\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        <p-radioButton name=\"filterRadio\" value=\"group\" [(ngModel)]=\"filterRadio\"></p-radioButton>\r\n                        Search by Group: <label>\r\n                            Division -> Sector:</label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\"\r\n                            [(ngModel)]=\"divSector\" [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                            (onChange)=\"divSectorChange($event)\" [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                        </p-dropdown>\r\n                        &nbsp; {{divisionCount}}\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        <label>Industry: </label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filteredindustry\" [(ngModel)]=\"industry\" placeholder=\"Select Industry\"\r\n                            [showClear]=\"true\" (onChange)=\"processIndustryChange($event)\" [virtualScroll]=\"true\"\r\n                            [itemSize]=\"31\" filter=\"true\" [style]=\"{'width':'400px'}\"></p-dropdown>\r\n                        &nbsp; {{industryCount}}\r\n\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        <label>Filer Category:</label>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <p-dropdown [options]=\"filteredfilerCategory\" [(ngModel)]=\"filerCategory\"\r\n                            placeholder=\"Select Filer Category\" [showClear]=\"true\"\r\n                            (onChange)=\"processfilCatChange($event)\" [virtualScroll]=\"true\" [itemSize]=\"31\"\r\n                            filter=\"true\" [style]=\"{'width':'400px'}\"></p-dropdown>&nbsp; {{categoryCount}}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        <p-radioButton name=\"filterRadio\" value=\"all\" [(ngModel)]=\"filterRadio\"></p-radioButton>\r\n\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <label>\r\n                            All Companies\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"column1\">\r\n                        &nbsp;\r\n                    </div>\r\n                    <div class=\"column2\">\r\n                        <button pButton type=\"button\" label=\"Process Now\" class=\"ui-button-rounded ui-button-success\"\r\n                            (click)=\"ProcessAllRulesWithCriteria()\"></button> &nbsp;&nbsp;\r\n                        <button pButton type=\"button\" label=\"Continue Processing\"\r\n                            class=\"ui-button-rounded ui-button-warning\" (click)=\"continueProcessingAllTerms()\"></button>\r\n                        &nbsp;&nbsp;\r\n                        <button pButton type=\"button\" label=\"Cancel Processing\"\r\n                            class=\"ui-button-rounded ui-button-danger\"\r\n                            (click)=\"cancelProcessing()\"></button>&nbsp;&nbsp;\r\n                        <button pButton type=\"button\" label=\"Reset Processing\"\r\n                            class=\"ui-button-rounded ui-button-danger\" (click)=\"resetProcessingPopup = true\"></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </p-tabPanel>\r\n    <p-tabPanel header=\"Process Selected Terms\">\r\n\r\n        <div class=\"form-group row\">\r\n            <div class=\"column1\">\r\n                <input #accuracyTestCheckbox type=\"checkbox\" class=\" customcheckbox\" (click)=\"enableAccuracyTest($event)\" style=\"margin:5px !important;\">\r\n                <label style=\"margin:5px !important;\">Process Accuracy Test Terms: </label>\r\n            </div>\r\n            <div class=\"col-xs-8\">\r\n                <button *ngIf=\"checkAccuracyTest\" icon=\"pi pi-replay\" label=\"Process Accuracy Test Terms\"\r\n                    style=\"margin:3px \" type=\"button\" pButton (click)=\"processAccuTerm()\"></button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group row\">\r\n            <p-radioButton class=\"column1\" value=\"termRadio\" label=\"Term Name:\" name=\"termN\" [(ngModel)]=\"processRadio\" (onClick)=\"termRadioChecked($event)\"\r\n                inputId=\"termN\"></p-radioButton>\r\n            <div class=\"col-xs-8\">\r\n                <p-autoComplete [style]=\"{'width':'400px !important'}\" [inputStyle]=\"{'width':'400px'}\" name=\"termName\"\r\n                    [suggestions]=\"filteredTerms\" (completeMethod)=\"filterTerm($event)\" placeholder=\"Search Terms\"\r\n                    [multiple]=\"true\" [(ngModel)]=\"selectedTerms\" [dropdown]=\"true\"\r\n                    (ngModelChange)=\"onSelectTerm($event)\" [disabled]=\"termAutoCompleteDisable\">\r\n                </p-autoComplete>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <p-radioButton name=\"termN\" class=\"column1\" value=\"companyRadio\" [(ngModel)]=\"processRadio\"\r\n                label=\"Search by Company:\">\r\n            </p-radioButton>\r\n            <div class=\"col-xs-8\">\r\n                <p-autoComplete [style]=\"{'width':'400px !important'}\"\r\n                    [inputStyle]=\"{'width':'400px','maxwidth':'400px'}\" aria-required=\"true\" name=\"companyName\"\r\n                    [suggestions]=\"selectedTermsfilteredCompany\" placeholders=\"filteredCompany\"\r\n                    (completeMethod)=\"selectedTermsSearchCompany($event)\" placeholder=\"Search Company\"\r\n                    [dropdown]=\"false\" multiple=\"true\" aria-required=\"companyName\" [(ngModel)]=\"selectedTermsCompanies\"\r\n                    (onSelect)=\"addOrRemoveEntities()\" (onUnselect)=\"addOrRemoveEntities()\">\r\n                </p-autoComplete>\r\n                <button icon=\"pi pi-check\" label=\"Go To Peer Group\" style=\"margin:3px\"\r\n                    [disabled]=\"!(selectedTermsCompanies.length === 1)\" (click)=\"selectedTermGoToPeer($event)\"\r\n                    class=\"create-profile\" type=\"button\" pButton></button>&nbsp;\r\n\r\n                <button (click)=\"handleCIKListSearch('cik-dialog')\" pTooltip=\"Click to Add CIK list\" style=\"margin:0; border:0; outline:0; background-color:transparent; box-shadow: none; \" type=\"button\" pButton >\r\n                    <img src=\"../../assets/images/Upload.PNG\" alt=\"CIK Upload\" style=\"background: url('../../assets/images/Upload.PNG')\" height=\"100%\" width=\"100%\" /></button>&nbsp;\r\n\r\n                <jw-modal id=\"cik-dialog\">\r\n                  <table border=\"0\" style=\"width: 100%;\">\r\n                    <tr>\r\n                      <td style=\"padding: 20px; width:100%; column-span: all;\">\r\n                          <label style=\"padding-top: 5px; word-break: keep-all\" >Please copy paste CIK list or upload a csv file with comma as delimiter. Invalid CIKs will be ignored. </label>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td style=\"width:100%; column-span: all;\">\r\n                            <table border=\"0\" style=\"padding: 10px\">\r\n                                <tr>\r\n                                  <td valign=\"top\" align=\"right\" style=\"padding: 20px; word-break: keep-all; width:20%;\" ><label>CIKs: </label>\r\n                                  </td>\r\n                                  <td valign=\"top\" style=\"padding: 20px; width: 60%;\" >\r\n                                    <textarea style=\"width: 100%;\" [(ngModel)]=\"ciksFromDialog\" ></textarea>\r\n                                  </td>\r\n                                  <td valign=\"bottom\" style=\"padding: 20px; width:20%; \">\r\n                                      <input #inputFile id=\"file-field\" name=\"file-field\"  onclick=\"this.value = null\" (change)=\"uploadFile($event)\" type=\"file\" > <!--    accept=\".png,.jpg,.jpeg\">   -->\r\n                                      <!-- <button type=\"button\"  (click)=\"upload('cik-dialog');\">Upload</button>&nbsp;&nbsp;  -->\r\n                                  </td>\r\n                                </tr>\r\n                              </table>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td style=\"padding: 20px; width: 100%; column-span: all; \">\r\n                            <button type=\"button\"   (click)=\"close('cik-dialog');\">Close</button>&nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <button type=\"button\"   (click)=\"confirm('cik-dialog');\">Confirm</button>&nbsp;&nbsp;\r\n                        </td>\r\n                      </tr>\r\n                  </table>\r\n\r\n                </jw-modal>\r\n\r\n                <button type=\"button\" pButton (click)=\"resetCoverageSelected()\" icon=\"pi pi-times\"\r\n                    Class=\"ui-button-danger\" pTooltip=\"Reset Term Rule Processing\"></button>&nbsp;\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group row\">\r\n            <p-radioButton name=\"termN\" class=\"column1\" value=\"divisionRadio\"\r\n                label=\"Search by Group: Division -> Sector:\" [(ngModel)]=\"processRadio\">\r\n            </p-radioButton>\r\n            <div class=\"col-xs-7\">\r\n                <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\"\r\n                    [(ngModel)]=\"selectedTermDivSector\" [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                    (onChange)=\"selectedTermDivSectorChange(selectedTermDivSector)\" [virtualScroll]=\"true\"\r\n                    [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{selectedTermDivisionCount}}\r\n                <button pButton type=\"button\" [disabled]=\"(selectedTerms.length < 1 || termAutoCompleteDisable)\" label=\"Show Resolved\"\r\n                    class=\"ui-button-success\" (click)=\"selectedTermShowResolved()\"></button>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"form-group row\">\r\n            <label for=\"industry\" class=\"column1 form-control-label\">Industry:</label>\r\n            <div class=\"col-xs-5\">\r\n                <p-dropdown [options]=\"filteredindustry\" placeholder=\"Select Industry\"\r\n                    [(ngModel)]=\"selectedTermIndustry\" [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                    (onChange)=\"selectedTermProcessIndustryChange(selectedTermIndustry)\" [virtualScroll]=\"true\"\r\n                    [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{selectedTermSectorCount}}\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n\r\n            <label for=\"filerCategory\" class=\"column1 form-control-label\">Filer\r\n                Category:</label>\r\n            <div class=\"col-xs-5\">\r\n                <p-dropdown [options]=\"filteredfilerCategory\" placeholder=\"Select Filer Category\"\r\n                    [(ngModel)]=\"selectedTermFilerCategory\" [style]=\"{'width':'400px'}\"\r\n                    dropdownIcon=\"pi pi-chevron-down\"\r\n                    (onChange)=\"selectedTermProcessfilCatChange(selectedTermFilerCategory)\" [virtualScroll]=\"true\"\r\n                    [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{selectedTermCategoryCount}}\r\n            </div>\r\n        </div>\r\n\r\n        <!--\r\n        <div class=\"form-group row\">\r\n            <p-radioButton class=\"column1\" name=\"termN\" label=\"Process Accuracy Test Terms:\" value=\"accuRadio\"\r\n                [(ngModel)]=\"processRadio\" inputId=\"termN\"></p-radioButton>\r\n            <div class=\"col-xs-8\">\r\n                <button *ngIf=\"processRadio === 'accuRadio'\" icon=\"pi pi-replay\" label=\"Process Accuracy Test Terms\"\r\n                    style=\"margin:3px \" type=\"button\" pButton (click)=\"processAccuTerm()\"></button>\r\n            </div>\r\n        </div>\r\n        -->\r\n\r\n\r\n\r\n        <p-table #entityTable [columns]=\"homeEntityCol\" *ngIf=\"entityList && (entityList.length > 0)\"\r\n            [value]=\"entityList\" [responsive]=\"true\" selectionMode=\"single\" [(selection)]=\"selectedEntity\"\r\n            [paginator]=\"true\" [rows]=\"10\">\r\n            <ng-template pTemplate=\"header\" let-columns>\r\n                <tr>\r\n                    <th style=\"width:4em;\">\r\n                        <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n                    </th>\r\n                    <th *ngFor=\"let col of columns\">\r\n                        {{col.header}}\r\n                    </th>\r\n                </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                <tr style=\"height:34px\">\r\n                    <td>\r\n                        <p-tableCheckbox [value]=\"rowData\"></p-tableCheckbox>\r\n                    </td>\r\n                    <td *ngFor=\"let col of columns\">\r\n                        {{rowData[col.field]}}\r\n\r\n                    </td>\r\n                </tr>\r\n            </ng-template>\r\n        </p-table>\r\n\r\n        <div style=\"margin: auto; width: 40%; padding: 10px;\">\r\n            <button *ngIf=\"selectedTerms.length > 0\" icon=\"pi pi-replay\"\r\n                label=\"Process Selected Terms\" style=\"margin:3px \" type=\"button\" pButton\r\n                (click)=\"processSelectedTerm()\"></button>\r\n            <button pButton type=\"button\" label=\"Cancel Processing\" class=\"ui-button-rounded ui-button-danger\"\r\n                (click)=\"cancelProcessing()\"></button>\r\n        </div>\r\n\r\n    </p-tabPanel>\r\n\r\n</p-tabView>\r\n\r\n<div>\r\n    <div style=\"margin-bottom: 15px !important;\">\r\n        <button pButton type=\"button\" label=\"Refresh Status\" icon=\"pi pi-refresh\" style=\"margin-bottom: 5px;\"\r\n            class=\"ui-button-rounded ui-button-success pull-left\" (click)=\"refreshLoadStatus()\"></button>\r\n        &nbsp;&nbsp;\r\n\r\n        <!-- <button pButton type=\"button\" label=\"Cancel Processing\" icon=\"pi pi-times\" tyle=\"margin-bottom: 5px;\"\r\n                class=\"ui-button-rounded ui-button-danger pull-left\" (click)=\"cancelProcessing\"></button> -->\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n<div style=\"padding: 10px;\">\r\n    <p-table #statusTable [columns]=\"statusCols\" [value]=\"statusNames\" [responsive]=\" true\"\r\n        [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\" columnResizeMode=\"expand\"\r\n        [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" p-dataTable\r\n        exportFilename=\"statusData\" paginatorPosition=\"top\" [paginator]=\"true\" [rows]=\"10\"\r\n        paginatorTemplate=\"{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {Exporters}\"\r\n        [showCurrentPageReport]=\"true\" (onPage)=\"pagenation($event)\"\r\n        currentPageReportTemplate=\"Showing {{first}} of{{total}}\">\r\n\r\n        <!--<ng-template pTemplate=\"caption\" style=\"height: 50px !important;\">\r\n                Total number of Records: {{statusTable.totalRecords}}\r\n                currentPageReportTemplate=\"{first} to {last} of {totalRecords}\"\r\n                <p-paginator [rows]=\"10\" totalRecords=\"100\" paginatorPosition=\"top\" (onPageChange)=\"paginate($event)\"\r\n                    [showCurrentPageReport]=\"true\" currentPageReportTemplate=\"{first} to {last} of {totalRecords}\">\r\n                </p-paginator>\r\n\r\n            </ng-template>-->\r\n\r\n        <ng-template pTemplate=\"header\" let-columns>\r\n            <tr>\r\n                <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn [pSortableColumn]=\"col.field\">\r\n                    <div pTooltip=\"Click to sort {{col.header}}\">\r\n                        {{col.header}}\r\n                        <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                            ariaLabelDesc=\"Activate to sort in descending order\"\r\n                            ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n            <tr>\r\n                <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                    <div *ngIf=\"col.field !== ''\">\r\n                        <input *ngSwitchCase=\"col.field\" pInputText type=\"text\" placeholder=\"Search\"\r\n                            [value]=\"statusTable.filters[col.field] ? statusTable.filters[col.field].value : ''\"\r\n                            (input)=\"statusTable.filter($event.target.value, col.field, col.filterMatchMode);\r\n                                onRowUnClick();onFilter($event.target.value, col.field, col.filterMatchMode)\"\r\n                            style=\"width: 150px\">\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-index=\"rowIndex\">\r\n            <tr [pSelectableRow]=\"rowData\">\r\n\r\n                <td *ngFor=\"let col of columns\" style=\"word-break:break-all\">\r\n                    <span *ngIf=\"col.header !=='Last Modified'\" pTooltip=\"{{rowData[col.field] }}\">\r\n                        {{rowData[col.field]}}</span>\r\n                    <span *ngIf=\"col.header =='Last Modified'\" pTooltip=\"{{rowData[col.field] | date :'h:mm:ss a'}}\">\r\n                        {{rowData[col.field] | date :'MM/dd/yyyy HH:mm:ss'}} </span>\r\n\r\n                </td>\r\n            </tr>\r\n        </ng-template>\r\n\r\n    </p-table>\r\n</div>\r\n\r\n<p-dialog header=\"Reset And Restart Term Processing\" [(visible)]=\"resetProcessingPopup\" [modal]=\"true\"\r\n    [style]=\"{width: '50vw'}\" [baseZIndex]=\"10000\" position=\"top\" [contentStyle]=\"{'max-height':'70vh'}\"\r\n    [draggable]=\"true\" [resizable]=\"true\" [focusOnShow]=\"true\">\r\n    <div style=\"padding: 10px;\">\r\n\r\n        <div class=\"row p-y-5\">\r\n            <label>\r\n                Reset Processing will change current Term Rule Inprogress to NotProcessed Status.\r\n            </label>\r\n        </div>\r\n        <div class=\"row p-y-5\">\r\n            <label>\r\n                Reset Processing will restart only Term Rules that are currently in Inprogress Status.\r\n            </label>\r\n        </div>\r\n    </div>\r\n\r\n    <p-footer>\r\n        <button type=\"button\" pButton icon=\"pi pi-check\" (click)=\"resetProcessingPopup=false; resetProcessing()\"\r\n            label=\"Reset Term Processing\"></button>\r\n        <button type=\"button\" pButton icon=\"pi pi-times\" (click)=\"resetProcessingPopup=false\" label=\"Cancel\"\r\n            class=\"ui-button-secondary\"></button>\r\n    </p-footer>\r\n</p-dialog>\r\n"

/***/ }),

/***/ "./src/app/processingTerms/processingTermsComponent.ts":
/*!*************************************************************!*\
  !*** ./src/app/processingTerms/processingTermsComponent.ts ***!
  \*************************************************************/
/*! exports provided: ProcessingTermsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProcessingTermsComponent", function() { return ProcessingTermsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _processingTermsService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./processingTermsService */ "./src/app/processingTerms/processingTermsService.ts");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _status_statusService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../status/statusService */ "./src/app/status/statusService.ts");
/* harmony import */ var _domain_status__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../domain/status */ "./src/app/domain/status.ts");
/* harmony import */ var app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/domain/mappedEntity */ "./src/app/domain/mappedEntity.ts");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var app_dialogmodal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! app/_dialogmodal */ "./src/app/_dialogmodal/index.ts");












var ProcessingTermsComponent = /** @class */ (function () {
    function ProcessingTermsComponent(processingTermsService, router, utilService, confirmationService, statusService, status, profileService, dialogModalService) {
        this.processingTermsService = processingTermsService;
        this.router = router;
        this.utilService = utilService;
        this.confirmationService = confirmationService;
        this.statusService = statusService;
        this.status = status;
        this.profileService = profileService;
        this.dialogModalService = dialogModalService;
        this.subscription = [];
        this.filerCategory = null;
        this.errorMsg = '';
        this.completeEntities = [];
        this.msgs = [];
        this.terms = [];
        this.filteredTerms = [];
        this.selectedTerms = [];
        this.statusNumber = 0;
        this.first = 0;
        this.total = 0;
        this.row = 10;
        this.selectedTermsCompanies = [];
        this.selectedTermsfilteredCompany = [];
        this.homeEntityCol = [
            { field: 'cik', header: 'Cik' },
            { field: 'companyName', header: 'Company Name' }
        ];
        this.entityList = [];
        this.gotoPeerEntities = [];
        this.termAutoCompleteDisable = false;
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
    }
    ;
    ProcessingTermsComponent.prototype.ngOnInit = function () {
        var _this = this;
        console.log('ProcessingTermsComponent : calling ngOnInit...');
        this.utilService.getUserRolesList().subscribe(function (response) {
            _this.isAdmin = response.includes('admin');
        });
        this.utilService.getCompanyList().subscribe(function (response) { _this.companyList = response; });
        this.utilService.getDivSectorList().subscribe(function (response) {
            _this.divSectorList = response;
            _this.filtereddivSector = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filtereddivSector.push(name);
            });
        });
        this.utilService.getIndustryList().subscribe(function (response) { _this.industryList = response; });
        this.utilService.getFilerCategoryList().subscribe(function (response) {
            _this.filerCategoryList = response;
            _this.filteredfilerCategory = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filteredfilerCategory.push(name);
            });
        });
        this.utilService.getCompleteCompanyList().subscribe(function (response) { _this.completeCompanyList = response; });
        this.filterRadio = 'company';
        this.processRadio = 'termRadio';
        this.statusCols = this.status.statusCols();
        this.interval = setInterval(function () {
            _this.loadProcessStatus();
        }, 10000);
        this.loadProcessStatus();
        this.utilService.getTermRuleList().subscribe(function (response) {
            _this.terms = response;
            // this.actualTerms = response
            _this.terms = _this.terms.sort(function (a, b) {
                if (a.termId < b.termId) {
                    return -1;
                }
                if (a.termId > b.termId) {
                    return 1;
                }
                return 0;
            });
        });
    };
    ProcessingTermsComponent.prototype.ngAfterContentInit = function () {
        this.loadFromStorage();
    };
    ProcessingTermsComponent.prototype.loadFromStorage = function () {
        if (sessionStorage.getItem('processTerm.companyName') !== null && sessionStorage.getItem('processTerm.companyName') !== "undefined") {
            this.companyName = JSON.parse(sessionStorage.getItem('processTerm.companyName'));
        }
        if (sessionStorage.getItem('processTerm.selectedTermsCompanies') !== null && sessionStorage.getItem('processTerm.selectedTermsCompanies') !== "undefined") {
            this.selectedTermsCompanies = JSON.parse(sessionStorage.getItem('processTerm.selectedTermsCompanies'));
        }
        if (sessionStorage.getItem('processTerm.selectedTerms') !== null && sessionStorage.getItem('processTerm.selectedTerms') !== "undefined") {
            this.selectedTerms = JSON.parse(sessionStorage.getItem('processTerm.selectedTerms'));
        }
    };
    ProcessingTermsComponent.prototype.getUserRole = function () {
        var _this = this;
        this.utilService.getUserRolesList().subscribe(function (response) {
            _this.isAdmin = response.includes('admin');
        }, function (error) { return console.log(error); });
    };
    ProcessingTermsComponent.prototype.refreshLoadStatus = function () {
        this.loadProcessStatus();
    };
    ProcessingTermsComponent.prototype.loadProcessStatus = function () {
        var _this = this;
        this.statusService.loadProcessStatus().subscribe(function (response) {
            _this.statusNames = [];
            response.content.forEach(function (status) {
                _this.statusNames.push({
                    termId: status.termId, userName: status.userName, logStatus: status.logStatus, noOfEntitiesBeingProcessed: status.noOfEntitiesBeingProcessed,
                    lastModified: status.lastModified, processingTimeInSec: status.processingTimeInSec, description: status.description
                });
            });
            console.log(response);
            _this.first = 10;
            _this.row = (_this.statusNames.length - _this.first);
            _this.total = _this.statusNames.length;
        });
    };
    ProcessingTermsComponent.prototype.pagenation = function (value) {
        console.log(value);
        var initialCount = value.rows;
        value.first = (value.first + initialCount);
        this.first = value.first;
        this.row = (this.statusNames.length - value.first);
        this.total = this.statusNames.length;
    };
    ProcessingTermsComponent.prototype.searchCompany = function (event) {
        this.filteredCompany = [];
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i];
            if ((cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) || (cname != null && cname.toLowerCase().includes(event.query.toLowerCase()))) {
                this.filteredCompany.push(cname);
            }
        }
    };
    ProcessingTermsComponent.prototype.selectedTermsSearchCompany = function (event) {
        this.selectedTermsfilteredCompany = [];
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i];
            if (cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.selectedTermsfilteredCompany.push(cname);
            }
        }
    };
    ProcessingTermsComponent.prototype.addOrRemoveEntities = function () {
        var name = "";
        this.selectedTermsCompanyName = "";
        this.selectedTermsCompanies.forEach(function (entity) {
            if (name != null || name != "") {
                name = name + "," + entity;
            }
            else {
                name = entity;
            }
        });
        this.selectedTermsCompanyName = name.substr(1, name.length);
        this.processRadio = 'companyRadio';
        sessionStorage.setItem('processTerm.selectedTermsCompanies', JSON.stringify(this.selectedTermsCompanies));
    };
    ProcessingTermsComponent.prototype.selectedTermDivSectorChange = function (event) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        var division = event.substr(0, event.indexOf('->') - 1);
        var sector = event.substr(event.indexOf('->') + 3, event.length);
        this.selectedTermFilerCategory = undefined;
        this.selectedTermIndustry = undefined;
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        this.filteredindustry = [];
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredindustry.push(name);
        });
        this.selectedTermDivisionCount = this.completeEntities.length;
        this.selectedTermSectorCount = this.completeEntities.length;
        this.selectedTermCategoryCount = this.completeEntities.length;
    };
    ProcessingTermsComponent.prototype.selectedTermProcessIndustryChange = function (event) {
        if (event != null) {
            this.selectedTermFilerCategory = undefined;
            event = event.substring(0, 4);
            var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === event; });
            this.selectedTermSectorCount = completeEntities.length;
            this.selectedTermCategoryCount = completeEntities.length;
        }
        else {
            this.selectedTermSectorCount = this.divisionCount;
            this.selectedTermCategoryCount = this.divisionCount;
        }
    };
    ProcessingTermsComponent.prototype.selectedTermProcessfilCatChange = function (event) {
        var _this = this;
        if (event != null) {
            var completeEntities = this.completeEntities.filter(function (obj) {
                return obj.filerCategory === event && obj.sic === _this.selectedTermIndustry.substr(0, 4);
            });
            this.selectedTermCategoryCount = completeEntities.length;
            this.gotoPeerEntities = completeEntities;
        }
        else {
            this.selectedTermCategoryCount = this.divisionCount;
        }
    };
    ProcessingTermsComponent.prototype.selectedTermGoToPeer = function (event) {
        var _this = this;
        if (this.selectedTermsCompanies != undefined) {
            this.company = this.selectedTermsCompanies[0].split('(')[0];
            var peer = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.selectedTermDivision = peer[0].division;
            this.selectedTermSector = peer[0].sector;
            this.selectedTermDivSector = peer[0].division + ' -> ' + peer[0].sector;
            this.selectedTermDivSectorChange(this.selectedTermDivSector);
            this.selectedTermIndustry = peer[0].sic + '-' + peer[0].industry;
            this.selectedTermProcessIndustryChange(this.selectedTermIndustry);
            this.selectedTermFilerCategory = peer[0].filerCategory;
            this.selectedTermProcessfilCatChange(this.selectedTermFilerCategory);
            this.processRadio = 'divisionRadio';
        }
    };
    ProcessingTermsComponent.prototype.selectedTermShowResolved = function () {
        var _this = this;
        var mp = new app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_8__["MappedEntity"]();
        this.entityList = [];
        this.selectedEntity = undefined;
        this.selectedTerms.forEach(function (item) {
            mp.termRuleId = item;
            mp.entityId = "NULL";
            if (_this.processRadio === "companyRadio") {
                _this.selectedTermsCompanies.forEach(function (cmy) {
                    var selectionData = cmy; //this.selectedTermsCompanyName;
                    if (selectionData != undefined && selectionData.length > 15) {
                        selectionData = selectionData.substring((selectionData.indexOf("(") + 1), selectionData.indexOf(")"));
                        var entities = _this.completeCompanyList.filter(function (obj) { return obj.entityId === selectionData; });
                        var company = entities.length == 1 ? entities[0] : null;
                        if (!company) {
                            _this.errorMsg = 'Please select a company, division->Sector or Filer Category before running process.';
                            _this.showError = true;
                            window.scroll(0, 0);
                        }
                        else {
                            mp.entityId = company.entityId;
                        }
                    }
                    mp.division = _this.selectedTermDivision;
                    mp.sector = _this.selectedTermSector;
                    mp.filerCategory = _this.selectedTermFilerCategory;
                    mp.rankId = 0;
                    mp.minYear = (new Date()).getFullYear() - 4;
                    mp.maxYear = (new Date()).getFullYear();
                    mp.includeQuarterly = true;
                    if (_this.selectedTermIndustry) {
                        mp.sic = _this.selectedTermIndustry.substring(0, 4);
                    }
                    _this.profileService.showReslovedData(mp).subscribe(function (results) {
                        _this.entityList = _this.entityList.concat(results.filter(function (_a) {
                            var id = _a.id;
                            return !_this.entityList.find(function (f) { return f.id == id; });
                        })); //merge two array without duplicates
                        //this.entityList = this.entityList.concat(results);
                    });
                });
            }
            else { //non companyRadio
                mp.division = _this.selectedTermDivision;
                mp.sector = _this.selectedTermSector;
                mp.filerCategory = _this.selectedTermFilerCategory;
                mp.rankId = 0;
                mp.minYear = (new Date()).getFullYear() - 4;
                mp.maxYear = (new Date()).getFullYear();
                mp.includeQuarterly = true;
                if (_this.selectedTermIndustry) {
                    mp.sic = _this.selectedTermIndustry.substring(0, 4);
                }
                _this.profileService.showReslovedData(mp).subscribe(function (results) {
                    _this.entityList = _this.entityList.concat(results.filter(function (_a) {
                        var id = _a.id;
                        return !_this.entityList.find(function (f) { return f.id == id; });
                    })); //merge two array without duplicates
                    //this.entityList = this.entityList.concat(results);
                });
            }
        });
    };
    ProcessingTermsComponent.prototype.searchIndustry = function (event) {
        this.filteredindustry = [];
        for (var i = 0; i < this.industryList.length; i++) {
            var cname = this.industryList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredindustry.push(cname);
            }
        }
    };
    ProcessingTermsComponent.prototype.searchDivisionSector = function (event) {
        this.filtereddivSector = [];
        for (var i = 0; i < this.divSectorList.length; i++) {
            var cname = this.divSectorList[i];
            if (cname != null && cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filtereddivSector.push(cname);
            }
        }
    };
    ProcessingTermsComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
        if (this.interval) {
            clearInterval(this.interval);
        }
    };
    ProcessingTermsComponent.prototype.enableAccuracyTest = function (event) {
        if (event.target.checked) {
            this.checkAccuracyTest = true;
            if (this.processRadio === 'termRadio') {
                this.processRadio = 'companyRadio';
            }
            this.termAutoCompleteDisable = true; //diable term selection
            this.entityList = []; //remove the cik list display
        }
        else {
            this.checkAccuracyTest = false;
            this.termAutoCompleteDisable = false;
        }
    };
    ProcessingTermsComponent.prototype.termRadioChecked = function (event) {
        this.checkAccuracyTest = false;
        this.accuracyTestCheckbox.nativeElement.checked = false;
        this.termAutoCompleteDisable = false;
    };
    ProcessingTermsComponent.prototype.goToPeer = function (event) {
        var _this = this;
        this.errorMsg = '';
        this.showError = false;
        this.company = null;
        if (this.companyName != undefined && this.companyName.length > 15) {
            this.company = this.companyName.substr(0, this.companyName.length - 12);
            var peer = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.division = peer[0].division;
            this.sector = peer[0].sector;
            this.divSector = peer[0].division + ' -> ' + peer[0].sector;
            this.divSectorChange(this.divSector);
            this.industry = peer[0].sic + '-' + peer[0].industry;
            ;
            this.processIndustryChange(this.industry);
            this.filerCategory = peer[0].filerCategory;
            this.processfilCatChange(this.filerCategory);
            this.filterRadio = 'group';
        }
        else {
            window.scroll(0, 0);
            this.errorMsg = 'Please Select Company';
            this.showError = true;
        }
    };
    ProcessingTermsComponent.prototype.divSectorChange = function (event) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        event = event.value ? event.value : event;
        var division = event.substr(0, event.indexOf('->') - 1);
        var sector = event.substr(event.indexOf('->') + 3, event.length);
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        this.filteredindustry = [];
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredindustry.push(name);
        });
        this.divisionCount = this.completeEntities.length;
        this.industryCount = this.completeEntities.length;
        this.categoryCount = this.completeEntities.length;
        ;
    };
    ProcessingTermsComponent.prototype.processIndustryChange = function (event) {
        event = event.value ? event.value : event;
        event = event.substring(0, 4);
        var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === event; });
        this.industryCount = completeEntities.length;
        this.industryCount = completeEntities.length;
    };
    ProcessingTermsComponent.prototype.processfilCatChange = function (event) {
        var _this = this;
        event = event.value ? event.value : event;
        var completeEntities = this.completeEntities.filter(function (obj) {
            return obj.filerCategory === event && obj.sic === _this.industry.substr(0, 4);
        });
        this.industryCount = completeEntities.length;
        this.categoryCount = completeEntities.length;
    };
    ProcessingTermsComponent.prototype.ProcessAllRulesWithCriteria = function () {
        var _this = this;
        this.showError = false;
        this.confirmationService.confirm({
            message: 'Are you sure you want to process all terms based on selection?',
            header: 'Process Term',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                var inputData = _this.getInputdata();
                if (!inputData.isValid) {
                    _this.showError = true;
                    window.scroll(0, 0);
                    _this.errorMsg = 'Please select a company,  division->Sector or Filer Category before processing all terms.';
                    return;
                }
                inputData.isnewAction = true;
                _this.progressSpinner = true;
                _this.msgs = [{ severity: 'info', summary: 'Processing Term Rule', detail: '' }];
                _this.utilService.processAllTermWithCriteria(inputData.division, inputData.sector, inputData.sic, inputData.filerCategory, inputData.entityId, inputData.isnewAction).subscribe(function (response) {
                    if (response) {
                        var res = response._body;
                        if (res.includes('"status":true')) {
                            _this.msgs = [{ severity: 'info', summary: 'Processed Term Rule' }];
                            _this.progressSpinner = false;
                        }
                        if (res.includes('"status":false')) {
                            // this.msgs = [{severity:'info', summary:'Processed Term Rule'}];
                            // this.progressSpinner = false
                        }
                        else {
                            _this.msgs = [{ severity: 'info', summary: res, detail: '' }];
                            _this.progressSpinner = false;
                        }
                    }
                });
            },
            reject: function () {
            }
        });
        this.progressSpinner = false;
        this.loadProcessStatus();
    };
    ProcessingTermsComponent.prototype.continueProcessingAllTerms = function () {
        var _this = this;
        this.showError = false;
        this.confirmationService.confirm({
            message: 'Are you sure you want to reprocess all terms based on selection?',
            header: 'Process Term',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                var inputData = _this.getInputdata();
                inputData.isnewAction = false;
                _this.progressSpinner = true;
                _this.msgs = [{ severity: 'info', summary: 'Processing Term Rule', detail: '' }];
                _this.utilService.processAllTermWithCriteria(inputData.division, inputData.sector, inputData.sic, inputData.filerCategory, inputData.entityId, inputData.isnewAction).subscribe(function (response) {
                    var data = response._body;
                    if (data) {
                        _this.msgs = [{ severity: 'info', summary: data, detail: '' }];
                        _this.progressSpinner = false;
                    }
                });
            },
            reject: function () {
            }
        });
    };
    ProcessingTermsComponent.prototype.resetCoverage = function () {
        this.companyName = undefined;
        this.divSector = undefined;
        this.filterRadio = undefined;
        this.division = undefined;
        this.sector = undefined;
        this.industry = undefined;
        this.divisionCount = this.completeCompanyList.length;
        this.industryCount = null;
        this.categoryCount = null;
        this.filerCategory = undefined;
        this.filterRadio = undefined;
        this.errorMsg = '';
        this.showError = false;
        this.msgs = [];
        sessionStorage.setItem("processTerm.companyName", this.companyName);
    };
    ProcessingTermsComponent.prototype.resetCoverageSelected = function () {
        this.processRadio = 'termRadio';
        this.selectedTermsCompanies = [];
        this.selectedTermDivSector = undefined;
        this.selectedTermIndustry = undefined;
        this.selectedTermFilerCategory = undefined;
        this.selectedTermCategoryCount = null;
        this.selectedTermDivisionCount = this.completeCompanyList.length;
        ;
        this.selectedTermSectorCount = null;
        this.selectedEntity = undefined;
        this.entityList = [];
        this.msgs = [];
        sessionStorage.setItem("processTerm.selectedTermsCompanies", JSON.stringify(this.selectedTermsCompanies));
    };
    ProcessingTermsComponent.prototype.cancelProcessing = function () {
        var _this = this;
        this.showError = false;
        this.confirmationService.confirm({
            message: 'Are you sure you want to cancel all pending processing items?',
            header: 'Process Term',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.msgs = [];
                var inputData = _this.getInputdata();
                inputData.isnewAction = false;
                _this.progressSpinner = true;
                _this.msgs = [{ severity: 'info', summary: 'Cancelling Process All Terms', detail: '' }];
                _this.utilService.cancelProcessing().subscribe(function (response) {
                    if (response) {
                        _this.msgs = [{ severity: 'info', summary: 'All pending processing has been canceled successfully', detail: '' }];
                        _this.progressSpinner = false;
                    }
                    _this.progressSpinner = false;
                });
            },
            reject: function () {
            }
        });
    };
    ProcessingTermsComponent.prototype.resetProcessing = function () {
        var _this = this;
        this.msgs = [];
        this.progressSpinner = true;
        this.msgs = [{ severity: 'info', summary: ' All Term Processing has been reset. Pending and Inprogress TermRules have been restarted again. Please wait for it to be completed', detail: '' }];
        this.utilService.resetProcessing().subscribe(function (response) {
            if (response) {
                _this.msgs = [{ severity: 'info', summary: 'All Term Processing has been reset and completed.', detail: '' }];
            }
        });
        this.resetProcessingPopup = false;
        this.progressSpinner = false;
    };
    ProcessingTermsComponent.prototype.getInputdata = function () {
        var result = {};
        result.sic = "NULL";
        result.filerCategory = "NULL";
        result.division = "NULL";
        result.sector = "NULL";
        result.entityId = "NULL";
        result.isValid = false;
        result.useGroup = true;
        if (this.filterRadio === "all") {
            result.isValid = true;
            return result;
        }
        if ((this.filterRadio === "group")) {
            if ((this.companyName && this.divSector) || (this.filerCategory)) {
                result.isValid = true;
            }
            if (this.companyName) {
                var selectionData = this.companyName;
                if (selectionData.length > 15) {
                    selectionData = selectionData.substr(0, selectionData.length - 12);
                }
                var entities = this.completeCompanyList.filter(function (obj) { return obj.companyName === selectionData; });
                var company = entities.length == 1 ? entities[0] : null;
                result.sic = company.sic;
            }
            if (this.filerCategory) {
                result.filerCategory = this.filerCategory;
            }
            if (this.divSector) {
                var division = this.divSector.substr(0, this.divSector.indexOf('->') - 1);
                var sector = this.divSector.substr(this.divSector.indexOf('->') + 3, this.divSector.length);
                result.division = division;
                result.sector = sector;
            }
        }
        else {
            result.useGroup = false;
            if (this.companyName) {
                result.division = "settoinvalid";
                result.sector = "settoinvalid";
                var selectionData = this.companyName;
                if (selectionData.length > 15) {
                    selectionData = selectionData.substr(0, selectionData.length - 12);
                }
                var entities = this.completeCompanyList.filter(function (obj) { return obj.companyName === selectionData; });
                var company = entities.length == 1 ? entities[0] : null;
                if (company) {
                    result.selectedCompany = company;
                    result.isValid = true;
                    result.entityId = company.entityId;
                }
            }
        }
        return result;
    };
    ProcessingTermsComponent.prototype.filterTerm = function (event) {
        var _this = this;
        if (event.query != null && event.query != '') {
            // this.terms = this.terms.sort((a, b) => {
            //   if (a.financialStatement < b.financialStatement) { return -1; }
            //   if (a.financialStatement > b.financialStatement) { return 1; }
            //   return 0;
            // });
            this.filteredTerms = [];
            this.terms.forEach(function (cname) {
                if ((cname != null && cname.termId.toLowerCase().includes(event.query.toLowerCase())) || (cname != null && cname.name.toLowerCase().includes(event.query.toLowerCase()))) {
                    _this.filteredTerms.push(cname.termId + ' - ' + cname.name);
                }
            });
            this.filteredTerms = this.filteredTerms.sort(function (a, b) {
                if (a.toLowerCase().indexOf(event.query.toLowerCase()) < b.toLowerCase().indexOf(event.query.toLowerCase())) {
                    return -1;
                }
                if (a.toLowerCase().indexOf(event.query.toLowerCase()) > b.toLowerCase().indexOf(event.query.toLowerCase())) {
                    return 1;
                }
                return 0;
            });
        }
        else {
            this.filteredTerms = [];
            this.terms.forEach(function (obj) {
                _this.filteredTerms.push(obj.termId + ' - ' + obj.name);
            });
        }
    };
    ProcessingTermsComponent.prototype.onSelectCompany = function (event) {
        if (this.companyName) {
            sessionStorage.setItem('processTerm.companyName', JSON.stringify(this.companyName));
        }
    };
    ProcessingTermsComponent.prototype.onSelectTerm = function (event) {
        if (this.selectedTerms && this.selectedTerms.length > 0) {
            var modifiedSelectedTerms_1 = [];
            this.selectedTerms.forEach(function (item) {
                modifiedSelectedTerms_1.push(item.split(' - ')[0]);
            });
            this.selectedTerms = modifiedSelectedTerms_1;
            sessionStorage.setItem('processTerm.selectedTerms', JSON.stringify(this.selectedTerms));
        }
    };
    ProcessingTermsComponent.prototype.processSelectedTerm = function () {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure you want to process all terms based on selection?',
            header: 'Process Term',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.msgs = [];
                _this.progressSpinner = true;
                if ((_this.selectedTerms.length > 0) && (_this.selectedTermsCompanies.length === 0)) {
                    _this.utilService.processSelctedTerms(_this.selectedTerms).subscribe(function (response) {
                        var res = response._body;
                        if (res) {
                            _this.msgs = [{ severity: 'info', summary: res, detail: '' }];
                            _this.progressSpinner = false;
                        }
                        _this.progressSpinner = false;
                    });
                }
                if ((_this.selectedTerms.length > 0) && _this.selectedTermsCompanies && (_this.selectedTermsCompanies.length > 0)) {
                    var terms = _this.selectedTerms;
                    var entities_1 = [];
                    _this.selectedTermsCompanies.forEach(function (item) {
                        entities_1.push(item.substring((item.indexOf("(") + 1), item.indexOf(")")));
                    });
                    if (_this.selectedEntity && (_this.selectedEntity.length > 0)) {
                        _this.selectedEntity.forEach(function (item) {
                            if (entities_1.indexOf(item.cik) < 0) { //do not add if already exist
                                entities_1.push(item.cik);
                            }
                        });
                    }
                    _this.utilService.processSelctedTermsWithCompany(terms, entities_1).subscribe(function (response) {
                        var res = response._body;
                        if (res) {
                            _this.msgs = [{ severity: 'info', summary: res, detail: '' }];
                            _this.progressSpinner = false;
                        }
                        _this.progressSpinner = false;
                    });
                }
            },
            reject: function () {
            }
        });
    };
    ProcessingTermsComponent.prototype.processAccuTerm = function () {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure you want to process Accuracy Test Term Processing?',
            header: 'Process Term',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.msgs = [];
                _this.progressSpinner = true;
                //process user input entities on available terms
                if (_this.processRadio === 'companyRadio' && _this.selectedTermsCompanies && (_this.selectedTermsCompanies.length > 0)) {
                    var entities_2 = [];
                    //add user input entities from company name input field
                    _this.selectedTermsCompanies.forEach(function (item) {
                        entities_2.push(item.substring((item.indexOf("(") + 1), item.indexOf(")")));
                    });
                    //add selected entities from show resolved list
                    if (_this.selectedEntity && (_this.selectedEntity.length > 0)) {
                        _this.selectedEntity.forEach(function (item) {
                            if (entities_2.indexOf(item.cik) < 0) { //do not add if already exist
                                entities_2.push(item.cik);
                            }
                        });
                    }
                    _this.utilService.processAccuTermsForTermsAndEntities(_this.selectedTerms, entities_2).subscribe(function (response) {
                        var res = response._body;
                        if (res) {
                            _this.msgs = [{ severity: 'info', summary: res, detail: '' }];
                            _this.progressSpinner = false;
                        }
                        _this.progressSpinner = false;
                    });
                }
                //process gotopeer entities on available terms
                else if (_this.processRadio === 'divisionRadio' && _this.gotoPeerEntities && _this.gotoPeerEntities.length > 0) {
                    var entities_3 = [];
                    _this.gotoPeerEntities.forEach(function (item) {
                        entities_3.push(item.cik);
                    });
                    _this.utilService.processAccuTermsForTermsAndEntities(_this.selectedTerms, entities_3).subscribe(function (response) {
                        var res = response._body;
                        if (res) {
                            _this.msgs = [{ severity: 'info', summary: res, detail: '' }];
                            _this.progressSpinner = false;
                        }
                        _this.progressSpinner = false;
                    });
                }
                //process all entities on available terms
                else {
                    _this.utilService.processAccuTerms(_this.selectedTerms).subscribe(function (response) {
                        var res = response._body;
                        if (res) {
                            _this.msgs = [{ severity: 'info', summary: res, detail: '' }];
                            _this.progressSpinner = false;
                        }
                        _this.progressSpinner = false;
                    });
                }
            },
            reject: function () {
            }
        });
    };
    ProcessingTermsComponent.prototype.handleCIKListSearch = function (id) {
        this.ciksFromDialog = "";
        this.selectedTermsCompanies = [];
        this.dialogModalService.open(id);
        this.myInputVariable.nativeElement.value = ''; //clear the upload file name on the side of the upload button
    };
    ProcessingTermsComponent.prototype.close = function (id) {
        this.dialogModalService.close(id);
        this.myInputVariable.nativeElement.value = ''; //clear the upload file name on the side of the upload button
    };
    ProcessingTermsComponent.prototype.confirm = function (id) {
        var selected = [];
        selected = this.ciksFromDialog.split(',');
        this.selectedTermsCompanies = [];
        for (var j = 0; j < selected.length; j++) {
            var cik = selected[j];
            if (cik != null && cik.trim().length > 1) {
                cik = '0000000000' + cik.trim();
                cik = cik.substring(cik.length - 10);
                for (var i = 0; i < this.companyList.length; i++) {
                    var cname = this.companyList[i];
                    if (cname.toLowerCase().indexOf(cik) >= 0) {
                        this.selectedTermsCompanies.push(cname);
                    }
                }
            }
        }
        var uniqueSelected = new Set(this.selectedTermsCompanies);
        this.selectedTermsCompanies = Array.from(uniqueSelected); //make an unique array
        this.selectedTermsCompanies.slice(0, 99); //limit input cik list to size of 100
        this.processRadio = 'companyRadio';
        this.ciksFromDialog = '';
        this.dialogModalService.close(id);
        this.myInputVariable.nativeElement.value = ''; //clear the upload file name on the side of the upload button
    };
    ProcessingTermsComponent.prototype.uploadFile = function (event) {
        var _this = this;
        var file = event.target.files[0];
        if (file) {
            var reader_1 = new FileReader();
            reader_1.onload = function (e) {
                var text = reader_1.result.toString().trim();
                text = text.replace(/\r?\n|\r/g, "");
                _this.ciksFromDialog = text;
            };
            reader_1.readAsText(file);
            //   this.fs.readFile('file.txt', function (err, data) {
            //     if (err) {
            //         return console.error(err);
            //     }
            //     console.log("Asynchronous read: " + data.toString());
            // });
        }
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('inputFile'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], ProcessingTermsComponent.prototype, "myInputVariable", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('accuracyTestCheckbox'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], ProcessingTermsComponent.prototype, "accuracyTestCheckbox", void 0);
    ProcessingTermsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ProcessingTerms-page',
            template: __webpack_require__(/*! ./processingTerms.html */ "./src/app/processingTerms/processingTerms.html"),
            styles: [__webpack_require__(/*! ../app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_processingTermsService__WEBPACK_IMPORTED_MODULE_3__["ProcessingTermsService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _utils_utilService__WEBPACK_IMPORTED_MODULE_4__["UtilService"], primeng_api__WEBPACK_IMPORTED_MODULE_5__["ConfirmationService"],
            _status_statusService__WEBPACK_IMPORTED_MODULE_6__["StatusService"], _domain_status__WEBPACK_IMPORTED_MODULE_7__["Status"], app_services_profile_service__WEBPACK_IMPORTED_MODULE_9__["ProfileService"], app_dialogmodal__WEBPACK_IMPORTED_MODULE_10__["DialogModalService"]])
    ], ProcessingTermsComponent);
    return ProcessingTermsComponent;
}());



/***/ }),

/***/ "./src/app/processingTerms/processingTermsService.ts":
/*!***********************************************************!*\
  !*** ./src/app/processingTerms/processingTermsService.ts ***!
  \***********************************************************/
/*! exports provided: ProcessingTermsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProcessingTermsService", function() { return ProcessingTermsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");



var ProcessingTermsService = /** @class */ (function () {
    function ProcessingTermsService() {
    }
    ProcessingTermsService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
    ], ProcessingTermsService);
    return ProcessingTermsService;
}());



/***/ }),

/***/ "./src/app/profile/create-profile/create-profile.component.css":
/*!*********************************************************************!*\
  !*** ./src/app/profile/create-profile/create-profile.component.css ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".modal-dialog{\r\n    position: fixed;\r\n    width: 100%;\r\n    margin: 0%;\r\n    padding-top: 10%;\r\n    padding-left: 25%;\r\n    padding-right: 25%;\r\n}\r\n.col-lg-4\r\n{\r\n    position: relative;\r\n}\r\n.form-control { width: 300px; }\r\n.mydialog {\r\n    width: 50vw;\r\n}\r\n@media screen and (max-width: 40em) {\r\n    .mydialog {\r\n        width: 75vw;\r\n    }\r\n}\r\n.modal-div{\r\n    padding: 20px !important;\r\n    margin: 20px !important;\r\n}\r\n.column1 {\r\n    float: left;\r\n    width: 30%;\r\n    text-align: right;\r\n    padding: 10px\r\n}\r\n.column2 {\r\n  float: right;\r\n  width: 70%;\r\n  text-align: left;\r\n  padding: 10px\r\n}\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvZmlsZS9jcmVhdGUtcHJvZmlsZS9jcmVhdGUtcHJvZmlsZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZUFBZTtJQUNmLFdBQVc7SUFDWCxVQUFVO0lBQ1YsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7QUFDQTs7SUFFSSxrQkFBa0I7QUFDdEI7QUFDQSxnQkFBZ0IsWUFBWSxFQUFFO0FBRTlCO0lBQ0ksV0FBVztBQUNmO0FBRUE7SUFDSTtRQUNJLFdBQVc7SUFDZjtBQUNKO0FBQ0E7SUFDSSx3QkFBd0I7SUFDeEIsdUJBQXVCO0FBQzNCO0FBRUE7SUFDSSxXQUFXO0lBQ1gsVUFBVTtJQUNWLGlCQUFpQjtJQUNqQjtBQUNKO0FBQ0E7RUFDRSxZQUFZO0VBQ1osVUFBVTtFQUNWLGdCQUFnQjtFQUNoQjtBQUNGIiwiZmlsZSI6InNyYy9hcHAvcHJvZmlsZS9jcmVhdGUtcHJvZmlsZS9jcmVhdGUtcHJvZmlsZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1vZGFsLWRpYWxvZ3tcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luOiAwJTtcclxuICAgIHBhZGRpbmctdG9wOiAxMCU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDI1JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDI1JTtcclxufVxyXG4uY29sLWxnLTRcclxue1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcbi5mb3JtLWNvbnRyb2wgeyB3aWR0aDogMzAwcHg7IH1cclxuXHJcbi5teWRpYWxvZyB7XHJcbiAgICB3aWR0aDogNTB2dztcclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDBlbSkge1xyXG4gICAgLm15ZGlhbG9nIHtcclxuICAgICAgICB3aWR0aDogNzV2dztcclxuICAgIH1cclxufVxyXG4ubW9kYWwtZGl2e1xyXG4gICAgcGFkZGluZzogMjBweCAhaW1wb3J0YW50O1xyXG4gICAgbWFyZ2luOiAyMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5jb2x1bW4xIHtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgd2lkdGg6IDMwJTtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgcGFkZGluZzogMTBweFxyXG59XHJcbi5jb2x1bW4yIHtcclxuICBmbG9hdDogcmlnaHQ7XHJcbiAgd2lkdGg6IDcwJTtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIHBhZGRpbmc6IDEwcHhcclxufVxyXG5cclxuIl19 */"

/***/ }),

/***/ "./src/app/profile/create-profile/create-profile.component.html":
/*!**********************************************************************!*\
  !*** ./src/app/profile/create-profile/create-profile.component.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <p-messages [style]=\"{color: 'black'}\" [value]=\"msgs\"></p-messages>\r\n</div>\r\n<form [formGroup]=\"preferenceForm\" *ngIf=\"preferenceForm\">\r\n    <div class=\"modal-div\">\r\n\r\n        <div class=\"form-group row\">\r\n            <label for=\"termName\" class=\"col-lg-3 form-control-label\" style=\"margin-right: 2%;\">Term Name</label>\r\n            <div class=\"col-xs-6\">\r\n                <p-autoComplete [style]=\"{'width':'400px !important'}\" [inputStyle]=\"{'width':'400px'}\" name=\"termName\"\r\n                    [suggestions]=\"filteredTerms\" (completeMethod)=\"filterTerm($event)\" placeholder=\"Search Terms\"\r\n                    formControlName=\"termName\" [(ngModel)]=\"profile.termName\" [dropdown]=\"true\"\r\n                    (ngModelChange)=\"onSelectTerm($event)\">\r\n                </p-autoComplete>\r\n                <div *ngIf=\"!profile.termName\" style=\"color: red; font-size: 12px;\">\r\n                    Please enter valid\r\n                    term name.</div>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <p-radioButton name=\"filterRadio\" formControlName=\"filterRadio\" value=\"companyRadio\"\r\n                [(ngModel)]=\"filterRadio\">\r\n            </p-radioButton>\r\n            <label for=\"compamyName\" class=\"col-lg-3 form-control-label\">Search by Company:</label>\r\n            <div class=\"col-xs-8\">\r\n                <p-autoComplete [style]=\"{'width':'400px !important'}\"\r\n                    [inputStyle]=\"{'width':'400px','maxwidth':'400px'}\" aria-required=\"true\" name=\"companyName\"\r\n                    [suggestions]=\"filteredCompany\" placeholders=\"filteredCompany\"\r\n                    (completeMethod)=\"searchCompany($event)\" placeholder=\"Search Company\" [dropdown]=\"false\"\r\n                    multiple=\"true\" [ngClass]=\"{ 'is-invalid':submitted && preferenceForm.controls.companyName.errors}\"\r\n                    aria-required=\"companyName\" formControlName=\"companyName\" [(ngModel)]=\"profile.companies\"\r\n                    (onSelect)=\"addOrRemoveEntities()\" (onUnselect)=\"addOrRemoveEntities()\">\r\n                </p-autoComplete>\r\n                <button icon=\"pi pi-check\" label=\"Go To Peer Group\" style=\"margin:3px\"\r\n                [disabled]=\"profile.companies.length > 1\" class=\"create-profile\" type=\"button\" pButton\r\n                    (click)=\"goToPeer($event)\"></button>\r\n                <div *ngIf=\"profile.companies.length === 0\" style=\"color: red; font-size: 12px;\">Please enter valid\r\n                    company name.</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <p-radioButton name=\"filterRadio\" formControlName=\"filterRadio\" value=\"divisionRadio\"\r\n                [(ngModel)]=\"filterRadio\">\r\n            </p-radioButton>\r\n            <label for=\"divSector\" class=\"col-lg-3 form-control-label\">Search by Group: Division -> Sector:\r\n            </label>\r\n            <div class=\"col-xs-7\">\r\n                <p-dropdown [options]=\"filtereddivSector\" placeholder=\"Select Division Sector\" [(ngModel)]=\"divSector\"\r\n                    [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                    (onChange)=\"divSectorChange(divSector)\" [virtualScroll]=\"true\" formControlName=\"division\"\r\n                    [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{divisionCount}}\r\n                <button pButton type=\"button\" [disabled]=\"!(isTermNameValid)\" label=\"Show Resolved\"\r\n                    class=\"ui-button-success\" (click)=\"showResolved()\"></button>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <label for=\"industry\" class=\"col-lg-3 form-control-label\" style=\"margin-right: 2%;\">Industry:</label>\r\n            <div class=\"col-xs-5\">\r\n                <p-dropdown [options]=\"filteredindustry\" placeholder=\"Select Industry\" [(ngModel)]=\"profile.industry\"\r\n                    [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                    (onChange)=\"processIndustryChange(profile.industry)\" [virtualScroll]=\"true\"\r\n                    formControlName=\"industry\" [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{sectorCount}}\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n\r\n            <label for=\"filerCategory\" class=\"col-lg-3 form-control-label\" style=\"margin-right: 2%;\">Filer\r\n                Category:</label>\r\n            <div class=\"col-xs-5\">\r\n                <p-dropdown [options]=\"filteredfilerCategory\" placeholder=\"Select Filer Category\"\r\n                    [(ngModel)]=\"profile.filerCategory\" [style]=\"{'width':'400px'}\" dropdownIcon=\"pi pi-chevron-down\"\r\n                    formControlName=\"filerCategory\" (onChange)=\"processfilCatChange(profile.filerCategory)\"\r\n                    [virtualScroll]=\"true\" [itemSize]=\"31\" filter=\"true\">\r\n                </p-dropdown>\r\n                &nbsp; {{categoryCount}}\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-group row\">\r\n            <!--Start Preference Name-->\r\n            <label for=\"preferenceName\" class=\"col-lg-3 form-control-label\" style=\"margin-right: 2%;\"\r\n                aria-required=\"true\">Preference\r\n                Name</label>\r\n            <div class=\"col-xs-5\">\r\n                <input type=\"text\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid':preferenceForm.controls.preferenceyName.errors}\"\r\n                    [(ngModel)]=\"profile.preferenceyName\" style=\"width: 400px !important;display:inline\"\r\n                    formControlName=\"preferenceyName\">\r\n\r\n                <div *ngIf=\"preferenceForm.controls.preferenceyName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"preferenceForm.controls.preferenceyName.errors.required\"\r\n                        style=\"color: red; font-size: 12px;\">\r\n                        Preference\r\n                        Name Required</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <p-table #entityTable [columns]=\"homeEntityCol\" [value]=\"entityList\" [responsive]=\"true\" selectionMode=\"single\"\r\n            [(selection)]=\"selectedEntity\" [paginator]=\"true\" [rows]=\"10\">\r\n            <ng-template pTemplate=\"header\" let-columns>\r\n                <tr>\r\n                    <th style=\"width:4em;\">\r\n                        <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n                    </th>\r\n                    <th *ngFor=\"let col of columns\">\r\n                        {{col.header}}\r\n                    </th>\r\n                </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                <tr style=\"height:34px\">\r\n                    <td>\r\n                        <p-tableCheckbox [value]=\"rowData\"></p-tableCheckbox>\r\n                    </td>\r\n                    <td *ngFor=\"let col of columns\">\r\n                        {{rowData[col.field]}}\r\n\r\n                    </td>\r\n                </tr>\r\n            </ng-template>\r\n        </p-table>\r\n\r\n        <div class=\"form-group row pull-right \">\r\n            <button icon=\"pi pi-check\" label=\"Save\" style=\"margin:3px \" class=\"create-profile\" type=\"button\"\r\n                (click)=\"savePreference()\"\r\n                [disabled]=\"!((profile.companies.length > 0) && (profile.termName) && preferenceForm.valid)\"\r\n                pButton></button>\r\n            <button icon=\"pi pi-times\" (click)=\"closeDialog()\" style=\"margin:3px\" label=\"Cancel\" type=\"button\" pButton\r\n                class=\"create-profile\"></button>\r\n        </div>\r\n    </div>\r\n</form>\r\n"

/***/ }),

/***/ "./src/app/profile/create-profile/create-profile.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/profile/create-profile/create-profile.component.ts ***!
  \********************************************************************/
/*! exports provided: CreateProfileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateProfileComponent", function() { return CreateProfileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/domain/mappedEntity */ "./src/app/domain/mappedEntity.ts");







var CreateProfileComponent = /** @class */ (function () {
    function CreateProfileComponent(profileService, router, builder, utilService) {
        this.profileService = profileService;
        this.router = router;
        this.builder = builder;
        this.utilService = utilService;
        this.selectedEntity = [];
        this.existingProfiles = [];
        this.token = "";
        this.selectedProfiles = [];
        this.processTermsList = [];
        this.msgs = [];
        this.homeEntityCol = [
            { field: 'cik', header: 'Cik' },
            { field: 'companyName', header: 'Company Name' }
        ];
        this.isTermNameValid = false;
        this.selectedTermName = [];
        this.gotoBtnEnable = false;
        this.completeEntities = [];
        this.terms = [];
        this.selectedTerms = [];
        this.actualSelectedTerms = [];
        this.closeDialogBox = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    CreateProfileComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.preferenceForm = this.builder.group({
            termName: [this.profile.termName, []],
            companyName: [this.profile.companyName, []],
            preferenceyName: [this.profile.preferenceyName, [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(3)]],
            division: [this.profile.division, []],
            sector: [this.profile.sector, []],
            industry: [this.profile.industry, []],
            filerCategory: [this.profile.filerCategory, []],
            filterRadio: [this.profile.filterRadio, []]
        });
        if (this.actionType === 'edit') {
            if (this.entityList.length > 0) {
                this.entityList.forEach(function (item) {
                    _this.profile.companies.push(item.companyName + '(' + item.cik + ')');
                });
            }
            this.profile.companyName = '';
            this.entityList = [];
            if (this.profile.termName) {
                this.addOrRemoveTermName();
            }
            this.filterRadio = 'companyRadio';
            this.profile.companies.forEach(function (item) {
                _this.profile.companyName = _this.profile.companyName + item + ',';
            });
            this.profile.companyName = this.profile.companyName.substring(0, this.profile.companyName.length - 1);
            if (this.profile.companies.length === 1) {
                this.goToPeer();
            }
        }
        this.preferenceForm.controls.termName.valueChanges.subscribe(function (value) {
            var id = value.substring(0, value.indexOf('-') - 1);
            if (_this.terms.find(function (item) { return item.termId === id; })) {
                _this.isTermNameValid = true;
            }
            else {
                _this.isTermNameValid = false;
            }
        });
        this.utilService.getTermRuleList().subscribe(function (response) {
            _this.terms = response;
            _this.terms = _this.terms.sort(function (a, b) {
                if (a.termId < b.termId) {
                    return -1;
                }
                if (a.termId > b.termId) {
                    return 1;
                }
                return 0;
            });
        });
    };
    CreateProfileComponent.prototype.goToPeer = function (event) {
        var _this = this;
        if (this.profile.companyName != undefined && this.profile.companyName.length > 15) {
            this.company = this.profile.companyName.substr(0, this.profile.companyName.length - 12);
            var peer = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.profile.division = peer[0].division;
            this.profile.sector = peer[0].sector;
            this.divSector = peer[0].division + ' -> ' + peer[0].sector;
            this.divSectorChange(this.divSector);
            this.profile.industry = peer[0].sic + '-' + peer[0].industry;
            this.processIndustryChange(this.profile.industry);
            this.profile.filerCategory = peer[0].filerCategory;
            this.processfilCatChange(this.profile.filerCategory);
            this.filterRadio = 'divisionRadio';
        }
    };
    CreateProfileComponent.prototype.filterTerm = function (event) {
        var _this = this;
        if (event.query != null && event.query != '') {
            this.filteredTerms = [];
            this.terms.forEach(function (cname) {
                if ((cname != null && cname.termId.toLowerCase().includes(event.query.toLowerCase())) || (cname != null && cname.name.toLowerCase().includes(event.query.toLowerCase()))) {
                    _this.filteredTerms.push(cname.termId + ' - ' + cname.name);
                }
            });
            this.filteredTerms = this.filteredTerms.sort(function (a, b) {
                if (a.toLowerCase().indexOf(event.query.toLowerCase()) < b.toLowerCase().indexOf(event.query.toLowerCase())) {
                    return -1;
                }
                if (a.toLowerCase().indexOf(event.query.toLowerCase()) > b.toLowerCase().indexOf(event.query.toLowerCase())) {
                    return 1;
                }
                return 0;
            });
        }
        else {
            this.filteredTerms = [];
            this.terms.forEach(function (obj) {
                _this.filteredTerms.push(obj.termId + ' - ' + obj.name);
            });
        }
    };
    CreateProfileComponent.prototype.onSelectTerm = function (event) {
        /*  if (this.selectedTerms && this.selectedTerms.length > 0) {
            const modifiedSelectedTerms = [];
            this.actualSelectedTerms = [];
            this.selectedTerms.forEach(item => {
              this.actualSelectedTerms.push(item);
              modifiedSelectedTerms.push(item.split(' - ')[0]);
            })
            this.selectedTerms = modifiedSelectedTerms;
          } */
        if (this.profile.termName) {
            var modifiedSelectedTerms = [];
            this.actualSelectedTerms = [];
            this.actualSelectedTerms.push(this.profile.termName);
            modifiedSelectedTerms.push(this.profile.termName.split(' - ')[0]);
            this.selectedTerms = modifiedSelectedTerms;
        }
    };
    CreateProfileComponent.prototype.addOrRemoveTermName = function () {
        this.selectedTermName = [];
        this.isTermNameValid = false;
        for (var i = 0; i < this.termNamesList.length; i++) {
            var name_1 = this.termNamesList[i].name;
            if (name_1.toLowerCase().indexOf(this.profile.termName.toLowerCase()) == 0) {
                this.selectedTermName.push(name_1);
                this.selectedTerms.push(name_1);
                this.isTermNameValid = true;
            }
        }
    };
    CreateProfileComponent.prototype.searchCompany = function (event) {
        this.filteredCompany = [];
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i].name;
            if (cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredCompany.push(cname);
            }
        }
    };
    CreateProfileComponent.prototype.addOrRemoveEntities = function () {
        var name = "";
        this.profile.companyName = "";
        this.profile.companies.forEach(function (entity) {
            if (name != null || name != "") {
                name = name + "," + entity;
            }
            else {
                name = entity;
            }
        });
        this.profile.companyName = name.substr(1, name.length);
        if (this.profile.companies.length > 1) {
            this.gotoBtnEnable = true;
        }
        else {
            this.gotoBtnEnable = false;
        }
    };
    CreateProfileComponent.prototype.divSectorChange = function (event) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        // event = event.value ? event.value : event;
        var division = event.substr(0, event.indexOf('->') - 1);
        var sector = event.substr(event.indexOf('->') + 3, event.length);
        this.profile.filerCategory = undefined;
        this.profile.industry = undefined;
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        this.filteredindustry = [];
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredindustry.push(name);
        });
        this.divisionCount = this.completeEntities.length;
        this.sectorCount = this.completeEntities.length;
        this.categoryCount = this.completeEntities.length;
    };
    CreateProfileComponent.prototype.showResolved = function () {
        var _this = this;
        var mp = new app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_6__["MappedEntity"]();
        mp.termRuleId = this.getTermIdOrEntityName(this.profile.termName);
        mp.entityId = "NULL";
        mp.division = this.profile.division;
        mp.sector = this.profile.sector;
        mp.filerCategory = this.profile.filerCategory;
        mp.rankId = 0;
        mp.minYear = (new Date()).getFullYear() - 4;
        mp.maxYear = (new Date()).getFullYear();
        mp.includeQuarterly = true;
        mp.sic = this.profile.industry.substring(0, 4);
        console.log(this.profile);
        console.log(mp);
        this.profileService.showReslovedData(mp).subscribe(function (results) {
            console.log(results);
            _this.entityList = results;
        });
    };
    CreateProfileComponent.prototype.getTermIdOrEntityName = function (inputValue) {
        //let outputValue: string = inputValue.substring((inputValue.indexOf("(") + 1), inputValue.indexOf(")"));
        var outputValue = inputValue.substring(0, inputValue.indexOf('-') - 1);
        return outputValue;
    };
    CreateProfileComponent.prototype.processIndustryChange = function (event) {
        if (event != null) {
            this.profile.filerCategory = undefined;
            event = event.substring(0, 4);
            var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === event; });
            this.sectorCount = completeEntities.length;
            this.categoryCount = completeEntities.length;
        }
        else {
            this.sectorCount = this.divisionCount;
            this.categoryCount = this.divisionCount;
        }
    };
    CreateProfileComponent.prototype.processfilCatChange = function (event) {
        var _this = this;
        if (event != null) {
            var completeEntities = this.completeEntities.filter(function (obj) {
                return obj.filerCategory === event && obj.sic === _this.profile.industry.substr(0, 4);
            });
            this.categoryCount = completeEntities.length;
        }
        else {
            this.categoryCount = this.divisionCount;
        }
    };
    CreateProfileComponent.prototype.savePreference = function () {
        var _this = this;
        if (this.preferenceForm.invalid) {
            return;
        }
        else {
            if (!this.isUpdate) {
                if (this.profile.companyName.length > 0 && this.profile.preferenceyName != null) {
                    var finalStr_1;
                    finalStr_1 = this.profile.companyName;
                    if (this.selectedEntity.length > 0) {
                        this.selectedEntity.forEach(function (item) {
                            var cname = item.companyName.concat("(" + item.cik + ")");
                            if (cname !== _this.profile.companyName) {
                                finalStr_1 = finalStr_1.concat("$").concat(cname);
                            }
                        });
                    }
                    else {
                    }
                    var term = '';
                    term = this.actualSelectedTerms[0].split(' - ')[1] + '(' + this.actualSelectedTerms[0].split(' - ')[0] + ')';
                    /*
                    this.actualSelectedTerms.forEach((item, index) => {
                      if (index === (this.actualSelectedTerms.length - 1)) {
                        const termObj = this.terms.find(val => val.termId === item);
                        term = term + termObj.name + '(' + termObj.termId + ')';
                      } else {
          
                        const termObj = this.terms.find(val => val.termId === item);
                        term = term + termObj.name + '(' + termObj.termId + ')' + '$';
                      }
                    }); */
                    this.profileService.savePreference(term, finalStr_1, this.profile.preferenceyName).subscribe(function (response) {
                        // this.populateResponse(response);
                        _this.closeDialog();
                    }, function (error) {
                        console.log(error);
                        if (JSON.parse(error._body).message.includes('Cannot insert duplicate key')) {
                            _this.msgs = [{ severity: 'info', summary: 'This user profile already exists', detail: '' }];
                            setInterval(function () {
                                _this.msgs = [];
                            }, 50000);
                        }
                    });
                }
                this.selectedProfile = [];
                this.selectedProfiles = [];
            }
            else {
                this.updateProfile();
            }
        }
    };
    CreateProfileComponent.prototype.updateProfile = function () {
        var _this = this;
        var finalStr;
        finalStr = this.profile.companyName;
        if (this.selectedEntity.length > 0) {
            this.selectedEntity.forEach(function (item) {
                finalStr = finalStr.concat("$").concat(item.companyName.concat("(" + item.cik + ")"));
            });
        }
        else {
        }
        var term = '';
        term = this.actualSelectedTerms[0].split(' - ')[1] + '(' + this.actualSelectedTerms[0].split(' - ')[0] + ')';
        /*
        this.actualSelectedTerms.forEach((item, index) => {
          if (index === (this.actualSelectedTerms.length - 1)) {
            const termObj = this.terms.find(val => val.termId === item);
            term = term + termObj.name + '(' + termObj.termId + ')';
          } else {
    
            const termObj = this.terms.find(val => val.termId === item);
            term = term + termObj.name + '(' + termObj.termId + ')' + '$';
          }
        }); */
        this.profileService.updatePreference(term, finalStr, this.profile.preferenceyName, Number(this.profile.processId)).subscribe(function (response) {
            _this.isUpdate = false;
            _this.closeDialog();
        }, function (error) { return console.log(error); });
    };
    CreateProfileComponent.prototype.closeDialog = function () {
        this.closeDialogBox.emit(true);
    };
    CreateProfileComponent.prototype.ngOnDestroy = function () {
        this.profile = {
            termName: "",
            companyName: "",
            preferenceyName: "",
            processId: "",
            division: "",
            filerCategory: "",
            industry: "",
            sector: "",
            filterRadio: "companyRadio",
            companies: []
        };
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "profile", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "filteredTerms", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "filteredCompany", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "filtereddivSector", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "entityList", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "isUpdate", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "actionType", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], CreateProfileComponent.prototype, "companyList", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], CreateProfileComponent.prototype, "termNamesList", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], CreateProfileComponent.prototype, "filteredfilerCategory", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], CreateProfileComponent.prototype, "completeCompanyList", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], CreateProfileComponent.prototype, "filteredindustry", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], CreateProfileComponent.prototype, "closeDialogBox", void 0);
    CreateProfileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-create-profile',
            template: __webpack_require__(/*! ./create-profile.component.html */ "./src/app/profile/create-profile/create-profile.component.html"),
            styles: [__webpack_require__(/*! ./create-profile.component.css */ "./src/app/profile/create-profile/create-profile.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_profile_service__WEBPACK_IMPORTED_MODULE_2__["ProfileService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__["UtilService"]])
    ], CreateProfileComponent);
    return CreateProfileComponent;
}());



/***/ }),

/***/ "./src/app/profile/profile.component.css":
/*!***********************************************!*\
  !*** ./src/app/profile/profile.component.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".modal-dialog{\r\n    position: fixed;\r\n    width: 100%;\r\n    margin: 0%;\r\n    padding-top: 10%;\r\n    padding-left: 25%;\r\n    padding-right: 25%;\r\n}\r\n.col-lg-4\r\n{\r\n    position: relative;\r\n}\r\n.form-control { width: 300px; }\r\n.mydialog {\r\n    width: 50vw;\r\n}\r\n@media screen and (max-width: 40em) {\r\n    .mydialog {\r\n        width: 75vw;\r\n    }\r\n}\r\n.modal-div{\r\n    padding: 20px !important;\r\n    margin: 20px !important;\r\n}\r\n.column1 {\r\n    float: left;\r\n    width: 30%;\r\n    text-align: right;\r\n    padding: 10px\r\n}\r\n.column2 {\r\n  float: right;\r\n  width: 70%;\r\n  text-align: left;\r\n  padding: 10px\r\n}\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvZmlsZS9wcm9maWxlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxlQUFlO0lBQ2YsV0FBVztJQUNYLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0QjtBQUNBOztJQUVJLGtCQUFrQjtBQUN0QjtBQUNBLGdCQUFnQixZQUFZLEVBQUU7QUFFOUI7SUFDSSxXQUFXO0FBQ2Y7QUFFQTtJQUNJO1FBQ0ksV0FBVztJQUNmO0FBQ0o7QUFDQTtJQUNJLHdCQUF3QjtJQUN4Qix1QkFBdUI7QUFDM0I7QUFFQTtJQUNJLFdBQVc7SUFDWCxVQUFVO0lBQ1YsaUJBQWlCO0lBQ2pCO0FBQ0o7QUFDQTtFQUNFLFlBQVk7RUFDWixVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCO0FBQ0YiLCJmaWxlIjoic3JjL2FwcC9wcm9maWxlL3Byb2ZpbGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tb2RhbC1kaWFsb2d7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbjogMCU7XHJcbiAgICBwYWRkaW5nLXRvcDogMTAlO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAyNSU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAyNSU7XHJcbn1cclxuLmNvbC1sZy00XHJcbntcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG4uZm9ybS1jb250cm9sIHsgd2lkdGg6IDMwMHB4OyB9XHJcblxyXG4ubXlkaWFsb2cge1xyXG4gICAgd2lkdGg6IDUwdnc7XHJcbn1cclxuXHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQwZW0pIHtcclxuICAgIC5teWRpYWxvZyB7XHJcbiAgICAgICAgd2lkdGg6IDc1dnc7XHJcbiAgICB9XHJcbn1cclxuLm1vZGFsLWRpdntcclxuICAgIHBhZGRpbmc6IDIwcHggIWltcG9ydGFudDtcclxuICAgIG1hcmdpbjogMjBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uY29sdW1uMSB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIHdpZHRoOiAzMCU7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIHBhZGRpbmc6IDEwcHhcclxufVxyXG4uY29sdW1uMiB7XHJcbiAgZmxvYXQ6IHJpZ2h0O1xyXG4gIHdpZHRoOiA3MCU7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBwYWRkaW5nOiAxMHB4XHJcbn1cclxuXHJcbiJdfQ== */"

/***/ }),

/***/ "./src/app/profile/profile.component.html":
/*!************************************************!*\
  !*** ./src/app/profile/profile.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <p-progressSpinner *ngIf=\"progressSpinner\" [style]=\"{width: '50px', height: '50px',float:'left'}\" strokeWidth=\"8\"\r\n        fill=\"#EEEEEE\" animationDuration=\".5s\"></p-progressSpinner>\r\n    <p-messages [style]=\"{color: 'black'}\" [value]=\"msgs\"></p-messages>\r\n</div>\r\n<div id=\"profiles-div\">\r\n\r\n    <div class=\"col-lg-12\" style=\"margin-bottom: 5px;\">\r\n        <label class=\"col-lg-11\">List of Profiles</label>\r\n        <button type=\"button\" pButton (click)=\"refreshData()\" joyrideStep=\"refreshData\" title=\"Refresh Data Button\"\r\n            text=\"The user can click this button to refresh the profile and update the list of profiles.\"\r\n            stepPosition=\"left\" label=\"Create Preference(s)\" label=\"Refresh Data\"></button>\r\n    </div>\r\n    <div class=\"table-responsive\">\r\n\r\n        <p-treeTable [value]=\"listPreferences\" [columns]=\"cols\" selectionMode=\"checkbox\"\r\n            [(selection)]=\"selectedProfile\">\r\n            <ng-template pTemplate=\"caption\">\r\n                <div style=\"text-align:left\">\r\n                    <p-treeTableHeaderCheckbox joyrideStep=\"selectUnselect\" title=\"Select / Un Select All\"\r\n                        text=\"This option enables the user to select/Un-select and process single/multiple preferences at the same time.\"\r\n                        stepPosition=\"right\">\r\n                    </p-treeTableHeaderCheckbox>\r\n                    <span style=\"margin-left: .25em; vertical-align: middle\">Select / Un Select All</span>\r\n                </div>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"header\" let-columns>\r\n                <tr>\r\n                    <th *ngFor=\"let col of columns\">\r\n                        {{col.header}}\r\n                    </th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n                <tr>\r\n                    <td *ngFor=\"let col of columns; let i = index\">\r\n                        <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i == 0\"></p-treeTableToggler>\r\n                        <p-treeTableCheckbox [value]=\"rowNode\" *ngIf=\"i == 0\"></p-treeTableCheckbox>\r\n                        <span *ngIf=\"col.header==='Company Name'\">\r\n                            {{rowData[col.field]}}\r\n                        </span>\r\n                        <span *ngIf=\"col.header ==='Term Name'\"> {{rowData[col.field]}} </span>\r\n                        <span *ngIf=\"col.header==='Code'\"> {{rowData[col.field]}}</span>\r\n                        <span *ngIf=\"col.header ==='Preference Name'\"> {{rowData[col.field]}} </span>\r\n\r\n                        <span *ngIf=\"col.header==='View Results Link'\">\r\n                            <span *ngIf=\"rowData[col.field] != 'NA' \">\r\n                                <u><a (click)=\"showTermResultnavigate(rowData)\"\r\n                                        style=\"cursor: pointer; color: blue;\">View\r\n                                        Result</a></u>\r\n                            </span>\r\n                            <span *ngIf=\"rowData[col.field] == 'NA' \">\r\n                                {{ rowData[col.field] }}\r\n                            </span>\r\n                        </span>\r\n\r\n                        <span *ngIf=\"col.header ==='Status'\">\r\n                            {{ rowData[col.field] }}\r\n                        </span>\r\n\r\n                        <span *ngIf=\"col.header==='Research Link'\">\r\n                            <span *ngIf=\"rowData[col.field] != 'NA' \">\r\n                                <u> <a (click)=\"openResearchLink(rowData)\"\r\n                                        style=\"cursor: pointer; color: blue;\">Research</a></u>\r\n                            </span>\r\n                            <span *ngIf=\"rowData[col.field] == 'NA' \">\r\n                                {{ rowData[col.field] }}\r\n                            </span>\r\n                        </span>\r\n\r\n                        <span *ngIf=\"col.header==='FSQV Link'\">\r\n                          <span *ngIf=\"rowData[col.field] != 'NA' \">\r\n                              <u> <a (click)=\"openFSQVLink(rowData)\"\r\n                                      style=\"cursor: pointer; color: blue;\">FSQV</a></u>\r\n                          </span>\r\n                          <span *ngIf=\"rowData[col.field] == 'NA' \">\r\n                              {{ rowData[col.field] }}\r\n                          </span>\r\n                        </span>\r\n\r\n                        <span *ngIf=\"col.header ==='Is Quarterly'\"> {{rowData[col.field]}} </span>\r\n                        <span *ngIf=\"col.header==='User'\"> {{rowData[col.field]}}</span>\r\n                    </td>\r\n\r\n\r\n                    <td id=\"icons\">\r\n                        <a (click)=\"updateModal(rowData)\" *ngIf=\"!VIEW_ONLY\"> <i class=\"fa fa-edit fa-lg\"\r\n                                style=\"font-size:2em; margin-left: 5px !important; margin-right: 10px !important;\"></i></a>\r\n                    </td>\r\n                </tr>\r\n            </ng-template>\r\n        </p-treeTable>\r\n\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\">\r\n        <div class=\"col-lg-8\"></div>\r\n        <div class=\"col-lg-4\">\r\n            <button type=\"button\" style=\"margin-right: 5px !important; margin-top: 5px !important;\" pButton\r\n                class=\"create-profile\" (click)=\"processPreference()\"\r\n                [disabled]=\"!(selectedProfile && selectedProfile.length > 0)\" label=\"Process Preference(s)\"\r\n                joyrideStep=\"processPreference\" title=\"Process Preference\"\r\n                text=\"This button enables the user to process preference(s) and if the user chooses, view the results. \"></button>\r\n            <button type=\"button\" style=\"margin-right: 5px !important; margin-top: 5px !important;\" pButton\r\n                class=\"create-profile\" (focus)=\"openModal()\" (click)=\"openModal()\" joyrideStep=\"createPreference\"\r\n                title=\"Create Preference\" [stepContent]=\"createPreference\" label=\"Create Preference\"></button>\r\n            <button type=\"button\" style=\"margin-right: 5px !important; margin-top: 5px !important;\" pButton\r\n                class=\"create-profile\" (click)=\"deletePreference()\"\r\n                [disabled]=\"!(selectedProfile && selectedProfile.length > 0)\" label=\"Delete Preference(s)\"\r\n                joyrideStep=\"deletePreference\" title=\"Delete Preference\"\r\n                text=\"The Delete Preference button enables a user to delete selected preference(s) and delete them when they are not needed.\"></button>\r\n            <button type=\"button\" style=\"margin-top: 5px !important;\" pButton class=\"create-profile\"\r\n                (click)=\"clearPreference();refreshData()\" [disabled]=\"!(selectedProfile && selectedProfile.length > 0)\"\r\n                label=\"Clear Preference(s)\" joyrideStep=\"clearPreference\" title=\"Clear Preference\"\r\n                text=\"The Clear Preference button enables a user to clear selected preference(s), this deletes the previously processed results. \"></button>\r\n            <button type=\"button\" style=\"margin-left: 5px !important; margin-top: 5px !important;\" pButton\r\n                class=\"create-profile\" (click)=\"sharePreference()\"\r\n                [disabled]=\"!(selectedProfile && selectedProfile.length > 0)\" label=\"Share Preference(s)\"\r\n                joyrideStep=\"sharePreference\" title=\"Share Preference\"\r\n                text=\"The Share Preference enables user to select and share group of their own personal preferences among other users, the shared preferences from other users will be displayed in a grid below the preference table.\"></button>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"(listSharedPreferences.length > 0)\" class=\"col-lg-12\" style=\"margin: 10px 0px 5px 0px;\">\r\n        <label class=\"col-lg-12\"> <span joyrideStep=\"listOfSharedProfile\" title=\"List of Shared Preference\"\r\n                text=\"List of Shared Preferences shared by other users.\">List of Shared Profiles</span></label>\r\n    </div>\r\n\r\n    <div class=\"table-responsive\" *ngIf=\"(listSharedPreferences.length > 0)\">\r\n\r\n        <p-treeTable [value]=\"listSharedPreferences\" [columns]=\"sharedPreferenceCols\">\r\n            <ng-template pTemplate=\"header\" let-columns>\r\n                <tr>\r\n                    <th *ngFor=\"let col of columns\">\r\n                        {{col.header}}\r\n                    </th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n                <tr>\r\n                    <td *ngFor=\"let col of columns; let i = index\">\r\n                        <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i == 0\"></p-treeTableToggler>\r\n                        <span *ngIf=\"col.header==='Company Name'\">\r\n                            {{rowData[col.field]}}\r\n                        </span>\r\n                        <span *ngIf=\"col.header ==='Term Name'\"> {{rowData[col.field]}} </span>\r\n                        <span *ngIf=\"col.header==='Code'\"> {{rowData[col.field]}}</span>\r\n                        <span *ngIf=\"col.header ==='Preference Name'\"> {{rowData[col.field]}} </span>\r\n\r\n                        <span *ngIf=\"col.header==='View Results Link'\">\r\n                            <span *ngIf=\"rowData[col.field] != 'NA' \">\r\n                                <u><a (click)=\"showTermResultnavigate(rowData)\"\r\n                                        style=\"cursor: pointer; color: blue;\">View\r\n                                        Result</a></u>\r\n                            </span>\r\n                            <span *ngIf=\"rowData[col.field] == 'NA' \">\r\n                                {{ rowData[col.field] }}\r\n                            </span>\r\n                        </span>\r\n\r\n                        <span *ngIf=\"col.header ==='Status'\">\r\n                            {{ rowData[col.field] }}\r\n                        </span>\r\n\r\n                        <span *ngIf=\"col.header==='Research Link'\">\r\n                            <span *ngIf=\"rowData[col.field] != 'NA' \">\r\n                                <u> <a (click)=\"openResearchLink(rowData)\"\r\n                                        style=\"cursor: pointer; color: blue;\">Research</a></u>\r\n                            </span>\r\n                            <span *ngIf=\"rowData[col.field] == 'NA' \">\r\n                                {{rowData[col.field]}}\r\n                            </span>\r\n                        </span>\r\n\r\n                        <span *ngIf=\"col.header ==='Is Quarterly'\"> {{rowData[col.field]}} </span>\r\n                        <span *ngIf=\"col.header==='User'\"> {{rowData[col.field]}}</span>\r\n                    </td>\r\n\r\n\r\n                    <td id=\"icons\">\r\n                        <a (click)=\"acceptPreferences(rowData)\" joyrideStep=\"accept\" title=\"Accept Preference\"\r\n                            text=\"Accept Preference enables user to accept the preference shared by other users, upon accept the shared preference will be added to user preferences\"\r\n                            *ngIf=\"!VIEW_ONLY\"> <i class=\"fa fa-check fa-lg\"\r\n                                style=\"font-size:2em; margin-left: 5px !important; margin-right: 10px !important;\"></i></a>\r\n                        <a (click)=\"deleteSharedPreference(rowData)\" joyrideStep=\"delete\" title=\"Delete Preference\"\r\n                            text=\"Delete Shared Preference enables user to dis regard the shared preference and clear from the list of shared preferences grid.\"\r\n                            *ngIf=\"!VIEW_ONLY\"> <i class=\"fa fa-trash fa-lg\"\r\n                                style=\"font-size:2em; margin-left: 5px !important; margin-right: 10px !important;\"></i></a>\r\n                    </td>\r\n                </tr>\r\n            </ng-template>\r\n        </p-treeTable>\r\n\r\n    </div>\r\n</div>\r\n\r\n<p-dialog header=\"Create Profile\" [(visible)]=\"displayCreateModal\" [modal]=\"true\"\r\n    [style]=\"{width: '80vw',overflow:'auto',height:'120vh'}\" [maximizable]=\"true\" [draggable]=\"true\"\r\n    [resizable]=\"false\">\r\n    <span style=\"height: 10px;\"></span>\r\n    <app-create-profile *ngIf=\"displayCreateModal\" [completeCompanyList]=\"completeCompanyList\"\r\n        [filteredfilerCategory]=\"filteredfilerCategory\" [filteredindustry]=\"filteredindustry\" [actionType]=\"'create'\"\r\n        (closeDialogBox)=closeDialog($event) [profile]=\"profile\" [companyList]=\"companyList\"\r\n        [termNamesList]=\"termNamesList\" [filteredTerms]=\"filteredTerms\" [filteredCompany]=\"filteredCompany\"\r\n        [filtereddivSector]=\"filtereddivSector\" [entityList]=\"entityList\" [isUpdate]=\"isUpdate\"></app-create-profile>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Create Profile\" [(visible)]=\"displayCreateProfileEditModal\" [modal]=\"true\"\r\n    [style]=\"{width: '80vw',overflow:'auto',height:'120vh'}\" [maximizable]=\"true\" [draggable]=\"true\"\r\n    [resizable]=\"false\">\r\n    <span style=\"height: 10px;\"></span>\r\n    <app-create-profile *ngIf=\"displayCreateProfileEditModal\" [completeCompanyList]=\"completeCompanyList\"\r\n        [filteredfilerCategory]=\"filteredfilerCategory\" [filteredindustry]=\"filteredindustry\" [actionType]=\"'edit'\"\r\n        (closeDialogBox)=closeDialog($event) [profile]=\"profile\" [companyList]=\"companyList\"\r\n        [termNamesList]=\"termNamesList\" [filteredTerms]=\"filteredTerms\" [filteredCompany]=\"filteredCompany\"\r\n        [filtereddivSector]=\"filtereddivSector\" [entityList]=\"entityList\" [isUpdate]=\"isUpdate\"></app-create-profile>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Share Profile\" [(visible)]=\"displayShareProfileModal\" [modal]=\"true\"\r\n    [style]=\"{width: '80vw',overflow:'auto',height:'120vh'}\" [maximizable]=\"true\" [draggable]=\"true\"\r\n    [resizable]=\"false\">\r\n    <span style=\"height: 10px;\"></span>\r\n    <app-share-preferences *ngIf=\"displayShareProfileModal\" (closeDialogBox)=closeSharePreferencesDialog($event)\r\n        [selectedProfile]=\"selectedProfile\"></app-share-preferences>\r\n</p-dialog>\r\n\r\n<ng-template #createPreference>\r\n    <div>This option enables the user to Create Preference by selecting the term, entity, and peer group.</div>\r\n    <div>The user can choose these options from a modal pop up that is displayed when the user clicks this button.\r\n    </div>\r\n</ng-template>\r\n"

/***/ }),

/***/ "./src/app/profile/profile.component.ts":
/*!**********************************************!*\
  !*** ./src/app/profile/profile.component.ts ***!
  \**********************************************/
/*! exports provided: ProfileComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileComponent", function() { return ProfileComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/domain/mappedEntity */ "./src/app/domain/mappedEntity.ts");
/* harmony import */ var app_services_common_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/services/common.service */ "./src/app/services/common.service.ts");








var ProfileComponent = /** @class */ (function () {
    function ProfileComponent(profileService, activatedRoute, commonService, router, builder, utilService) {
        this.profileService = profileService;
        this.activatedRoute = activatedRoute;
        this.commonService = commonService;
        this.router = router;
        this.builder = builder;
        this.utilService = utilService;
        this.selectedEntity = [];
        this.existingProfiles = [];
        this.token = "";
        this.selectedProfiles = [];
        this.processTermsList = [];
        this.displayCreateModal = false;
        this.displayCreateProfileEditModal = false;
        this.profile = {
            termName: "",
            companyName: "",
            preferenceyName: "",
            processId: "",
            division: "",
            filerCategory: "",
            industry: "",
            sector: "",
            filterRadio: "companyRadio",
            companies: []
        };
        this.listSharedPreferences = [];
        this.selectedSharedProfile = [];
        this.displayShareProfileModal = false;
        this.completeEntities = [];
        /*
         New login::
        */
        this.divSector = "";
        this.filterRadio = "companyRadio";
        this.submitted = false;
        this.cols = [
            { field: 'companyName', header: 'Company Name', hidden: false, exportable: false, width: '18%' },
            { field: 'termName', header: 'Term Name', hidden: false },
            { field: 'code', header: 'Code', hidden: false, exportable: false },
            { field: 'preferenceName', header: 'Preference Name', hidden: false },
            { field: 'resultLink', header: 'View Results Link', hidden: false },
            { field: 'validationStatus', header: 'Status', hidden: false },
            { field: 'researchLink', header: 'Research Link', hidden: false },
            { field: 'fsqvLink', header: 'FSQV Link', hidden: false },
            { field: 'quarterly', header: 'Is Quarterly', hidden: false },
            { field: 'userid', header: 'User', hidden: false },
        ];
        this.sharedPreferenceCols = [
            { field: 'companyName', header: 'Company Name', hidden: false, exportable: false, width: '15%' },
            { field: 'termName', header: 'Term Name', hidden: false },
            { field: 'code', header: 'Code', hidden: false, exportable: false },
            { field: 'preferenceName', header: 'Preference Name', hidden: false },
            { field: 'quarterly', header: 'Is Quarterly', hidden: false },
            { field: 'userid', header: 'User', hidden: false },
        ];
        this.gotoBtnEnable = false;
        this.isTermNameValid = false;
        this.selectedTermName = [];
        this.isUpdate = false;
        this.progressSpinner = false;
        this.msgs = [];
        this.ngOnInit();
    }
    ProfileComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.homeEntityCol = [
            { field: 'cik', header: 'Cik' },
            { field: 'companyName', header: 'Company Name' }
        ];
        this.reset();
        this.getAllSharedProfiles();
        this.getAllProfiles();
        this.getTermNames();
        this.getCompanyNames();
        this.formValidation();
        this.utilService.getCompanyList().subscribe(function (response) { _this.companiesList = response; });
        this.utilService.getDivSectorList().subscribe(function (response) {
            _this.divSectorList = response;
            _this.filtereddivSector = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filtereddivSector.push(name);
            });
        });
        this.utilService.getIndustryList().subscribe(function (response) {
            _this.industryList = response;
        });
        this.utilService.getFilerCategoryList().subscribe(function (response) {
            _this.filerCategoryList = response;
            _this.filteredfilerCategory = [];
            response.forEach(function (obj) {
                var name = { label: obj, value: obj };
                _this.filteredfilerCategory.push(name);
            });
        });
        this.utilService.getCompleteCompanyList().subscribe(function (response) {
            _this.completeCompanyList = response;
        });
    };
    // processIndustryChange(event) {
    //   event = event.value ? event.value : event;
    //   event = event.substring(0, 4);
    //   var completeEntities = this.completeEntities.filter(obj => obj.sic === event);
    //   this.sectorCount = completeEntities.length
    // }
    ProfileComponent.prototype.processIndustryChange = function (event) {
        // event = event.value ? event.value : null;
        if (event != null) {
            this.profile.filerCategory = undefined;
            event = event.substring(0, 4);
            var completeEntities = this.completeEntities.filter(function (obj) { return obj.sic === event; });
            this.sectorCount = completeEntities.length;
            this.categoryCount = completeEntities.length;
        }
        else {
            this.sectorCount = this.divisionCount;
            this.categoryCount = this.divisionCount;
        }
    };
    // processfilCatChange(event) {
    //   event = event.value ? event.value : event;
    //   var completeEntities = this.completeEntities.filter(obj =>
    //     obj.filerCategory === event && obj.sic === this.profile.industry.substr(0, 4));
    //   this.sectorCount = completeEntities.length
    //   this.categoryCount = completeEntities.length;
    // }
    ProfileComponent.prototype.processfilCatChange = function (event) {
        var _this = this;
        // event = event.value ? event.value : null;
        if (event != null) {
            var completeEntities = this.completeEntities.filter(function (obj) {
                return obj.filerCategory === event && obj.sic === _this.profile.industry.substr(0, 4);
            });
            // this.industryCount = completeEntities.length;
            this.categoryCount = completeEntities.length;
        }
        else {
            // this.industryCount = this.divisionCount;
            this.categoryCount = this.divisionCount;
        }
    };
    ProfileComponent.prototype.goToPeer = function (event) {
        var _this = this;
        if (this.profile.companyName != undefined && this.profile.companyName.length > 15) {
            this.company = this.profile.companyName.substr(0, this.profile.companyName.length - 12);
            var peer = this.completeCompanyList.filter(function (obj) { return obj.companyName === _this.company; });
            this.profile.division = peer[0].division;
            this.profile.sector = peer[0].sector;
            this.divSector = peer[0].division + ' -> ' + peer[0].sector;
            this.divSectorChange(this.divSector);
            this.profile.industry = peer[0].sic + '-' + peer[0].industry;
            this.processIndustryChange(this.profile.industry);
            this.profile.filerCategory = peer[0].filerCategory;
            this.processfilCatChange(this.profile.filerCategory);
            this.filterRadio = 'divisionRadio';
        }
    };
    ProfileComponent.prototype.showResolved = function () {
        var _this = this;
        var mp = new app_domain_mappedEntity__WEBPACK_IMPORTED_MODULE_6__["MappedEntity"]();
        mp.termRuleId = this.getTermIdOrEntityName(this.profile.termName);
        mp.entityId = "NULL";
        mp.division = this.profile.division;
        mp.sector = this.profile.sector;
        mp.filerCategory = this.profile.filerCategory;
        mp.rankId = 0;
        mp.minYear = (new Date()).getFullYear() - 4;
        mp.maxYear = (new Date()).getFullYear();
        mp.includeQuarterly = true;
        mp.sic = this.profile.industry.substring(0, 4);
        console.log(this.profile);
        console.log(mp);
        this.profileService.showReslovedData(mp).subscribe(function (results) {
            console.log(results);
            _this.entityList = results;
        });
    };
    // divSectorChange(event) {
    //   this.completeEntities = this.completeCompanyList;
    //   var sicCodes: any[] = [];
    //   event = event.value ? event.value : event;
    //   var division = event.substr(0, event.indexOf('->') - 1);
    //   var sector = event.substr(event.indexOf('->') + 3, event.length);
    //   if (division) {
    //     this.completeEntities = this.completeCompanyList.filter(obj => obj.division === division);
    //   }
    //   if (sector) {
    //     this.completeEntities = this.completeEntities.filter(obj => obj.sector === sector);
    //   }
    //   this.completeEntities.forEach(obj => {
    //     sicCodes.push(obj.sic + '-' + obj.industry);
    //   })
    //   sicCodes = sicCodes.filter((el, i, a) => i === a.indexOf(el))
    //   this.filteredindustry = [];
    //   sicCodes.forEach(obj => {
    //     var name = { label: obj, value: obj };
    //     this.filteredindustry.push(name);
    //   })
    //   this.divisionCount = this.completeEntities.length;
    //   this.sectorCount = this.completeEntities.length;
    //   this.categoryCount = this.completeEntities.length;;
    //   // if(this.derivedZeroExpressionForEdit.industry) {
    //   //   var completeEntities = this.completeEntities.filter(obj => obj.sic === this.derivedZeroExpressionForEdit.industry);
    //   //   this.sectorCount = completeEntities.length
    //   // }
    // }
    ProfileComponent.prototype.divSectorChange = function (event) {
        var _this = this;
        this.completeEntities = this.completeCompanyList;
        var sicCodes = [];
        // event = event.value ? event.value : event;
        var division = event.substr(0, event.indexOf('->') - 1);
        var sector = event.substr(event.indexOf('->') + 3, event.length);
        this.profile.filerCategory = undefined;
        this.profile.industry = undefined;
        if (division) {
            this.completeEntities = this.completeCompanyList.filter(function (obj) { return obj.division === division; });
        }
        if (sector) {
            this.completeEntities = this.completeEntities.filter(function (obj) { return obj.sector === sector; });
        }
        this.completeEntities.forEach(function (obj) {
            sicCodes.push(obj.sic + '-' + obj.industry);
        });
        sicCodes = sicCodes.filter(function (el, i, a) { return i === a.indexOf(el); });
        this.filteredindustry = [];
        sicCodes.forEach(function (obj) {
            var name = { label: obj, value: obj };
            _this.filteredindustry.push(name);
        });
        this.divisionCount = this.completeEntities.length;
        this.sectorCount = this.completeEntities.length;
        this.categoryCount = this.completeEntities.length;
        ;
        // if(this.derivedZeroExpressionForEdit.industry) {
        //   var completeEntities = this.completeEntities.filter(obj => obj.sic === this.derivedZeroExpressionForEdit.industry);
        //   this.sectorCount = completeEntities.length
        // }
    };
    ProfileComponent.prototype.formValidation = function () {
        this.preferenceForm = this.builder.group({
            termName: [this.profile.termName, []],
            companyName: [this.profile.companyName, []],
            preferenceyName: [this.profile.preferenceyName, [_angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_4__["Validators"].min(3)]],
            division: [this.profile.division, []],
            sector: [this.profile.sector, []],
            industry: [this.profile.industry, []],
            filerCategory: [this.profile.filerCategory, []],
            filterRadio: [this.profile.filterRadio, []]
        });
    };
    Object.defineProperty(ProfileComponent.prototype, "pereferencesForm", {
        get: function () {
            return this.preferenceForm.controls;
        },
        enumerable: true,
        configurable: true
    });
    ProfileComponent.prototype.onSubmit = function () {
        this.submitted = true;
        if (this.preferenceForm.invalid) {
            return;
        }
        else {
            this.savePreference();
        }
    };
    ProfileComponent.prototype.reset = function () {
        HTMLDListElement;
        this.selectedProfile = [];
        this.selectedProfiles = [];
        this.processTermsList = [];
        this.preferencesList = [];
    };
    ProfileComponent.prototype.searchTerm = function (event) {
        this.filteredTerms = [];
        for (var i = 0; i < this.termNamesList.length; i++) {
            var name_1 = this.termNamesList[i].name;
            if (name_1.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredTerms.push(name_1);
            }
        }
    };
    ProfileComponent.prototype.showTermResultnavigate = function (data) {
        //let termName = data.code;
        this.router.navigate(['/termresults'], {
            state: {
                termName: this.getTermIdOrEntityName(data.termName),
                entityId: this.getTermIdOrEntityName(data.companyName),
                companyName: data.companyName.substring(0, data.companyName.indexOf("("))
            }
        });
    };
    ProfileComponent.prototype.searchCompany = function (event) {
        this.filteredCompany = [];
        for (var i = 0; i < this.companyList.length; i++) {
            var cname = this.companyList[i].name;
            if (cname.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {
                this.filteredCompany.push(cname);
            }
        }
    };
    ProfileComponent.prototype.addOrRemoveTermName = function () {
        this.selectedTermName = [];
        this.isTermNameValid = false;
        for (var i = 0; i < this.termNamesList.length; i++) {
            var name_2 = this.termNamesList[i].name;
            if (name_2.toLowerCase().indexOf(this.profile.termName.toLowerCase()) == 0) {
                this.selectedTermName.push(name_2);
                this.isTermNameValid = true;
            }
        }
    };
    ProfileComponent.prototype.addOrRemoveEntities = function () {
        var name = "";
        this.profile.companyName = "";
        this.profile.companies.forEach(function (entity) {
            if (name != null || name != "") {
                name = name + "," + entity;
            }
            else {
                name = entity;
            }
        });
        this.profile.companyName = name.substr(1, name.length);
        if (this.profile.companies.length > 1) {
            this.gotoBtnEnable = true;
        }
        else {
            this.gotoBtnEnable = false;
        }
    };
    ProfileComponent.prototype.resetProfile = function () {
        this.profile = {
            termName: "",
            companyName: "",
            preferenceyName: "",
            processId: "",
            division: "",
            filerCategory: "",
            industry: "",
            sector: "",
            filterRadio: "companyRadio",
            companies: []
        };
        this.entityList = null;
        this.categoryCount = null;
        this.sectorCount = null;
        this.divisionCount = null;
    };
    ProfileComponent.prototype.openModal = function () {
        this.resetProfile();
        this.selectedEntity = [];
        this.isUpdate = false;
        this.displayCreateModal = true;
        this.profile.companyName = "";
        this.profile.termName = "";
        this.profile.preferenceyName = "";
        this.profile.processId = "";
        this.divSector = '';
    };
    ;
    ProfileComponent.prototype.sharePreference = function () {
        this.displayShareProfileModal = true;
    };
    ProfileComponent.prototype.updateModal = function (rowdata) {
        this.profile.companies = [];
        this.isUpdate = true;
        this.displayCreateProfileEditModal = true;
        //this.profile.companies.push(rowdata.companyName);
        //reverse term name format from "term name(code)" to "code - term name"
        var tmp = "";
        var newTermName = "";
        var tmp1 = "";
        if (rowdata.termName) {
            tmp = rowdata.termName.split('(');
            var length = tmp.length;
            for (var i = 0; i < length - 1; i++) {
                if (length > 2) {
                    tmp1 = tmp1 + '(' + tmp[i];
                }
                else {
                    tmp1 = tmp1 + tmp[i];
                }
            }
            newTermName = tmp[tmp.length - 1].split(')')[0] + ' - ' + tmp1;
        }
        this.profile.termName = newTermName;
        this.profile.preferenceyName = rowdata.preferenceName;
        this.profile.processId = rowdata.processId;
        this.fetchProcessObject(this.profile.processId);
        console.log(rowdata);
    };
    ;
    ProfileComponent.prototype.acceptPreferences = function (rowdata) {
        var _this = this;
        this.profileService.acceptSharedPrefernces(rowdata).subscribe(function (response) {
            _this.listSharedPreferences = [];
            var preferencesList = [];
            response.forEach(function (preferences) {
                var pname = preferences.companyName.split("$");
                preferencesList.push(_this.getRootRecords(preferences, pname));
            });
            _this.refreshData();
            _this.listSharedPreferences = preferencesList;
            app_services_common_service__WEBPACK_IMPORTED_MODULE_7__["CommonService"].emitsharedPreferenceNotificationEvent(_this.listSharedPreferences);
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.deleteSharedPreference = function (rowdata) {
        var _this = this;
        this.profileService.deleteSharedPrefernces([rowdata.processId]).subscribe(function (response) {
            _this.listSharedPreferences = [];
            var preferencesList = [];
            response.forEach(function (preferences) {
                var pname = preferences.companyName.split("$");
                preferencesList.push(_this.getRootRecords(preferences, pname));
            });
            _this.listSharedPreferences = preferencesList;
            app_services_common_service__WEBPACK_IMPORTED_MODULE_7__["CommonService"].emitsharedPreferenceNotificationEvent(_this.listSharedPreferences);
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.fetchProcessObject = function (processId) {
        var _this = this;
        this.listPreferences.forEach((function (parentdata) {
            var selectedProfileId = parentdata.data.processId;
            if (processId === selectedProfileId) {
                var rowdata_1 = new Array();
                rowdata_1.push(parentdata.data);
                parentdata.children.forEach(function (item) {
                    rowdata_1.push(item.data);
                });
                _this.entityList = [];
                _this.selectedEntity = [];
                rowdata_1.forEach(function (element) {
                    var entity = { "cik": _this.getTermIdOrEntityName(element.companyName), "companyName": element.companyName.substr(0, element.companyName.indexOf('(')) };
                    _this.entityList.push(entity);
                    _this.selectedEntity.push(entity);
                });
            }
        }));
    };
    ProfileComponent.prototype.getTermNames = function () {
        var _this = this;
        this.profileService.getTermNames().subscribe(function (response) {
            _this.termNamesList = [];
            response.forEach(function (preferences) {
                _this.termNamesList.push({ name: preferences.name });
            });
        }, function (error) { return console.log(error); });
    };
    ;
    ProfileComponent.prototype.getCompanyNames = function () {
        var _this = this;
        this.profileService.getCoompanyNames().subscribe(function (response) {
            _this.companyList = [];
            response.forEach(function (preferences) {
                _this.companyList.push({ name: preferences });
            });
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.openResearchLink = function (data) {
        var linkUrl = data.researchLink;
        var companyName = data.companyName;
        var cik = companyName.substring(companyName.indexOf("(") + 1, companyName.indexOf(")"));
        linkUrl = linkUrl.substring(0, linkUrl.indexOf("CIK=") + 4) + cik;
        window.open(linkUrl, "_blank");
    };
    ProfileComponent.prototype.openFSQVLink = function (data) {
        var linkUrl = data.fsqvLink;
        var companyName = data.companyName;
        var cik = companyName.substring(companyName.indexOf("(") + 1, companyName.indexOf(")"));
        linkUrl = linkUrl.substring(0, linkUrl.indexOf("cik=") + 4) + cik;
        window.open(linkUrl, "_blank");
    };
    ProfileComponent.prototype.getAllProfiles = function () {
        var _this = this;
        this.profileService.getAllProfiles().subscribe(function (response) {
            _this.preferencesList = [];
            _this.selectedProfile = [];
            _this.selectedProfiles = [];
            _this.progressSpinner = false;
            _this.populateResponse(response);
            setInterval(function () {
                _this.msgs = [];
            }, 50000);
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.getAllSharedProfiles = function () {
        var _this = this;
        this.profileService.getAllSharedProfiles().subscribe(function (response) {
            _this.progressSpinner = false;
            _this.listSharedPreferences = [];
            var preferencesList = [];
            response.forEach(function (preferences) {
                var pname = preferences.companyName.split("$");
                preferencesList.push(_this.getRootRecords(preferences, pname));
            });
            _this.listSharedPreferences = preferencesList;
            app_services_common_service__WEBPACK_IMPORTED_MODULE_7__["CommonService"].emitsharedPreferenceNotificationEvent(_this.listSharedPreferences);
            setInterval(function () {
                _this.msgs = [];
            }, 50000);
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.savePreference = function () {
        var _this = this;
        if (this.preferenceForm.invalid) {
            return;
        }
        else {
            if (!this.isUpdate) {
                if (this.profile.companyName.length > 0 && this.profile.preferenceyName != null) {
                    this.displayCreateModal = false;
                    this.displayCreateProfileEditModal = false;
                    var finalStr_1;
                    finalStr_1 = this.profile.companyName;
                    if (this.selectedEntity.length > 0) {
                        this.selectedEntity.forEach(function (item) {
                            finalStr_1 = finalStr_1.concat("$").concat(item.companyName.concat("(" + item.cik + ")"));
                        });
                    }
                    else {
                    }
                    console.log(finalStr_1);
                    this.profileService.savePreference(this.profile.termName, finalStr_1, this.profile.preferenceyName).subscribe(function (response) {
                        _this.populateResponse(response);
                    }, function (error) { return console.log(error); });
                }
                else {
                    this.displayCreateModal = true;
                    this.displayCreateProfileEditModal = false;
                }
                this.selectedProfile = [];
                this.selectedProfiles = [];
            }
            else {
                this.updateProfile();
            }
        }
    };
    ProfileComponent.prototype.updateProfile = function () {
        var _this = this;
        this.displayCreateModal = false;
        this.displayCreateProfileEditModal = false;
        var finalStr;
        finalStr = this.profile.companyName;
        if (this.selectedEntity.length > 0) {
            this.selectedEntity.forEach(function (item) {
                finalStr = finalStr.concat("$").concat(item.companyName.concat("(" + item.cik + ")"));
            });
        }
        else {
        }
        this.profileService.updatePreference(this.profile.termName, finalStr, this.profile.preferenceyName, Number(this.profile.processId)).subscribe(function (response) {
            /* this.profile.companyName = "";
             this.profile.preferenceyName = "";
             this.profile.termName = "";*/
            _this.isUpdate = false;
            _this.populateResponse(response);
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.deletePreference = function () {
        var _this = this;
        this.getProcessIds(this.selectedProfile);
        this.profileService.deletePrefernces(this.selectedProfiles).subscribe(function (response) {
            _this.populateResponse(response);
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.clearPreference = function () {
        var _this = this;
        this.getProcessIds(this.selectedProfile);
        this.profileService.clearPrefernces(this.selectedProfiles).subscribe(function (response) {
            _this.populateResponse(response);
        }, function (error) { return console.log(error); });
    };
    ProfileComponent.prototype.getProcessIds = function (selectedItems) {
        var _this = this;
        selectedItems.forEach(function (profiledata) {
            var profile = profiledata.data;
            _this.selectedProfiles.push(profile.processId);
        });
    };
    ProfileComponent.prototype.processPreference = function () {
        var _this = this;
        this.progressSpinner = true;
        this.msgs = [{ severity: 'info', summary: '"Selected Profile(s) Processing in progress!"', detail: '' }];
        this.selectedProfile.forEach(function (profiledata) {
            var profile = profiledata.data;
            profile.validationStatus = "In Progress";
            if (profile.termName === "**All Terms**") {
                var termIds_1 = [];
                _this.termNamesList.forEach(function (termname) {
                    termIds_1.push(_this.getTermIdOrEntityName(termname.name));
                });
                _this.selectedProfile.forEach(function (sprofiledata) {
                    var sprofile = sprofiledata.data;
                    termIds_1.push(_this.getTermIdOrEntityName(sprofile.companyName));
                    termIds_1.push(sprofile.processId);
                });
                _this.profileService.processAllTerms(termIds_1).subscribe(function (response) {
                    _this.msgs = [{ severity: 'info', summary: 'Selected Profile(s) Processed!', detail: '' }];
                    _this.getAllProfiles();
                }, function (error) { return console.log(error); });
            }
            else {
                _this.profileService.processMultiEntitiesTerms(profile.code, _this.getTermIdOrEntityName(profile.companyName), profile.processId).subscribe(function (response) {
                    _this.msgs = [{ severity: 'info', summary: 'Selected Profile(s) Processed!', detail: '' }];
                    _this.getAllProfiles();
                }, function (error) { return console.log(error); });
            }
        });
    };
    ProfileComponent.prototype.splitEntityes = function (entityName) {
        return entityName.split("$");
    };
    ProfileComponent.prototype.refreshData = function () {
        this.getAllProfiles();
        this.getAllSharedProfiles();
    };
    ProfileComponent.prototype.getTermIdOrEntityName = function (inputValue) {
        var outputValue = inputValue.substring((inputValue.indexOf("(") + 1), inputValue.indexOf(")"));
        return outputValue;
    };
    ProfileComponent.prototype.populateResponse = function (response) {
        var _this = this;
        this.listPreferences = [];
        this.preferencesList = [];
        response.forEach(function (preferences) {
            var pname = preferences.companyName.split("$");
            _this.preferencesList.push(_this.getRootRecords(preferences, pname));
            _this.listPreferences = _this.preferencesList;
        });
        this.selectedProfile = [];
    };
    ProfileComponent.prototype.getRootRecords = function (preferences, companyNames) {
        var entityName = companyNames[0];
        return {
            "data": {
                processId: preferences.processId, companyName: entityName, preferenceName: preferences.preferenceName,
                code: preferences.code, userid: preferences.userid, termName: preferences.termName.split('$')[0], resultLink: preferences.resultLink, validationStatus: preferences.validationStatus,
                researchLink: preferences.researchLink, fsqvLink: preferences.fsqvLink, cik: preferences.cik, cName: preferences.cName, quaterly: preferences.quaterly
            },
            "children": this.getChildRecord(preferences, companyNames)
        };
    };
    ProfileComponent.prototype.getChildRecord = function (preferences, companyNames) {
        var childrens = [];
        if (preferences.termName.split('$').length > 1) {
            preferences.termName.split('$').forEach(function (item, index) {
                if (index > 0) {
                    childrens.push({
                        "data": {
                            processId: preferences.processId, companyName: companyNames[0], preferenceName: preferences.preferenceName,
                            code: preferences.code, userid: preferences.userid, termName: item, resultLink: preferences.resultLink, validationStatus: preferences.validationStatus,
                            researchLink: preferences.researchLink, fsqvLink: preferences.fsqvLink, cik: preferences.cik, cName: preferences.cName, quaterly: preferences.quaterly
                        }
                    });
                }
            });
        }
        var _loop_1 = function (i) {
            preferences.termName.split('$').forEach(function (item) {
                childrens.push({
                    "data": {
                        processId: preferences.processId, companyName: companyNames[i], preferenceName: preferences.preferenceName,
                        code: preferences.code, userid: preferences.userid, termName: item, resultLink: preferences.resultLink, validationStatus: preferences.validationStatus,
                        researchLink: preferences.researchLink, fsqvLink: preferences.fsqvLink, cik: preferences.cik, cName: preferences.cName, quaterly: preferences.quaterly
                    }
                });
            });
        };
        for (var i = 1; i < companyNames.length; i++) {
            _loop_1(i);
        }
        return childrens;
    };
    ProfileComponent.prototype.closeDialog = function (value) {
        this.displayCreateModal = false;
        this.displayCreateProfileEditModal = false;
        this.getAllProfiles();
    };
    ProfileComponent.prototype.closeSharePreferencesDialog = function (isPreferenceShared) {
        this.displayShareProfileModal = false;
        if (isPreferenceShared) {
            this.refreshData();
        }
    };
    ProfileComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./profile.component.html */ "./src/app/profile/profile.component.html"),
            styles: [__webpack_require__(/*! ./profile.component.css */ "./src/app/profile/profile.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_profile_service__WEBPACK_IMPORTED_MODULE_2__["ProfileService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"], app_services_common_service__WEBPACK_IMPORTED_MODULE_7__["CommonService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"], app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__["UtilService"]])
    ], ProfileComponent);
    return ProfileComponent;
}());



/***/ }),

/***/ "./src/app/profile/profile.ts":
/*!************************************!*\
  !*** ./src/app/profile/profile.ts ***!
  \************************************/
/*! exports provided: profile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "profile", function() { return profile; });
var profile = /** @class */ (function () {
    function profile() {
    }
    return profile;
}());



/***/ }),

/***/ "./src/app/profile/share-preferences/share-preferences.component.css":
/*!***************************************************************************!*\
  !*** ./src/app/profile/share-preferences/share-preferences.component.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".modal-dialog{\r\n    position: fixed;\r\n    width: 100%;\r\n    margin: 0%;\r\n    padding-top: 10%;\r\n    padding-left: 25%;\r\n    padding-right: 25%;\r\n}\r\n.col-lg-4\r\n{\r\n    position: relative;\r\n}\r\n.form-control { width: 300px; }\r\n.mydialog {\r\n    width: 50vw;\r\n}\r\n@media screen and (max-width: 40em) {\r\n    .mydialog {\r\n        width: 75vw;\r\n    }\r\n}\r\n.modal-div{\r\n    padding: 20px !important;\r\n    margin: 20px !important;\r\n}\r\n.column1 {\r\n    float: left;\r\n    width: 30%;\r\n    text-align: right;\r\n    padding: 10px\r\n}\r\n.column2 {\r\n  float: right;\r\n  width: 70%;\r\n  text-align: left;\r\n  padding: 10px\r\n}\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvZmlsZS9zaGFyZS1wcmVmZXJlbmNlcy9zaGFyZS1wcmVmZXJlbmNlcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZUFBZTtJQUNmLFdBQVc7SUFDWCxVQUFVO0lBQ1YsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7QUFDQTs7SUFFSSxrQkFBa0I7QUFDdEI7QUFDQSxnQkFBZ0IsWUFBWSxFQUFFO0FBRTlCO0lBQ0ksV0FBVztBQUNmO0FBRUE7SUFDSTtRQUNJLFdBQVc7SUFDZjtBQUNKO0FBQ0E7SUFDSSx3QkFBd0I7SUFDeEIsdUJBQXVCO0FBQzNCO0FBRUE7SUFDSSxXQUFXO0lBQ1gsVUFBVTtJQUNWLGlCQUFpQjtJQUNqQjtBQUNKO0FBQ0E7RUFDRSxZQUFZO0VBQ1osVUFBVTtFQUNWLGdCQUFnQjtFQUNoQjtBQUNGIiwiZmlsZSI6InNyYy9hcHAvcHJvZmlsZS9zaGFyZS1wcmVmZXJlbmNlcy9zaGFyZS1wcmVmZXJlbmNlcy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1vZGFsLWRpYWxvZ3tcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luOiAwJTtcclxuICAgIHBhZGRpbmctdG9wOiAxMCU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDI1JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDI1JTtcclxufVxyXG4uY29sLWxnLTRcclxue1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcbi5mb3JtLWNvbnRyb2wgeyB3aWR0aDogMzAwcHg7IH1cclxuXHJcbi5teWRpYWxvZyB7XHJcbiAgICB3aWR0aDogNTB2dztcclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDBlbSkge1xyXG4gICAgLm15ZGlhbG9nIHtcclxuICAgICAgICB3aWR0aDogNzV2dztcclxuICAgIH1cclxufVxyXG4ubW9kYWwtZGl2e1xyXG4gICAgcGFkZGluZzogMjBweCAhaW1wb3J0YW50O1xyXG4gICAgbWFyZ2luOiAyMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5jb2x1bW4xIHtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgd2lkdGg6IDMwJTtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgcGFkZGluZzogMTBweFxyXG59XHJcbi5jb2x1bW4yIHtcclxuICBmbG9hdDogcmlnaHQ7XHJcbiAgd2lkdGg6IDcwJTtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIHBhZGRpbmc6IDEwcHhcclxufVxyXG5cclxuIl19 */"

/***/ }),

/***/ "./src/app/profile/share-preferences/share-preferences.component.html":
/*!****************************************************************************!*\
  !*** ./src/app/profile/share-preferences/share-preferences.component.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"preferenceForm\" *ngIf=\"preferenceForm\">\r\n  <div class=\"modal-div\">\r\n    <div class=\"form-group row\">\r\n      <label for=\"userName\" class=\"col-lg-3 form-control-label\">User Id(s)</label>\r\n      <div class=\"col-xs-8\">\r\n        <input type=\"text\" class=\"form-control\" [ngClass]=\"{ 'is-invalid':preferenceForm.controls.userName.errors}\"\r\n          style=\"width: 400px !important;display:inline\" formControlName=\"userName\">\r\n      </div>\r\n    </div>\r\n    <div class=\"form-group row\">\r\n\r\n      <label for=\"shareToEveryone\" class=\"col-lg-3 form-control-label\"></label>\r\n<!--\r\n      <div class=\"col-xs-8\">\r\n        <p-checkbox formControlName=\"shareToEveryone\" binary=\"true\" label=\"Everyone\">\r\n        </p-checkbox>\r\n      </div>\r\n-->\r\n\r\n    </div>\r\n\r\n    <div class=\"form-group row pull-right \">\r\n      <button icon=\"pi pi-check\" label=\"Share\" style=\"margin:3px \" class=\"create-profile\" type=\"button\"\r\n        (click)=\"shareSharedPreference()\" [disabled]=\"!(preferenceForm.valid)\" pButton></button>\r\n      <button icon=\"pi pi-times\" (click)=\"closeDialog()\" style=\"margin:3px\" label=\"Cancel\" type=\"button\" pButton\r\n        class=\"create-profile\"></button>\r\n    </div>\r\n  </div>\r\n</form>\r\n"

/***/ }),

/***/ "./src/app/profile/share-preferences/share-preferences.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/profile/share-preferences/share-preferences.component.ts ***!
  \**************************************************************************/
/*! exports provided: SharePreferencesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharePreferencesComponent", function() { return SharePreferencesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/utils/utilService */ "./src/app/utils/utilService.ts");






var SharePreferencesComponent = /** @class */ (function () {
    function SharePreferencesComponent(profileService, router, builder, utilService) {
        this.profileService = profileService;
        this.router = router;
        this.builder = builder;
        this.utilService = utilService;
        this.listOfUsersToShareEveryone = [
            'chadav',
            'sharmaan'
        ];
        this.closeDialogBox = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    SharePreferencesComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.preferenceForm = this.builder.group({
            userName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]],
            shareToEveryone: [''],
        });
        this.preferenceForm.controls.shareToEveryone.valueChanges.subscribe(function (value) {
            if (value) {
                _this.preferenceForm.controls.userName.clearValidators();
                _this.preferenceForm.controls.userName.reset();
                _this.preferenceForm.controls.userName.setErrors(null);
                _this.preferenceForm.updateValueAndValidity();
            }
            else {
                _this.preferenceForm.controls.userName.setValidators([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]);
                _this.preferenceForm.controls.userName.setErrors({ 'required': true });
                _this.preferenceForm.updateValueAndValidity();
            }
        });
    };
    SharePreferencesComponent.prototype.shareSharedPreference = function () {
        var _this = this;
        var sharedItemsCount = 0;
        var updatedSelectedProfile = [];
        this.selectedProfile.forEach(function (item) {
            if (updatedSelectedProfile.find(function (profileData) { return profileData.data.preferenceName === item.data.preferenceName; })) {
                updatedSelectedProfile.find(function (profileData) { return profileData.data.preferenceName === item.data.preferenceName; }).data.companyName = updatedSelectedProfile.find(function (profileData) { return profileData.data.preferenceName === item.data.preferenceName; }).data.companyName + '$' + item.data.companyName;
            }
            else {
                updatedSelectedProfile.push(item);
            }
        });
        updatedSelectedProfile.forEach(function (item) {
            var reqData = [];
            /*     if (this.preferenceForm.controls.userName) {
                   this.listOfUsersToShareEveryone.forEach(user => {
                     reqData.push({
                       termName: item.data.termName,
                       companyName: item.data.companyName,
                       preName: item.data.preferenceName + ' (' + item.data.userid + ')',
                       userid: user
                     });
                   });
                 } else {  */
            _this.preferenceForm.value.userName.split(';').forEach(function (user) {
                reqData.push({
                    termName: item.data.termName,
                    companyName: item.data.companyName,
                    preName: item.data.preferenceName + ' (' + item.data.userid + ')',
                    userid: user
                });
            });
            //    }
            _this.profileService.saveSharedPreference(item.data.code, item.data.userid, reqData).subscribe(function (response) {
                sharedItemsCount = sharedItemsCount + 1;
                if (sharedItemsCount === updatedSelectedProfile.length) {
                    _this.closeDialogBox.emit(true);
                }
            }, function (error) { return console.log(error); });
        });
    };
    SharePreferencesComponent.prototype.closeDialog = function () {
        this.closeDialogBox.emit(false);
    };
    SharePreferencesComponent.prototype.ngOnDestroy = function () { };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], SharePreferencesComponent.prototype, "selectedProfile", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], SharePreferencesComponent.prototype, "closeDialogBox", void 0);
    SharePreferencesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-share-preferences',
            template: __webpack_require__(/*! ./share-preferences.component.html */ "./src/app/profile/share-preferences/share-preferences.component.html"),
            styles: [__webpack_require__(/*! ./share-preferences.component.css */ "./src/app/profile/share-preferences/share-preferences.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_profile_service__WEBPACK_IMPORTED_MODULE_3__["ProfileService"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"], app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__["UtilService"]])
    ], SharePreferencesComponent);
    return SharePreferencesComponent;
}());



/***/ }),

/***/ "./src/app/resolvers/completecompanylist-resolver.service.ts":
/*!*******************************************************************!*\
  !*** ./src/app/resolvers/completecompanylist-resolver.service.ts ***!
  \*******************************************************************/
/*! exports provided: CompleteCompanylistResolverService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompleteCompanylistResolverService", function() { return CompleteCompanylistResolverService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utilService */ "./src/app/utils/utilService.ts");



var CompleteCompanylistResolverService = /** @class */ (function () {
    function CompleteCompanylistResolverService(utilService) {
        this.utilService = utilService;
    }
    CompleteCompanylistResolverService.prototype.resolve = function () {
        if (this.completeCompanyList) {
            return this.getCompleteCompanyList();
        }
        else {
            this.completeCompanyList = this.utilService.getCompleteCompanyList();
            return this.completeCompanyList;
        }
    };
    CompleteCompanylistResolverService.prototype.getCompleteCompanyList = function () {
        return this.completeCompanyList;
    };
    CompleteCompanylistResolverService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utils_utilService__WEBPACK_IMPORTED_MODULE_2__["UtilService"]])
    ], CompleteCompanylistResolverService);
    return CompleteCompanylistResolverService;
}());



/***/ }),

/***/ "./src/app/resolvers/termlist-resolver.service.ts":
/*!********************************************************!*\
  !*** ./src/app/resolvers/termlist-resolver.service.ts ***!
  \********************************************************/
/*! exports provided: TermlistResolverService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TermlistResolverService", function() { return TermlistResolverService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _utils_utilService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utilService */ "./src/app/utils/utilService.ts");



var TermlistResolverService = /** @class */ (function () {
    function TermlistResolverService(utilService) {
        this.utilService = utilService;
    }
    TermlistResolverService.prototype.resolve = function () {
        if (this.termRuleList) {
            return this.getTermRuleList();
        }
        else {
            this.termRuleList = this.utilService.getTermRuleList();
            return this.termRuleList;
        }
    };
    TermlistResolverService.prototype.getTermRuleList = function () {
        return this.termRuleList;
    };
    TermlistResolverService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_utils_utilService__WEBPACK_IMPORTED_MODULE_2__["UtilService"]])
    ], TermlistResolverService);
    return TermlistResolverService;
}());



/***/ }),

/***/ "./src/app/resolvers/termrulecategorylist-resolver.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/resolvers/termrulecategorylist-resolver.service.ts ***!
  \********************************************************************/
/*! exports provided: TermRuleCategoryListResolverService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TermRuleCategoryListResolverService", function() { return TermRuleCategoryListResolverService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _home_homeService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../home/homeService */ "./src/app/home/homeService.ts");



var TermRuleCategoryListResolverService = /** @class */ (function () {
    function TermRuleCategoryListResolverService(homeService) {
        this.homeService = homeService;
    }
    TermRuleCategoryListResolverService.prototype.resolve = function () {
        if (this.termRuleCategoryList) {
            return this.getTermRuleCategoryList();
        }
        else {
            this.termRuleCategoryList = this.homeService.getTermRuleCategoryList();
            return this.termRuleCategoryList;
        }
    };
    TermRuleCategoryListResolverService.prototype.getTermRuleCategoryList = function () {
        return this.termRuleCategoryList;
    };
    TermRuleCategoryListResolverService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_home_homeService__WEBPACK_IMPORTED_MODULE_2__["HomeService"]])
    ], TermRuleCategoryListResolverService);
    return TermRuleCategoryListResolverService;
}());



/***/ }),

/***/ "./src/app/services/common.service.ts":
/*!********************************************!*\
  !*** ./src/app/services/common.service.ts ***!
  \********************************************/
/*! exports provided: CommonService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonService", function() { return CommonService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! primeng/components/common/messageservice */ "./node_modules/primeng/components/common/messageservice.js");
/* harmony import */ var primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");






var CommonService = /** @class */ (function () {
    function CommonService(formBuilder, primeNgMessageService) {
        this.formBuilder = formBuilder;
        this.primeNgMessageService = primeNgMessageService;
        this.messages = [];
    }
    CommonService_1 = CommonService;
    CommonService.setTourGuideStart = function (value) {
        CommonService_1.isTourGuideStart.next(value);
    };
    CommonService.setExportTabIndex = function (value) {
        CommonService_1.exportTabIndex.next(value);
    };
    CommonService.emitsharedPreferenceNotificationEvent = function (number) {
        CommonService_1.sharedPreferenceNotification.emit(number);
    };
    CommonService.systemErrorMsgEvent = function (errorMsg) {
        CommonService_1.systemErrorMsgEventEmitter.emit(errorMsg);
    };
    CommonService.progressSpinnerEvent = function (showOrHideFlag) {
        CommonService_1.progressSpinnerEventEmitter.emit(showOrHideFlag);
    };
    CommonService.getValidLength = function (formValueArray) {
        var length = 0;
        formValueArray.forEach(function (form) {
            if (form.uiAction !== 'delete') {
                length++;
            }
        });
        return length;
    };
    CommonService.padNumber = function (element, length) {
        var elementString = element.toString();
        if (elementString.length === length) {
            elementString = '0' + element;
        }
        return elementString;
    };
    CommonService.convertToCSV = function (objArray) {
        var array = typeof objArray !== 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (array[i].hasOwnProperty(index)) {
                    if (line !== '') {
                        line += ',';
                    }
                    line += array[i][index];
                }
            }
            str += line + '\r\n';
        }
        return str;
    };
    CommonService.exportCSVFile = function (headers, items, fileTitle) {
        if (headers) {
            items.unshift(headers);
        }
        var jsonObject = JSON.stringify(items);
        var csv = this.convertToCSV(jsonObject);
        var exportedFilename = fileTitle + '.csv' || false;
        var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, exportedFilename);
        }
        else {
            var link = document.createElement('a');
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', exportedFilename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    };
    CommonService.systemErrorHandler = function (processMsg, err) {
        CommonService_1.progressSpinnerEvent(false);
        var customErrorMessage = 'Sorry, something went wrong with the network connection. '
            + processMsg + '. Please try again later. ' +
            'If you continue to get this error, please contact Tech Support at 1-800-952-8889.';
        CommonService_1.systemErrorMsgEvent(customErrorMessage);
        console.error(err);
    };
    CommonService.convertArrayToOptionList = function (arrayOfStrings) {
        var optionsList = [];
        arrayOfStrings.forEach(function (entry) {
            var optionEntry = { label: entry, value: entry };
            optionsList.push(optionEntry);
        });
        return optionsList;
    };
    CommonService.mergeArrays = function (existingArray, newEntriesArray, placement, currentIndex) {
        var selectedIndex = (placement === 'After') ? currentIndex : currentIndex - 1;
        existingArray = lodash__WEBPACK_IMPORTED_MODULE_4__["cloneDeep"](existingArray.splice.apply(existingArray, [selectedIndex, 0].concat(newEntriesArray)));
    };
    CommonService.compareDate = function (arg1, arg2) {
        var date1 = new Date(arg1);
        var date2 = new Date(arg2);
        date1.setHours(12, 0, 0, 0);
        date2.setHours(12, 0, 0, 0);
        var sameDay = date1.getTime() === date2.getTime();
        if (sameDay) {
            return 0;
        }
        if (date1 > date2) {
            return 1;
        }
        if (date1 < date2) {
            return -1;
        }
    };
    CommonService.extract = function (_a) {
        var beg = _a[0], end = _a[1];
        var matcher = new RegExp(beg + "(.*?)" + end, 'gm');
        var normalise = function (str) { return str.slice(beg.length, end.length * -1); };
        return function (str) {
            return str.match(matcher).map(normalise);
        };
    };
    CommonService.prototype.isViewOnly = function () {
        return false;
    };
    CommonService.prototype.cloneFormGroup = function (control) {
        var _this = this;
        if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]) {
            return this.formBuilder.control(control.value);
        }
        else if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]) {
            var copy_1 = this.formBuilder.group({});
            Object.keys(control.getRawValue()).forEach(function (key) {
                copy_1.addControl(key, _this.cloneFormGroup(control.controls[key]));
            });
            return copy_1;
        }
        else if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormArray"]) {
            var copy_2 = this.formBuilder.array([]);
            control.controls.forEach(function (controlEntry) {
                copy_2.push(_this.cloneFormGroup(controlEntry));
            });
            return copy_2;
        }
    };
    CommonService.prototype.getNextValidIndex = function (formValueArray) {
        var currentIndex = 0;
        if (formValueArray.length > 0) {
            currentIndex = formValueArray.length - 1;
            while (formValueArray[currentIndex].uiAction === 'delete' && currentIndex > 0) {
                currentIndex = currentIndex - 1;
            }
        }
        return currentIndex;
    };
    CommonService.prototype.getAllErrors = function (form) {
        var _this = this;
        var hasError = false;
        var result = Object.keys(form.controls).reduce(function (errorObject, key) {
            var control = form.get(key);
            var errors;
            if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"] || control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormArray"]) {
                if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormArray"] && control.controls.length === 0) {
                    // Handling error for empty form array (when no offers are added to form)
                    errors = control.errors;
                }
                else if (control instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormArray"]) {
                    var formArrayError = {};
                    if (control.errors) {
                        formArrayError.arrError = control.errors;
                    }
                    var arrEntriesErrors = _this.getAllErrors(control);
                    if (arrEntriesErrors) {
                        formArrayError.arrEntriesErrors = arrEntriesErrors;
                    }
                    if (formArrayError.arrError || formArrayError.arrEntriesErrors) {
                        errors = formArrayError;
                    }
                }
                else {
                    errors = _this.getAllErrors(control);
                }
            }
            else {
                errors = control.errors;
            }
            if (errors) {
                errorObject[key] = errors;
                hasError = true;
            }
            return errorObject;
        }, {});
        return hasError ? result : null;
    };
    CommonService.prototype.showGrowlConfirmMessage = function (message) {
        this.primeNgMessageService.clear();
        this.primeNgMessageService.add(message);
    };
    var CommonService_1;
    CommonService.logOutEventEmitter = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    CommonService.systemErrorMsgEventEmitter = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    CommonService.progressSpinnerEventEmitter = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    CommonService.stringBetweenCurlyBracesExtractor = CommonService_1.extract(['{', '}']);
    CommonService.sharedPreferenceNotification = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    CommonService.isTourGuideStart = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
    CommonService.exportTabIndex = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
    CommonService = CommonService_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"], primeng_components_common_messageservice__WEBPACK_IMPORTED_MODULE_3__["MessageService"]])
    ], CommonService);
    return CommonService;
}());



/***/ }),

/***/ "./src/app/services/login.service.ts":
/*!*******************************************!*\
  !*** ./src/app/services/login.service.ts ***!
  \*******************************************/
/*! exports provided: LoginService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginService", function() { return LoginService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");





var LoginService = /** @class */ (function () {
    function LoginService(http) {
        this.http = http;
        this.MAXDSAPPLOGINURL = "/api/isValidUser";
        this.userFullName = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"](this.fullname);
        this.currentUserSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"](JSON.parse(localStorage.getItem('currentUser')));
        this.currentUser = this.currentUserSubject.asObservable();
    }
    Object.defineProperty(LoginService.prototype, "currentUserValue", {
        get: function () {
            return this.currentUserSubject.value;
        },
        enumerable: true,
        configurable: true
    });
    LoginService.prototype.loginApp = function (username, password) {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("access-control-allow-origin", "*");
        var body = JSON.stringify({ username: username, password: password });
        return this.http.post("" + this.MAXDSAPPLOGINURL, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (response) {
            var data = response.json();
            _this.fullname = data.resultObject.fullUserName;
            localStorage.setItem("userName", data.resultObject.fullUserName);
            localStorage.setItem("userid", data.resultObject.userid);
            localStorage.setItem("userEmail", data.resultObject.email);
            _this.userFullName = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"](_this.fullname);
            localStorage.setItem('currentUser', JSON.stringify(_this.fullname));
            localStorage.setItem('user', JSON.stringify(data.resultObject.userid));
            // this.currentUserSubject.next(this.fullname);
            localStorage.setItem("userFullName", data.resultObject.fullUserName);
            return data;
        }));
    };
    LoginService.prototype.logout = function () {
        // remove user from local storage to log user out
        localStorage.removeItem('currentUser');
        localStorage.removeItem('user');
        localStorage.clear();
        sessionStorage.clear();
        this.currentUserSubject = null;
        // this.currentUserValue = null;
    };
    LoginService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"]])
    ], LoginService);
    return LoginService;
}());



/***/ }),

/***/ "./src/app/services/profile.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/profile.service.ts ***!
  \*********************************************/
/*! exports provided: ProfileService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileService", function() { return ProfileService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var app_profile_profile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/profile/profile */ "./src/app/profile/profile.ts");
/* harmony import */ var _login_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./login.service */ "./src/app/services/login.service.ts");






var ProfileService = /** @class */ (function () {
    function ProfileService(http, login) {
        this.http = http;
        this.login = login;
        // private TERMNAMESURL: string = "https://localhost:18081/api/termNamesListApi";
        // private ENTITIESLISTURL: string = "https://localhost:18081/EntitiesList";
        // private LISTPREFERENCESURL: string = "https://localhost:18081/listPreferences";
        // private SAVEPROFILEURL: string = "https://localhost:18081/savePreferences";
        // private DELETEPREFERENCESURL: string = "https://localhost:18081/deletePreferences";
        // private PROCESSPREFERENCESURL: string = "https://localhost:18081/api/TermRule/ProcessRuleForEntity/";
        // private CLEARPREFERENCESURL: string = "https://localhost:18081/clearPreferences";
        // private PROCESSALLPREFERENCESURL: string = "https://localhost:18081/processAllTermRules"
        //  private TERMMANAGERRESULTURL: string = "https://localhost:18081/api/TermResultsFor"
        //  private UPDATEDPROFILEURL: string = "https://localhost:18081/updateProfile"
        //  private PROCESSMULTIENTITIESPREFERENCESURL: string = "https://localhost:18081/processMultiEntitiesTermRules"
        //  private SHOWRESOLVEDDATAURL: string = "https://localhost:18081/api/MappedEntitiesForCriteria";
        this.TERMNAMESURL = "/api/termNamesListApi";
        this.ENTITIESLISTURL = "/EntitiesList";
        this.LISTPREFERENCESURL = "/listPreferences";
        this.LISTSHAREDPREFERENCESURL = "/listSharedPreferences";
        this.SAVEPROFILEURL = "/savePreferences";
        this.SAVESHAREDPREFERENCES = "/saveSharedPreferences";
        this.DELETEPREFERENCESURL = "/deletePreferences";
        this.ACCEPTSHAREDPREFERENCESURL = "/acceptSharedPreferences";
        this.DELETESHAREDPREFERENCESURL = "/deleteSharedPreferences";
        this.PROCESSPREFERENCESURL = "/api/TermRule/ProcessRuleForEntity/";
        this.CLEARPREFERENCESURL = "/clearPreferences";
        this.PROCESSALLPREFERENCESURL = "/processAllTermRules";
        this.TERMMANAGERRESULTURL = "/api/TermResultsFor";
        this.UPDATEDPROFILEURL = "/updateProfile";
        this.PROCESSMULTIENTITIESPREFERENCESURL = "/processMultiEntitiesTermRules";
        this.SHOWRESOLVEDDATAURL = "/api/MappedEntitiesForCriteria"; //api/MappedEntitiesForCriteria
        //private SHOWRESOLVEDDATAURL: string = "/api/UnMappedEntitiesForCriteria";
        //for Admin page
        this.REPORTDATA = "/api/getReportData";
        this.profile = new app_profile_profile__WEBPACK_IMPORTED_MODULE_4__["profile"]();
        this.updateProfile = new app_profile_profile__WEBPACK_IMPORTED_MODULE_4__["profile"]();
    }
    ProfileService.prototype.processAllTerms = function (termIds) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("access-control-allow-origin", "*");
        var userid = localStorage.getItem("userid");
        return this.http.post(this.PROCESSALLPREFERENCESURL + "/" + userid, termIds, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response;
            return data;
        }));
    };
    ProfileService.prototype.processTerms = function (termId, entityId, processId) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ termId: termId, entityId: entityId, processId: processId });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.put("" + this.PROCESSPREFERENCESURL, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    ProfileService.prototype.processMultiEntitiesTerms = function (termId, entityId, processId) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ termId: termId, entityId: entityId, processId: processId, userid: localStorage.getItem("userid") });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.post("" + this.PROCESSMULTIENTITIESPREFERENCESURL, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    ProfileService.prototype.getTermMngrResults = function (termName, entityId) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        return this.http.get("" + (this.TERMMANAGERRESULTURL + "/" + termName + "/" + entityId), {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) { return data.json(); }));
    };
    ProfileService.prototype.getTermNames = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        return this.http.get("" + this.TERMNAMESURL, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) { return data.json(); }));
    };
    ProfileService.prototype.getCoompanyNames = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        return this.http.get(this.ENTITIESLISTURL, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.getAllProfiles = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        var userid = localStorage.getItem("userid");
        return this.http.get(this.LISTPREFERENCESURL + "/" + userid, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.getAllSharedProfiles = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        var userid = localStorage.getItem("userid");
        return this.http.get(this.LISTSHAREDPREFERENCESURL + "/" + userid, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.savePreference = function (termName, companyName, preName) {
        console.log(companyName + termName + preName);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        this.profile.termName = termName;
        this.profile.companyName = companyName;
        this.profile.preName = preName;
        this.profile.userid = localStorage.getItem("userid");
        return this.http.post(this.SAVEPROFILEURL, this.profile, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.saveSharedPreference = function (code, userid, reqData) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        return this.http.post(this.SAVESHAREDPREFERENCES + "/" + code + "/" + userid, reqData, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.updatePreference = function (termName, companyName, preName, processId) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        this.updateProfile.termName = termName;
        this.updateProfile.companyName = companyName;
        this.updateProfile.preName = preName;
        this.updateProfile.profileId = processId;
        this.updateProfile.userid = localStorage.getItem("userid");
        return this.http.post(this.UPDATEDPROFILEURL, this.updateProfile, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.deletePrefernces = function (preferncesIds) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        var userid = localStorage.getItem("userid");
        return this.http.post(this.DELETEPREFERENCESURL + "/" + userid, preferncesIds, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.deleteSharedPrefernces = function (preferncesIds) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        var userid = localStorage.getItem("userid");
        return this.http.post(this.DELETESHAREDPREFERENCESURL + "/" + userid, preferncesIds, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.acceptSharedPrefernces = function (rowData) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        var userid = localStorage.getItem("userid");
        return this.http.post(this.ACCEPTSHAREDPREFERENCESURL + "/" + userid + "/" + rowData.preferenceName + "/" + rowData.code, [rowData.processId], { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.clearPrefernces = function (preferncesIds) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        var userid = localStorage.getItem("userid");
        return this.http.post(this.CLEARPREFERENCESURL + "/" + userid, preferncesIds, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ProfileService.prototype.showReslovedData = function (mappedEntity) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("Access-Control-Allow-Origin", "*");
        return this.http.put(this.SHOWRESOLVEDDATAURL, mappedEntity, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    // For Admin page
    ProfileService.prototype.getReportData = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        return this.http.get("" + this.REPORTDATA, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) { return data.json(); }));
    };
    ProfileService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"], _login_service__WEBPACK_IMPORTED_MODULE_5__["LoginService"]])
    ], ProfileService);
    return ProfileService;
}());



/***/ }),

/***/ "./src/app/status/status.css":
/*!***********************************!*\
  !*** ./src/app/status/status.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".ui-paginator {\r\n\ttext-align: right ! important;\r\n}\r\n\r\nui-paginator-top {\r\n\ttext-align: right ! important;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3RhdHVzL3N0YXR1cy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Q0FDQyw2QkFBNkI7QUFDOUI7O0FBRUE7Q0FDQyw2QkFBNkI7QUFDOUIiLCJmaWxlIjoic3JjL2FwcC9zdGF0dXMvc3RhdHVzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi51aS1wYWdpbmF0b3Ige1xyXG5cdHRleHQtYWxpZ246IHJpZ2h0ICEgaW1wb3J0YW50O1xyXG59XHJcblxyXG51aS1wYWdpbmF0b3ItdG9wIHtcclxuXHR0ZXh0LWFsaWduOiByaWdodCAhIGltcG9ydGFudDtcclxufSJdfQ== */"

/***/ }),

/***/ "./src/app/status/status.html":
/*!************************************!*\
  !*** ./src/app/status/status.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-confirmDialog [style]=\"{width: '50vw'}\" [baseZIndex]=\"10000\"></p-confirmDialog>\r\n<div>\r\n    <div style=\"margin-bottom: 15px !important;\">\r\n        <button pButton type=\"button\" label=\"Refresh Status\" icon=\"pi pi-refresh\" style=\"margin-bottom: 5px;\"\r\n            class=\"ui-button-rounded ui-button-success pull-left\" (click)=\"refreshLoadStatus()\"\r\n            joyrideStep=\"refreshStatus\" title=\"Refresh Status\"\r\n            text=\"By clicking the “Refresh Status” button, the user will refresh the processing status of the displayed Term ID’s\"></button>\r\n        &nbsp;&nbsp;\r\n\r\n        <button pButton type=\"button\" label=\"Cancel Processing\" icon=\"pi pi-times\" tyle=\"margin-bottom: 5px;\"\r\n            class=\"ui-button-rounded ui-button-danger pull-left\" (click)=\"cancelProcessing()\"\r\n            joyrideStep=\"cancelProcessing\" title=\"Cancel Processing\"\r\n            text=\"By clicking the “Cancel Processing” button, the user will cancel any currently processing terms.\"></button>\r\n\r\n    </div>\r\n    <div style=\"padding: 10px;\">\r\n        <p-table #statusTable [columns]=\"statusCols\" [value]=\"statusNames\" [responsive]=\" true\"\r\n            [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\" columnResizeMode=\"expand\"\r\n            [reorderableColumns]=\"true\" selectionMode=\"single\" [(selection)]=\"termId\" dataKey=\"termId\"\r\n            (onRowSelect)=\"onRowClick($event)\" (onRowUnselect)=\"onRowUnClick($event)\" p-dataTable\r\n            exportFilename=\"statusData\" paginatorPosition=\"top\" [paginator]=\"true\" [rows]=\"10\"\r\n            paginatorTemplate=\"{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {Exporters}\"\r\n            [showCurrentPageReport]=\"true\" (onPage)=\"pagenation($event)\" (onFilter)=\"updatePagenationCount($event)\"\r\n            currentPageReportTemplate=\"Showing {{first}} of{{total}}\">\r\n\r\n            <!--<ng-template pTemplate=\"caption\" style=\"height: 50px !important;\">\r\n            Total number of Records: {{statusTable.totalRecords}}\r\n            currentPageReportTemplate=\"{first} to {last} of {totalRecords}\"\r\n            <p-paginator [rows]=\"10\" totalRecords=\"100\" paginatorPosition=\"top\" (onPageChange)=\"paginate($event)\"\r\n                [showCurrentPageReport]=\"true\" currentPageReportTemplate=\"{first} to {last} of {totalRecords}\">\r\n            </p-paginator>\r\n\r\n        </ng-template>-->\r\n\r\n            <ng-template pTemplate=\"header\" let-columns>\r\n                <tr>\r\n                    <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn [pSortableColumn]=\"col.field\">\r\n                        <div pTooltip=\"Click to sort {{col.header}}\">\r\n                            {{col.header}}\r\n                            <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                                ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                        </div>\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                        <div *ngIf=\"col.field !== ''\">\r\n                            <input *ngSwitchCase=\"col.field\" pInputText type=\"text\" placeholder=\"Search\"\r\n                                [value]=\"statusTable.filters[col.field] ? statusTable.filters[col.field].value : ''\"\r\n                                (input)=\"statusTable.filter($event.target.value, col.field, col.filterMatchMode); \r\n                            onFilter($event.target.value, col.field, col.filterMatchMode);updatePagenationCount($event)\"\r\n                                style=\"width: 150px\">\r\n                        </div>\r\n                    </th>\r\n                </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-index=\"rowIndex\">\r\n                <tr [pSelectableRow]=\"rowData\">\r\n\r\n                    <td *ngFor=\"let col of columns\" style=\"word-break:break-all\">\r\n                        <span *ngIf=\"col.header !=='Last Modified'\" pTooltip=\"{{rowData[col.field] }}\">\r\n                            {{rowData[col.field]}}</span>\r\n                        <span *ngIf=\"col.header =='Last Modified'\"\r\n                            pTooltip=\"{{rowData[col.field] | date :'h:mm:ss a'}}\">\r\n                            {{rowData[col.field] | date :'MM/dd/yyyy HH:mm:ss'}} </span>\r\n\r\n                    </td>\r\n                </tr>\r\n            </ng-template>\r\n\r\n        </p-table>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/status/statusComponent.ts":
/*!*******************************************!*\
  !*** ./src/app/status/statusComponent.ts ***!
  \*******************************************/
/*! exports provided: StatusComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StatusComponent", function() { return StatusComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _statusService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./statusService */ "./src/app/status/statusService.ts");
/* harmony import */ var _domain_status__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../domain/status */ "./src/app/domain/status.ts");
/* harmony import */ var app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/utils/utilService */ "./src/app/utils/utilService.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_6__);







var StatusComponent = /** @class */ (function () {
    function StatusComponent(statusService, router, status, utilService, confirmationService) {
        this.statusService = statusService;
        this.router = router;
        this.status = status;
        this.utilService = utilService;
        this.confirmationService = confirmationService;
        this.subscription = [];
        this.statusNumber = 0;
        this.first = 0;
        this.total = 0;
        this.row = 10;
        this.msgs = [];
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
    }
    StatusComponent.prototype.cancelProcessing = function () {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure you want to cancel all pending processing items?',
            header: 'Process Term',
            icon: 'pi pi-exclamation-triangle',
            accept: function () {
                _this.msgs = [];
                _this.msgs = [{ severity: 'info', summary: 'Cancelling Process All Terms', detail: '' }];
                _this.utilService.cancelProcessing().subscribe(function (response) {
                    if (response) {
                        _this.msgs = [{ severity: 'info', summary: 'All pending processing has been canceled successfully', detail: '' }];
                    }
                });
            },
            reject: function () {
            }
        });
    };
    StatusComponent.prototype.pagenation = function (value) {
        console.log(value);
        var initialCount = value.rows;
        value.first = (value.first + initialCount);
        this.first = value.first;
        this.row = (this.statusNames.length - value.first);
        this.total = this.statusNames.length;
    };
    StatusComponent.prototype.updatePagenationCount = function (event) {
        //this.statusNames.length; = 
        if (event.filteredValue != this.statusNames.length) {
            var data = event.filteredValue;
            console.log(data.length + " :: " + this.statusNames.length);
            this.first = data.length > 10 ? 10 : data.length;
            this.row = data.length > 10 ? (data.length / 10) : data.length;
            this.total = data.length;
        }
    };
    StatusComponent.prototype.ngOnInit = function () {
        var _this = this;
        console.log('statusServiceComponent : calling ngOnInit...');
        this.statusCols = this.status.statusCols();
        this.interval = setInterval(function () {
            _this.loadProcessStatus();
        }, 10000);
        this.loadProcessStatus();
    };
    StatusComponent.prototype.refreshLoadStatus = function () {
        this.loadProcessStatus();
    };
    StatusComponent.prototype.loadProcessStatus = function () {
        var _this = this;
        this.statusService.loadProcessStatus().subscribe(function (response) {
            _this.statusNames = [];
            response.content.forEach(function (status) {
                _this.statusNames.push({
                    termId: status.termId, userName: status.userName, logStatus: status.logStatus, noOfEntitiesBeingProcessed: status.noOfEntitiesBeingProcessed,
                    lastModified: status.lastModified, processingTimeInSec: status.processingTimeInSec, description: status.description
                });
            });
            console.log(response);
            _this.first = 10;
            _this.row = (_this.statusNames.length - _this.first);
            _this.total = _this.statusNames.length;
        });
    };
    StatusComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
        if (this.interval) {
            clearInterval(this.interval);
        }
    };
    StatusComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./status.html */ "./src/app/status/status.html"),
            styles: [__webpack_require__(/*! ./status.css */ "./src/app/status/status.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_statusService__WEBPACK_IMPORTED_MODULE_3__["StatusService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _domain_status__WEBPACK_IMPORTED_MODULE_4__["Status"], app_utils_utilService__WEBPACK_IMPORTED_MODULE_5__["UtilService"], primeng_api__WEBPACK_IMPORTED_MODULE_6__["ConfirmationService"]])
    ], StatusComponent);
    return StatusComponent;
}());



/***/ }),

/***/ "./src/app/status/statusService.ts":
/*!*****************************************!*\
  !*** ./src/app/status/statusService.ts ***!
  \*****************************************/
/*! exports provided: StatusService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StatusService", function() { return StatusService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");





var StatusService = /** @class */ (function () {
    function StatusService(http) {
        this.http = http;
        // private PROCESSSTATUSURL: string = https://localhost:18081/api/ProcessingLogList/1000
        this.PROCESSSTATUSURL = "/api/ProcessingLogList/1000";
    }
    StatusService.prototype.loadProcessStatus = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        return this.http.get("" + this.PROCESSSTATUSURL, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    StatusService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"]])
    ], StatusService);
    return StatusService;
}());



/***/ }),

/***/ "./src/app/submitFeedback/submitFeedback.html":
/*!****************************************************!*\
  !*** ./src/app/submitFeedback/submitFeedback.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n<form class=\"form-horizontal\">\r\n\r\n    <div class=\"alert alert-success\" role=\"alert\" *ngIf=\"isFeedbackSubmitted\">\r\n        Thank you for your Feedback\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label for=\"issueType\" class=\"col-sm-1 control-label\">Type</label>\r\n        <div class=\"col-sm-3\">\r\n            <select id=\"issueType\" class=\"form-control btn btn-default dropdown-toggel\" [(ngModel)]=\"feedBackObj.issue\"\r\n                name=\"issue\" joyrideStep=\"type\" title=\"Type\" [stepContent]=\"typeContent\">\r\n                <option selected> Issue </option>\r\n                <option> feature request</option>\r\n                <option> Others (eg : User Interface)</option>\r\n\r\n            </select>\r\n        </div>\r\n\r\n        <label for=\"category\" class=\"col-sm-1 control-label\">category</label>\r\n        <div class=\"col-sm-3\">\r\n            <select id=\"category\" class=\"form-control btn btn-default dropdown-toggel\"\r\n                [(ngModel)]=\"feedBackObj.category\" name=\"category\" joyrideStep=\"category\" title=\"Category\"\r\n                [stepContent]=\"categoryContent\">\r\n                <option selected> Home</option>\r\n                <option> Export</option>\r\n                <option> Accuracy test</option>\r\n                <option>Process All Terms</option>\r\n                <option selected> Manage Term Maps</option>\r\n                <option> Status</option>\r\n                <option>Administration</option>\r\n                <option selected> Derivation Trail</option>\r\n                <option> Profile</option>\r\n                <option> Processing Status</option>\r\n                <option>Others</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"form-group\">\r\n\r\n        <label for=\"name\" class=\"col-sm-1 control-label\"> <span style=\"color: red;\">*</span>Name</label>\r\n        <div class=\"col-sm-3\">\r\n            <input type=\"text\" for=\"name\" class=\"form-control \" id=\"name\" joyrideStep=\"name\" title=\"Name\"\r\n                text=\"The name field is automatically populated with the user's AD login name\"\r\n                [(ngModel)]=\"feedBackObj.name\" name=\"name\" readonly>\r\n        </div>\r\n        <label for=\"email\" class=\"col-sm-1 control-label\">Email</label>\r\n        <div class=\"col-sm-3\">\r\n            <input type=\"text\" for=\"email\" joyrideStep=\"email\" title=\"Email\"\r\n                text=\"The email field is automatically populated with the user's email based on AD login information \"\r\n                class=\"form-control\" id=\"email\" [(ngModel)]=\"feedBackObj.email\" name=\"email\">\r\n\r\n        </div>\r\n        <label for=\"phone\" class=\"col-sm-1 control-label\">Phone</label>\r\n        <div class=\"col-sm-2\">\r\n            <input type=\"text\" joyrideStep=\"phone\" title=\"Phone\" text=\"The phone field is where a user can leave a phone number to be contacted.\r\n            This field is optional.\r\n            \" for=\"phone\" class=\"form-control\" id=\"phone\" [(ngModel)]=\"feedBackObj.phone\" name=\"phone\">\r\n        </div>\r\n\r\n\r\n    </div>\r\n    <span class=\"col-sm-1\"></span>\r\n    <span *ngIf=\"showName\" class=\"col-sm-3 \">* Not a valid Name</span>\r\n    <span class=\"col-sm-4\"></span>\r\n    <span *ngIf=\"showEmail\" class=\"col-lg-3 \">* Not a valid Email</span>\r\n\r\n    <div class=\"col-lg-12\">\r\n        <label for=\"message\" class=\"col-sm-1 control-label\">Message</label>\r\n\r\n        <div class=\"col-sm-7\" style=\"text-align: center;\">\r\n\r\n            <textarea rows=\"10\" for=\"message\" joyrideStep=\"message\" title=\"Message\"\r\n                text=\"The message text box is where a user can enter their desired feedback for the system's management team. \"\r\n                class=\"form-control col-sm-12\" id=\"message\" cols=\"12\" [(ngModel)]=\"feedBackObj.message\"\r\n                name=\"message\"></textarea>\r\n        </div>\r\n    </div>\r\n    <br><br><br>\r\n    <div class=\"col-lg-12\" style=\"margin: 20px;\">\r\n\r\n        <span class=\"col-lg-4\"></span>\r\n        <button type=\"button\" id=\"submitfeedback\" class=\"col-lg-1 btn btn-primary btn-lg\" joyrideStep=\"sendFeedback\"\r\n            title=\"Send Feedback\"\r\n            text=\"Finally, once all fields require and desired fields have been completed, the user will click the 'Send Feedback' button to send their feedback to the management team. \"\r\n            style=\"margin-right:10px !important; width:200px !important\" (click)=\"sendFeedback()\">Send\r\n            Feedback</button>\r\n\r\n    </div>\r\n\r\n    <br><br><br>\r\n    <div class=\"col-lg-12\">\r\n        <p-table #feedbackTable [columns]=\"feedbackCols\" [value]=\"feedbackList\" [paginator]=\"true\" [rows]=\"10\"\r\n                    [responsive]=\"true\" [rowsPerPageOptions]=\"[10,20,30]\" [resizableColumns]=\"true\"\r\n                    [reorderableColumns]=\"true\"\r\n                    p-dataTable>\r\n\r\n                    <ng-template pTemplate=\"colgroup\" let-columns>\r\n                      <colgroup>\r\n                        <col *ngFor=\"let col of columns\" [style.width]=\"col.width\">\r\n                      </colgroup>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"header\" let-columns>\r\n                      <tr>\r\n                        <th *ngFor=\"let col of columns\" pResizableColumn pReorderableColumn\r\n                          [pSortableColumn]=\"col.field\">\r\n                          <div pTooltip=\"Click to sort {{col.header}}\">\r\n                            {{col.header}}\r\n                            <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                              ariaLabelDesc=\"Activate to sort in descending order\"\r\n                              ariaLabelAsc=\"Activate to sort in ascending order\">\r\n                            </p-sortIcon>\r\n                          </div>\r\n                        </th>\r\n                      </tr>\r\n                      <tr>\r\n                        <th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n                          <div *ngIf=\"col.field !== ''\">\r\n                            <input *ngSwitchCase=\"col.field\" pInputText type=\"text\" placeholder=\"Search\"\r\n                              [value]=\"feedbackTable.filters[col.field] ? feedbackTable.filters[col.field].value : ''\"\r\n                              (input)=\"feedbackTable.filter($event.target.value, col.field, 'contains');\"\r\n                              style=\"width: 100%;\">\r\n                          </div>\r\n                        </th>\r\n                      </tr>\r\n                    </ng-template>\r\n\r\n                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                      <tr style=\"height:34px\">\r\n                        <td *ngFor=\"let col of columns\">\r\n                            {{rowData[col.field]}}\r\n                             <!-- {{rowData.ISSUETYPE}} -->\r\n                        </td>\r\n                      </tr>\r\n                    </ng-template>\r\n                    <!-- <ng-template pTemplate=\"loadingbody\" let-columns=\"columns\">\r\n                      <tr style=\"height:34px\">\r\n                        <td *ngFor=\"let col of columns\" pTooltip=\"{{rowData[col.field]}}\">\r\n                          <div class=\"loading-text\"></div>\r\n                        </td>\r\n                      </tr>\r\n                    </ng-template> -->\r\n                    <ng-template pTemplate=\"summary\">\r\n                      Total number of Records: {{feedbackTable.totalRecords}}\r\n                    </ng-template>\r\n                  </p-table>\r\n    </div>\r\n\r\n</form>\r\n\r\n<ng-template #typeContent>\r\n    <div>The type dropdown is where a user can select the type of the feedback they are wishing to submit.\r\n    </div>\r\n    <div>Options include: Issue, Feature Request, and Other (eg: User Interface)</div>\r\n</ng-template>\r\n\r\n<ng-template #categoryContent>\r\n    <div>\r\n        The Category dropdown is where a user can select the category of the feedback they are wishing to submit.\r\n    </div>\r\n    <div>\r\n        Options include all the MaxDS pages, curtain key functions, and other.\r\n    </div>\r\n</ng-template>\r\n</div>\r\n<div style=\"height: 40px;\">\r\n\r\n</div>\r\n<div>\r\n\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./src/app/submitFeedback/submitFeedbackComponent.ts":
/*!***********************************************************!*\
  !*** ./src/app/submitFeedback/submitFeedbackComponent.ts ***!
  \***********************************************************/
/*! exports provided: SubmitFeedbackComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmitFeedbackComponent", function() { return SubmitFeedbackComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _submitFeedbackService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./submitFeedbackService */ "./src/app/submitFeedback/submitFeedbackService.ts");




var SubmitFeedbackComponent = /** @class */ (function () {
    function SubmitFeedbackComponent(submitFeedbackService, router) {
        this.submitFeedbackService = submitFeedbackService;
        this.router = router;
        this.subscription = [];
        this.showName = false;
        this.showEmail = false;
        this.isFeedbackSubmitted = false;
        this.feedbackList = [];
        this.feedBackObj = { "issue": "Issue", "category": "Derivation Trail", "name": "", "email": "", "phone": "", "message": "" };
        this.navigationSubscription = this.router.events.subscribe(function (e) {
            if (e instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            }
        });
    }
    SubmitFeedbackComponent.prototype.ngOnInit = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var userdata, res, _a, _b;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_c) {
                switch (_c.label) {
                    case 0:
                        userdata = {};
                        console.log('submitFeedbackComponent : calling ngOnInit...');
                        this.feedbackCol();
                        res = localStorage.getItem("isAdmin");
                        if (!res) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.submitFeedbackService.getFeedback().toPromise()];
                    case 1:
                        _a.feedbackList = _c.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        _b = this;
                        return [4 /*yield*/, this.submitFeedbackService.getFeedbackByUser(localStorage.getItem("userName")).toPromise()];
                    case 3:
                        _b.feedbackList = _c.sent();
                        _c.label = 4;
                    case 4:
                        this.feedBackObj.name = localStorage.getItem("userName");
                        this.feedBackObj.email = localStorage.getItem("userEmail");
                        return [2 /*return*/];
                }
            });
        });
    };
    SubmitFeedbackComponent.prototype.sendFeedback = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var res, _a, _b;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_c) {
                switch (_c.label) {
                    case 0:
                        console.log(this.feedBackObj);
                        this.submitFeedbackService.submitFeedback(this.feedBackObj).subscribe(function (response) {
                            return console.log(response);
                        });
                        this.isFeedbackSubmitted = true;
                        this.feedBackObj = { "issue": "Issue", "category": "Derivation Trail", "name": localStorage.getItem("userName"), "email": localStorage.getItem("userEmail"), "phone": "", "message": "" };
                        res = localStorage.getItem("isAdmin");
                        if (!res) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.submitFeedbackService.getFeedback().toPromise()];
                    case 1:
                        _a.feedbackList = _c.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        _b = this;
                        return [4 /*yield*/, this.submitFeedbackService.getFeedbackByUser(localStorage.getItem("userName")).toPromise()];
                    case 3:
                        _b.feedbackList = _c.sent();
                        _c.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SubmitFeedbackComponent.prototype.feedbackCol = function () {
        this.feedbackCols = [
            { field: 'ISSUETYPE', header: 'Type' },
            { field: 'CATEGORY', header: 'Category' },
            { field: 'NAME', header: 'User Name' },
            { field: 'EMAIL', header: 'Email' },
            { field: 'PHONE', header: 'Phone' },
            { field: 'MESSAGE', header: 'Message', width: '35%' },
            { field: 'dtCreated', header: 'Created Date' }
        ];
        return this.feedbackCols;
    };
    SubmitFeedbackComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (s) { return s.unsubscribe(); });
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    SubmitFeedbackComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'submitFeedback-page',
            template: __webpack_require__(/*! ./submitFeedback.html */ "./src/app/submitFeedback/submitFeedback.html"),
            styles: [__webpack_require__(/*! ../app.component.css */ "./src/app/app.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_submitFeedbackService__WEBPACK_IMPORTED_MODULE_3__["SubmitFeedbackService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]])
    ], SubmitFeedbackComponent);
    return SubmitFeedbackComponent;
}());



/***/ }),

/***/ "./src/app/submitFeedback/submitFeedbackService.ts":
/*!*********************************************************!*\
  !*** ./src/app/submitFeedback/submitFeedbackService.ts ***!
  \*********************************************************/
/*! exports provided: SubmitFeedbackService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmitFeedbackService", function() { return SubmitFeedbackService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");





var SubmitFeedbackService = /** @class */ (function () {
    function SubmitFeedbackService(http) {
        this.http = http;
        this.FEEDBACKSUBMITURL = "sendFeedback";
        this.getFeedbackUrl = "getFeedback";
        this.getFeedbackByUserUrl = "getFeedbackByUser";
    }
    SubmitFeedbackService.prototype.submitFeedback = function (feedback) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("access-control-allow-origin", "*");
        return this.http.post(this.FEEDBACKSUBMITURL, feedback, { headers: headers }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response;
            console.log(data);
            return data;
        }));
    };
    SubmitFeedbackService.prototype.getFeedback = function () {
        console.log('SubmitFeedback : getFeedback()...');
        return this.http.get("" + this.getFeedbackUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    SubmitFeedbackService.prototype.getFeedbackByUser = function (username) {
        console.log('SubmitFeedback : getFeedback()...');
        return this.http.get(this.getFeedbackByUserUrl + "?username=" + username).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    SubmitFeedbackService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"]])
    ], SubmitFeedbackService);
    return SubmitFeedbackService;
}());



/***/ }),

/***/ "./src/app/term-results/term-results.component.css":
/*!*********************************************************!*\
  !*** ./src/app/term-results/term-results.component.css ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".panel{\r\n    height: 33%  !important;\r\n}\r\n.no-header .ui-panel-titlebar{\r\n    display: none !important;\r\n  }\r\ntd{\r\n   /* white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;*/\r\n    word-break: break-all;\r\n  }\r\ninput.customcheckbox{\r\n    width: 20px !important;\r\n    height: 20px !important;\r\n  }\r\n.derivationPopup {\r\n    width: 50vw;\r\n}\r\n@media screen and (max-width: 40em) {\r\n    .derivationPopup {\r\n        width: 75vw;\r\n    }\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGVybS1yZXN1bHRzL3Rlcm0tcmVzdWx0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksdUJBQXVCO0FBQzNCO0FBQ0E7SUFDSSx3QkFBd0I7RUFDMUI7QUFFQTtHQUNDOzs2QkFFMEI7SUFDekIscUJBQXFCO0VBQ3ZCO0FBRUE7SUFDRSxzQkFBc0I7SUFDdEIsdUJBQXVCO0VBQ3pCO0FBR0Y7SUFDSSxXQUFXO0FBQ2Y7QUFFQTtJQUNJO1FBQ0ksV0FBVztJQUNmO0FBQ0oiLCJmaWxlIjoic3JjL2FwcC90ZXJtLXJlc3VsdHMvdGVybS1yZXN1bHRzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucGFuZWx7XHJcbiAgICBoZWlnaHQ6IDMzJSAgIWltcG9ydGFudDtcclxufVxyXG4ubm8taGVhZGVyIC51aS1wYW5lbC10aXRsZWJhcntcclxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcclxuICB9XHJcblxyXG4gIHRke1xyXG4gICAvKiB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyovXHJcbiAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XHJcbiAgfVxyXG5cclxuICBpbnB1dC5jdXN0b21jaGVja2JveHtcclxuICAgIHdpZHRoOiAyMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHggIWltcG9ydGFudDtcclxuICB9XHJcblxyXG5cclxuLmRlcml2YXRpb25Qb3B1cCB7XHJcbiAgICB3aWR0aDogNTB2dztcclxufVxyXG5cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDBlbSkge1xyXG4gICAgLmRlcml2YXRpb25Qb3B1cCB7XHJcbiAgICAgICAgd2lkdGg6IDc1dnc7XHJcbiAgICB9XHJcbn0iXX0= */"

/***/ }),

/***/ "./src/app/term-results/term-results.component.html":
/*!**********************************************************!*\
  !*** ./src/app/term-results/term-results.component.html ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"col-lg-12 h-33 d-inline-block\" style=\" margin-bottom: 0px !important;\">\r\n    <div class=\"col-lg-12 \" style=\"white-space: nowrap;\">\r\n        <div class=\"col-lg-10 col-md-12 text-white\"\r\n            style=\"font-size: x-large;text-align: left !important; color: black;\">\r\n            <b style=\"color: black;\">{{termName}} for {{companyName}}</b>\r\n        </div>\r\n\r\n        <div class=\"col-lg-2 col-md-12 text-white\" style=\"text-align: right !important;\">\r\n\r\n            <button alt=\"Export Term Results to CSV.\" pButton type=\"submit\" label=\"Export to CSV\"\r\n                (click)=\"exportData(dt)\"></button>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12 h-33 d-inline-block\">\r\n        <div class=\"col-lg-12 h-33 d-inline-block\"\r\n            style=\"text-align: left !important; margin-bottom: 0px !important; margin-top: 10px !important;\">\r\n            <div class=\"col-sm-2\">\r\n                <input type=\"checkbox\" class=\"col-sm-1 form-check-input customcheckbox\" (click)=\"showAnnualData($event)\"\r\n                    [(ngModel)]=\"annualChecked\" style=\"margin:5px !important;\">\r\n                <label class=\"col-sm-1\" style=\"padding-top: 5px !important;\">Annual</label>\r\n            </div>\r\n            <div class=\"col-sm-2 row\">\r\n                <input type=\"checkbox\" class=\"col-sm-1 form-check-input customcheckbox\"\r\n                    (click)=\"showQuaterlyData($event)\" [(ngModel)]=\"quaterlyChecked\" style=\"margin:5px !important;\">\r\n                <label class=\"col-sm-1\" style=\"padding-top: 5px !important;\">Quarterly</label>\r\n            </div>\r\n            <div class=\"col-sm-3\">\r\n                <input type=\"checkbox\" class=\"col-sm-1 form-check-input customcheckbox\"\r\n                    (click)=\"showMissingProductData($event)\" [(ngModel)]=\"showMissPrdChecked\"\r\n                    style=\"margin:5px !important;\">\r\n                <label class=\"col-sm-11\" style=\" padding-top: 5px !important;\">Include Missing Periods</label>\r\n            </div>\r\n            <!--<p-checkbox (click)=\"showAnnualData($event)\" label=\"Annual\" name=\"annual\" [(ngModel)]=\"checked\">\r\n            </p-checkbox>\r\n            <span style=\"padding-right: 5%;\"></span>\r\n            <p-checkbox (click)=\"showQuaterlyData($event)\" label=\"Quarterly\"></p-checkbox>\r\n            <span style=\"padding-right: 5%;\"></span>\r\n            <p-checkbox (onChange)=\"showMissingProductData($event)\" label=\"Show Missing Products\"></p-checkbox>-->\r\n        </div>\r\n        <div class=\"row\" style=\"padding: 0 30px 20px 30px;\">\r\n\r\n            <div class=\"col-sm-3\">\r\n                <h3 style=\"text-align: center\"> {{range[0]}} - {{range[1]}} </h3>\r\n                <p-slider [(ngModel)]=\"range\" [min]=\"minRange\" [max]=\"maxRange\" [step]=\"1\" [range]=\"true\"\r\n                    (onChange)=\"yearChange($event)\"></p-slider>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-lg-6\">\r\n            <p-panel [transitionOptions]=\"'0ms'\">\r\n                <p-chart styleClass=\"col-lg-12\" type=\"bar\" [data]=\"annualdata\" height=\"300px\" [responsive]=\"true\" [options]=\"options\">\r\n                </p-chart>\r\n            </p-panel>\r\n        </div>\r\n\r\n        <div class=\"col-lg-6\">\r\n            <p-panel [transitionOptions]=\"'0ms'\">\r\n                <p-chart styleClass=\"col-lg-12\" type=\"bar\" [data]=\"quaterlydata\" height=\"300px\" [responsive]=\"true\" [options]=\"quaterlyoptions\">\r\n                </p-chart>\r\n            </p-panel>\r\n        </div>\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"col-lg-12\" style=\" margin-top: 10px !important;\">\r\n\r\n        <p-table class=\"col-lg-12\" #dt [columns]=\"cols\" [value]=\"termResults\" (onPage)=\"filterData($event)\"\r\n            (onFilter)=\"filterData($event)\" exportFilename=\"TermResultsData\" [(selection)]=\"selectedTermResults\">\r\n\r\n            <!--  <ng-template pTemplate=\"caption\">\r\n\r\n                <button class=\"btn btn-primary pull-right\" label=\"Export to CSV\" style=\"margin-left:8px\"\r\n                    (click)=\"exportData(dt)\">Export to CSV</button>\r\n            </ng-template>-->\r\n\r\n\r\n\r\n\r\n            <ng-template pTemplate=\"header\">\r\n\r\n\r\n                <tr>\r\n                    <th *ngFor=\"let col of cols\" [ngStyle]=\"{'width': col.width}\" pResizableColumn pReorderableColumn\r\n                        [pSortableColumn]=\"col.field\">\r\n                        <div pTooltip=\"Click to sort {{col.header}}\">\r\n                            {{col.header}}\r\n                            <p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\"\r\n                                ariaLabelDesc=\"Activate to sort in descending order\"\r\n                                ariaLabelAsc=\"Activate to sort in ascending order\"></p-sortIcon>\r\n                        </div>\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th *ngFor=\"let col of cols\" [ngSwitch]=\"col.field\">\r\n                        <div *ngIf=\"col.field !== ''\">\r\n                            <input *ngSwitchCase=\"col.field\" pInputText type=\"text\" placeholder=\"Search\"\r\n                                [value]=\"dt.filters[col.field] ? dt.filters[col.field].value : ''\" (input)=\"dt.filter($event.target.value, col.field, col.filterMatchMode);\r\n                            onFilter($event.target.value, col.field, col.filterMatchMode);\" style=\"width: 100%\">\r\n                        </div>\r\n                    </th>\r\n                </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-termResults>\r\n                <tr>\r\n                    <td *ngFor=\"let col of cols\">\r\n\r\n                        <span *ngIf=\"col.header==='Period'\"> {{termResults[col.field]}}{{termResults.FQ}}</span>\r\n                        <span *ngIf=\"col.header ==='Rank'\"> {{termResults[col.field]}} </span>\r\n                        <span *ngIf=\"col.header==='Value'\" style=\"float:right;\" > {{termResults[col.field] | number }}</span>\r\n                        <span *ngIf=\"col.header ==='Filing Date'\" >\r\n                            <u>\r\n                                <a *ngIf=\"termResults[col.field] != 0\" (click)=\"openTermLink(termResults)\"\r\n                                    style=\"cursor: pointer; color: blue;\"  pTooltip=\"Click to view processing result\">\r\n                                     {{termResults[col.field]}}\r\n                                </a>\r\n                            </u>\r\n                        </span>\r\n                        <span *ngIf=\"col.header ==='Period Over Period Variance'\">\r\n                            {{getPercentage(termResults[col.field])}} </span>\r\n                        <span *ngIf=\"col.header==='Year Over Year Variance'\"> {{getPercentage(termResults[col.field])}}\r\n                        </span>\r\n                        <span *ngIf=\"col.header ==='Expression'\"> {{termResults[col.field]}} </span>\r\n                        <span *ngIf=\"col.header==='Validation Messages'\"> {{termResults[col.field]}}</span>\r\n                        <span *ngIf=\"col.header==='Derivation Trails'\" (click)=\"showDerivationResults(termResults)\">\r\n                            <button pButton type=\"submit\" label=\"Show Derivation\"></button> </span>\r\n                    </td>\r\n                </tr>\r\n            </ng-template>\r\n        </p-table>\r\n\r\n\r\n    </div>\r\n\r\n    <p-dialog header=\"Derivation Trail\" [(visible)]=\"display\" [style]=\"{width: '70vw',overflow:'auto'}\"\r\n        [draggable]=\"true\" [maximizable]=\"true\" [resizable]=\"true\">\r\n\r\n        <p-table #drt [value]=\"derivationList\">\r\n            <ng-template pTemplate=\"caption\">\r\n                <h5>{{tableHeader}}</h5>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"header\">\r\n                <tr>\r\n                    <th>Asset</th>\r\n                    <th>Value</th>\r\n                </tr>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"body\" let-derivation>\r\n                <tr>\r\n                    <td><span> {{derivation.asset}}</span> </td>\r\n                    <td><span>{{derivation.value}} </span></td>\r\n                </tr>\r\n            </ng-template>\r\n        </p-table>\r\n\r\n\r\n    </p-dialog>\r\n"

/***/ }),

/***/ "./src/app/term-results/term-results.component.ts":
/*!********************************************************!*\
  !*** ./src/app/term-results/term-results.component.ts ***!
  \********************************************************/
/*! exports provided: TermResultsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TermResultsComponent", function() { return TermResultsComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var app_services_profile_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/services/profile.service */ "./src/app/services/profile.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! primeng/table */ "./node_modules/primeng/table.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(primeng_table__WEBPACK_IMPORTED_MODULE_4__);





var TermResultsComponent = /** @class */ (function () {
    function TermResultsComponent(profileService, router) {
        this.profileService = profileService;
        this.router = router;
        this.selectedTermResults = [];
        this.tableHeader = "test";
        this.minRange = (new Date()).getFullYear() - 4;
        this.maxRange = (new Date()).getFullYear();
        this.range = [(new Date()).getFullYear() - 4, (new Date()).getFullYear()];
        this.chartXdata = [];
        this.chartYdata = [];
        this.quaterlychartXdata = [];
        this.quaterlychartYdata = [];
        this.annualChecked = false;
        this.quaterlyChecked = false;
        this.showMissPrdChecked = false;
        this.display = false;
        if (this.router.getCurrentNavigation() && this.router.getCurrentNavigation().extras && this.router.getCurrentNavigation().extras.state) {
            this.termName = this.router.getCurrentNavigation().extras.state.termName;
            this.entityId = this.router.getCurrentNavigation().extras.state.entityId;
            this.companyName = this.router.getCurrentNavigation().extras.state.companyName;
        }
        if (sessionStorage.getItem('home.range') !== null) {
            this.range = JSON.parse(sessionStorage.getItem('home.range'));
        }
        this.termResults = [];
        this.populateAnnualChartData();
        this.populateQuaterlyChartData();
    }
    TermResultsComponent.prototype.yearChange = function () {
        var event = {
            target: {
                checked: this.showMissPrdChecked
            }
        };
        //this.showMissingProductData(event);
        this.getTermMngrResults();
    };
    TermResultsComponent.prototype.showDerivationResults = function (derivationData) {
        //console.log(derivationData)
        var data = derivationData.derivationTrails;
        this.display = true;
        this.tableHeader = data.header;
        this.derivationList = [];
        this.derivationList = data.assets;
    };
    TermResultsComponent.prototype.ngOnChanges = function () {
        if (this.state) {
            this.termName = this.state.termName;
            this.entityId = this.state.entityId;
            this.companyName = this.state.companyName;
            this.getTermMngrResults();
        }
    };
    TermResultsComponent.prototype.ngOnInit = function () {
        this.getTermMngrResults();
        this.cols = [
            { field: 'FY', header: 'Period', width: '6%', exportable: true },
            { field: 'rank', header: 'Rank', width: '4%', exportable: true },
            { field: 'value', header: 'Value', width: '10%', exportable: true },
            { field: 'filingDate', header: 'Filing Date', width: '6%', exportable: true },
            { field: 'percentVarianceWithPrevPeriod', header: 'Period Over Period Variance', width: '8%', exportable: true },
            { field: 'percentVarianceWithPrevYear', header: 'Year Over Year Variance', width: '8%', exportable: true },
            { field: 'resolvedExpression', header: 'Expression', width: '38%', exportable: true },
            { field: 'validationMessages', header: 'Validation Messages', width: '22%', exportable: true },
            { field: 'devrivationTrails', header: 'Derivation Trails', width: '11%', exportable: true }
        ];
        this.exportColumns = this.cols.map(function (col) { return ({ title: col.header, dataKey: col.field }); });
    };
    TermResultsComponent.prototype.exportData = function (table) {
        table.value.forEach(function (item) {
            item.percentVarianceWithPrevPeriod = item.percentVarianceWithPrevPeriod.toString().includes('e') ? item.percentVarianceWithPrevPeriod.toFixed() : item.percentVarianceWithPrevPeriod;
            item.percentVarianceWithPrevYear = item.percentVarianceWithPrevYear.toString().includes('e') ? item.percentVarianceWithPrevYear.toFixed() : item.percentVarianceWithPrevYear;
        });
        table.exportCSV();
    };
    TermResultsComponent.prototype.showAnnualData = function (event) {
        var _this = this;
        var filterDataSet = [];
        if (event.target.checked) {
            this.allTermResults.forEach(function (term) {
                if (_this.quaterlyChecked && _this.showMissPrdChecked) {
                    if ((term.isAnnual || term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (_this.quaterlyChecked && !_this.showMissPrdChecked) {
                    if ((term.isAnnual || term.isQtrly) && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (!_this.quaterlyChecked && _this.showMissPrdChecked) {
                    if ((term.isAnnual && !term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else {
                    if (term.isAnnual && !term.isQtrly && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
            });
            this.termResults = [];
            this.termResults = this.filterDataBasedOnRange(filterDataSet);
        }
        else {
            this.allTermResults.forEach(function (term) {
                if (_this.quaterlyChecked && _this.showMissPrdChecked) {
                    if ((!term.isAnnual && term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (_this.quaterlyChecked && !_this.showMissPrdChecked) {
                    if (!term.isAnnual && term.isQtrly && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (!_this.quaterlyChecked && _this.showMissPrdChecked) {
                    if ((!term.isAnnual && !term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else {
                    _this.termResults = [];
                }
            });
            this.termResults = [];
            this.termResults = this.filterDataBasedOnRange(filterDataSet);
        }
    };
    TermResultsComponent.prototype.showQuaterlyData = function (event) {
        var _this = this;
        var filterDataSet = [];
        if (event.target.checked) {
            this.allTermResults.forEach(function (term) {
                if (_this.annualChecked && _this.showMissPrdChecked) {
                    if ((term.isAnnual || term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (_this.annualChecked && !_this.showMissPrdChecked) {
                    if ((term.isAnnual || term.isQtrly) && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (!_this.annualChecked && _this.showMissPrdChecked) {
                    if ((!term.isAnnual && term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else {
                    if (!term.isAnnual && term.isQtrly && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
            });
            this.termResults = [];
            this.termResults = this.filterDataBasedOnRange(filterDataSet);
        }
        else {
            this.allTermResults.forEach(function (term) {
                if (_this.annualChecked && _this.showMissPrdChecked) {
                    if ((term.isAnnual && !term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (_this.annualChecked && !_this.showMissPrdChecked) {
                    if ((term.isAnnual && !term.isQtrly) && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (!_this.annualChecked && _this.showMissPrdChecked) {
                    if ((!term.isAnnual && !term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else {
                    _this.termResults = [];
                }
            });
            this.termResults = [];
            this.termResults = this.filterDataBasedOnRange(filterDataSet);
        }
    };
    TermResultsComponent.prototype.showMissingProductData = function (event) {
        var _this = this;
        var filterDataSet = [];
        if (event.target.checked) {
            this.allTermResults.forEach(function (term) {
                if (_this.annualChecked && _this.quaterlyChecked) {
                    if ((term.isAnnual || term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (_this.annualChecked && !_this.quaterlyChecked) {
                    if ((term.isAnnual && !term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (!_this.annualChecked && _this.quaterlyChecked) {
                    if ((!term.isAnnual && term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else {
                    if ((!term.isAnnual && !term.isQtrly) || term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
            });
            this.termResults = [];
            this.termResults = this.filterDataBasedOnRange(filterDataSet);
        }
        else {
            this.allTermResults.forEach(function (term) {
                if (_this.annualChecked && _this.quaterlyChecked) {
                    if ((term.isAnnual || term.isQtrly) && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (_this.annualChecked && !_this.quaterlyChecked) {
                    if (term.isAnnual && !term.isQtrly && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else if (!_this.annualChecked && _this.quaterlyChecked) {
                    if (!term.isAnnual && term.isQtrly && !term.isMissingPrd) {
                        filterDataSet.push(_this.populateData(term));
                    }
                }
                else {
                    _this.termResults = [];
                }
            });
            this.termResults = [];
            this.termResults = this.filterDataBasedOnRange(filterDataSet);
        }
    };
    TermResultsComponent.prototype.getPercentage = function (value) {
        value = value * 100;
        value = Math.round(value * 100) / 100;
        return value + "%";
    };
    TermResultsComponent.prototype.populateAnnualChartData = function () {
        this.annualdata = {
            labels: this.chartXdata,
            datasets: [
                {
                    label: 'Annual',
                    backgroundColor: "#007ad9",
                    data: this.chartYdata
                }
            ]
        };
        this.options = {
            title: {
                display: true,
                text: '',
                fontSize: 16
            },
            legend: {
                position: 'top'
            },
            scales: {
                yAxes: [{
                        ticks: {
                            //stepSize: 100000,
                            suggestedMin: 0,
                            callback: function (value) {
                                function formatNumber(value) {
                                    if (value) {
                                        var parts = value.toString().split(".");
                                        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                        return parts.join(".");
                                    }
                                    else
                                        return "";
                                }
                                //return '$' + formatNumber(value);
                                return formatNumber(value);
                            }
                        }
                    }]
            }
        };
    };
    TermResultsComponent.prototype.populateQuaterlyChartData = function () {
        this.quaterlydata = {
            labels: this.quaterlychartXdata,
            datasets: [
                {
                    label: 'Quarterly',
                    backgroundColor: "#007ad9",
                    data: this.quaterlychartYdata
                }
            ]
        };
        this.quaterlyoptions = {
            title: {
                display: true,
                text: '',
                fontSize: 16
            },
            legend: {
                position: 'top'
            },
            scales: {
                yAxes: [{
                        ticks: {
                            //stepSize: 100000,
                            suggestedMin: 0,
                            callback: function (value) {
                                function formatNumber(value) {
                                    if (value) {
                                        var parts = value.toString().split(".");
                                        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                        return parts.join(".");
                                    }
                                    else
                                        return "";
                                }
                                return formatNumber(value);
                            }
                        }
                    }]
            }
        };
    };
    TermResultsComponent.prototype.openTermLink = function (data) {
        var url = 'https://www.sec.gov/Archives/edgar/data/' + data.cik + '/' + data.accession + '-index.htm';
        console.log(url);
        window.open(url, "_blank");
    };
    TermResultsComponent.prototype.getTermMngrResults = function () {
        var _this = this;
        this.profileService.getTermMngrResults(this.termName, this.entityId).subscribe(function (response) {
            _this.termResults = [];
            _this.allTermResults = [];
            _this.chartXdata = [];
            _this.quaterlychartXdata = [];
            console.log(response);
            response.forEach(function (termMgrRslt) {
                _this.termResults.push(_this.populateData(termMgrRslt));
                _this.allTermResults.push(_this.populateData(termMgrRslt));
                if (termMgrRslt.FY >= _this.range[0] && termMgrRslt.FY <= _this.range[1]) { //filter chart data in year range
                    if (termMgrRslt.FQ === "FY") {
                        _this.chartXdata.push(termMgrRslt.FY);
                        _this.chartYdata.push(termMgrRslt.value);
                        _this.populateAnnualChartData();
                    }
                    else {
                        _this.quaterlychartXdata.push(termMgrRslt.FY + "-" + termMgrRslt.FQ);
                        _this.quaterlychartYdata.push(termMgrRslt.value);
                        _this.populateQuaterlyChartData();
                    }
                }
            });
            _this.filterAnnualData();
        }, function (error) { return console.log(error); });
    };
    TermResultsComponent.prototype.numberWithCommas = function (x) {
        if (x) {
            var parts = x.toString().split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return parts.join(".");
        }
        else
            return "";
    };
    TermResultsComponent.prototype.populateData = function (termMgrRslt) {
        return {
            rank: termMgrRslt.rank, FY: termMgrRslt.FY, FQ: termMgrRslt.FQ, value: termMgrRslt.value, expression: termMgrRslt.expression, filingDate: termMgrRslt.filingDate,
            percentVarianceWithPrevPeriod: termMgrRslt.percentVarianceWithPrevPeriod, percentVarianceWithPrevYear: termMgrRslt.percentVarianceWithPrevYear, resolvedExpression: termMgrRslt.resolvedExpression,
            validationMessages: termMgrRslt.validationMessages, isAnnual: (termMgrRslt.FQ === "FY") ? true : false, isQtrly: (termMgrRslt.FQ !== "FY") ? true : false, isMissingPrd: (termMgrRslt.rank != 99) ? false : true, accession: termMgrRslt.accession, derivationTrails: termMgrRslt.derivationTrails
        };
    };
    TermResultsComponent.prototype.filterAnnualData = function () {
        var _this = this;
        var filterDataSet = [];
        this.annualChecked = true;
        this.allTermResults.forEach(function (term) {
            if (_this.quaterlyChecked && _this.showMissPrdChecked) {
                if ((term.isAnnual || term.isQtrly) && term.isMissingPrd) {
                    filterDataSet.push(_this.populateData(term));
                }
            }
            else if (_this.quaterlyChecked && !_this.showMissPrdChecked) {
                if ((term.isAnnual || term.isQtrly) && !term.isMissingPrd) {
                    filterDataSet.push(_this.populateData(term));
                }
            }
            else if (!_this.quaterlyChecked && _this.showMissPrdChecked) {
                if (term.isAnnual && !term.isQtrly && term.isMissingPrd) {
                    filterDataSet.push(_this.populateData(term));
                }
            }
            else {
                if (term.isAnnual && !term.isQtrly && !term.isMissingPrd) {
                    filterDataSet.push(_this.populateData(term));
                }
            }
        });
        this.termResults = [];
        this.termResults = this.filterDataBasedOnRange(filterDataSet);
    };
    TermResultsComponent.prototype.filterDataBasedOnRange = function (filterDataSet) {
        var _this = this;
        var termResults = [];
        filterDataSet.forEach(function (item) {
            if (item.FY >= _this.range[0] && item.FY <= _this.range[1]) {
                termResults.push(item);
            }
        });
        return termResults;
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(primeng_table__WEBPACK_IMPORTED_MODULE_4__["Table"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", primeng_table__WEBPACK_IMPORTED_MODULE_4__["Table"])
    ], TermResultsComponent.prototype, "dt", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(primeng_table__WEBPACK_IMPORTED_MODULE_4__["Table"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", primeng_table__WEBPACK_IMPORTED_MODULE_4__["Table"])
    ], TermResultsComponent.prototype, "drt", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], TermResultsComponent.prototype, "state", void 0);
    TermResultsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-term-result',
            template: __webpack_require__(/*! ./term-results.component.html */ "./src/app/term-results/term-results.component.html"),
            styles: [__webpack_require__(/*! ./term-results.component.css */ "./src/app/term-results/term-results.component.css")]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [app_services_profile_service__WEBPACK_IMPORTED_MODULE_2__["ProfileService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]])
    ], TermResultsComponent);
    return TermResultsComponent;
}());



/***/ }),

/***/ "./src/app/utils/utilService.ts":
/*!**************************************!*\
  !*** ./src/app/utils/utilService.ts ***!
  \**************************************/
/*! exports provided: UtilService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UtilService", function() { return UtilService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _domain_termRule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../domain/termRule */ "./src/app/domain/termRule.ts");





var UtilService = /** @class */ (function () {
    function UtilService(http, rule) {
        this.http = http;
        this.rule = rule;
        this.companyListUrl = "/EntitiesList";
        this.divisionListUrl = "/DivisionList";
        this.disionSectorListUrl = "/DivSectorList";
        this.industryListUrl = "/IndustryList";
        this.sectorListUrl = "/SectorList";
        this.filerCategoryListUrl = "/FilerCategory";
        this.saveTermUrl = "/api/TermRule/save";
        this.removeTermUrl = "/api/TermRule/DeleteRule";
        this.processTermForCriteriaUrl = "/api/TermRule/ProcessRuleWithCriteria";
        this.processTermUrl = "/api/TermRule/ProcessRule";
        this.taxonomyElementsUrl = "/api/TaxonomyElements";
        this.taxonomyElementUrl = "/api/TaxonomyElement";
        this.resolvedExtndedExprUrl = "/api/ResolveExtendedExpression";
        this.completeCompanyListUrl = "/api/EntityList";
        this.processTermRuleEntityUrl = "/api/TermRule/ProcessRuleForEntity/";
        this.ProcessAllRulesWithCriteriaUrl = '/api/TermRule/ProcessAllRulesWithCriteria';
        this.cancelProcessingUrl = '/api/TermRule/CancelPendingProcessing';
        this.upLoadFileUrl = '/api/file/upload';
        this.termRuleListUrl = '/api/TermRulesList';
        this.userRolesListUrl = '/api/UserRolesList';
        this.processSelectedUrl = '/api/TermRule/SelectedProcessRule';
        this.processSelectedUrlWithCompany = '/api/TermRule/processTermsandEntities';
        this.processAccuracyTestTermsUrl = '/api/processAccuracyTestTerms';
        this.processAccuracyTestTermsAndEntitiesUrl = '/api/processAccuracyTestTermsAndEntities';
        this.resetProcessingUrl = '/api/TermRule/resetProcessing';
        this.autoLoginUrl = '/api/autoLogin';
        this.profileIdUrl = '/profileId';
    }
    UtilService.prototype.getProfileId = function () {
        console.log('Util: getProfileId() ...');
        return this.http.get("" + this.profileIdUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response;
            return data;
        }));
    };
    UtilService.prototype.getCompanyList = function () {
        console.log('Util : getCompanyList()...');
        return this.http.get("" + this.companyListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getCompleteCompanyList = function () {
        console.log('Util : getCompanyList()...');
        return this.http.get("" + this.completeCompanyListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getDivisionList = function () {
        console.log('Util : getDivisionList()...');
        return this.http.get("" + this.divisionListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getIndustryList = function () {
        console.log('Util : getIndustryList()...');
        return this.http.get("" + this.industryListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getSectorList = function () {
        console.log('Util : getSectorList()...');
        return this.http.get("" + this.sectorListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getFilerCategoryList = function () {
        console.log('Util : getFilerCategoryList()...');
        return this.http.get("" + this.filerCategoryListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getDivSectorList = function () {
        console.log('Util : getDivSectorList()...');
        return this.http.get("" + this.disionSectorListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.saveTerm = function (rule) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({
            id: rule.id, termId: rule.termId, name: rule.name, description: rule.description, type: rule.type, periodType: rule.periodType,
            includeInAccuracyTests: rule.includeInAccuracyTests, lastModified: rule.lastModified, order: rule.order, processingStatus: rule.processingStatus, priorityGroup: rule.priorityGroup,
            financialStatement: rule.financialStatement,
            expressions: rule.expressions, validationExpressions: rule.validationExpressions,
            derivedZeroExpressions: rule.derivedZeroExpressions, overrides: rule.overrides
        });
        // const body = JSON.stringify({termRule})
        headers.append('Content-Type', 'application/json');
        //   return this.http.put(`${this.saveTermUrl}`, body, {
        //     headers: headers
        // }).pipe(map((data: Response) => data.json()));
        return this.http.put("" + this.saveTermUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.removeTerm = function (termId) {
        console.log("Remove Rule : " + termId);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ id: termId });
        headers.append('Content-Type', 'application/json');
        return this.http.put("" + this.removeTermUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    ;
    UtilService.prototype.processTermForCriteria = function (termId, division, sector, sic, filerCategory) {
        console.log("processTermForCriteria : " + termId);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var userid = localStorage.getItem("userid");
        var body = JSON.stringify({ termId: termId, userid: userid, division: division, sector: sector, sic: sic, filerCategory: filerCategory });
        headers.append('Content-Type', 'application/json');
        return this.http.put("" + this.processTermForCriteriaUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.processTerm = function (rule) {
        console.log("processTerm : " + rule);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var userid = localStorage.getItem("userid");
        var body = JSON.stringify({
            id: rule.id, userid: userid, termId: rule.termId, name: rule.name, description: rule.description, type: rule.type, periodType: rule.periodType,
            includeInAccuracyTests: rule.includeInAccuracyTests, lastModified: rule.lastModified, order: rule.order, processingStatus: rule.processingStatus, priorityGroup: rule.priorityGroup,
            financialStatement: rule.financialStatement,
            expressions: rule.expressions, validationExpressions: rule.validationExpressions,
            derivedZeroExpressions: rule.derivedZeroExpressions, overrides: rule.overrides
        });
        headers.append('Content-Type', 'application/json');
        return this.http.put("" + this.processTermUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getTaxonomyElements = function (q, isTextBlock) {
        console.log('UtilService : getTaxonomyElements() with q ' + q);
        return this.http.get(this.taxonomyElementsUrl + "?q=" + q + "&isTextBlock=" + isTextBlock).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }, (function (error) {
            console.log('no data');
        })));
    };
    UtilService.prototype.getTaxonomyElement = function (id) {
        console.log('UtilService : getTaxonomyElement() with id ' + id);
        return this.http.get(this.taxonomyElementUrl + "?id=" + id).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }, (function (error) {
            console.log('no data');
        })));
    };
    UtilService.prototype.extendedEntityLookup = function (query) {
        console.log('UtilService : extendedEntityLookup() with query ' + query);
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ division: query.division, sector: query.sector, sic: query.sic, filerCategory: query.filerCategory, expression: query.expression });
        headers.append('Content-Type', 'application/json');
        return this.http.post("" + this.resolvedExtndedExprUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.processTerms = function (termId, entityId, processId) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ termId: termId, entityId: entityId, processId: processId, userid: localStorage.getItem("userid") });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.put("" + this.processTermRuleEntityUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.processAllTermWithCriteria = function (division, sector, sic, filerCategory, entityId, isNewAction) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ division: division, sector: sector, sic: sic, filerCategory: filerCategory, entityId: entityId, isNewAction: isNewAction, userid: localStorage.getItem("userid") });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.put("" + this.ProcessAllRulesWithCriteriaUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.cancelProcessing = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ userid: localStorage.getItem("userid") });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.put("" + this.cancelProcessingUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.resetProcessing = function () {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ userid: localStorage.getItem("userid") });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.put("" + this.resetProcessingUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.uploadLookupReferenceFile = function (file) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ file: file });
        headers.append('Content-Type', 'multipart/form-data');
        console.log(body);
        return this.http.put("" + this.upLoadFileUrl, file, {}).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.getTermRuleList = function () {
        console.log('UtilService : getTermRuleList()...');
        return this.http.get("" + this.termRuleListUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.getUserRolesList = function () {
        console.log('UtilService : getUserRolesList()...');
        return this.http.get("" + (this.userRolesListUrl + "/" + localStorage.getItem("userid"))).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            return data;
        }));
    };
    UtilService.prototype.processSelctedTerms = function (termIds) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ termIds: termIds, userid: localStorage.getItem("userid") });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.put("" + this.processSelectedUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.processSelctedTermsWithCompany = function (terms, entities) {
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        var body = JSON.stringify({ terms: terms, entities: entities, userid: localStorage.getItem("userid") });
        headers.append('Content-Type', 'application/json');
        console.log(body);
        return this.http.post("" + this.processSelectedUrlWithCompany, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
            var res = data;
            return res;
        }));
    };
    UtilService.prototype.processAccuTerms = function (userId) {
        return this.http.get(this.processAccuracyTestTermsUrl + "?process=" + true + "&userId=" + localStorage.getItem("userid")).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            return response;
        }, (function (error) {
            console.log('no data');
        })));
    };
    UtilService.prototype.processAccuTermsForTermsAndEntities = function (terms, entities) {
        if (terms != null && terms.length == 0 && entities == null) {
            this.processAccuTerms(localStorage.getItem("userid")); //original AccuracyTest function from Term Process Page
        }
        else {
            var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
            var body = JSON.stringify({ terms: terms, entities: entities, userid: localStorage.getItem("userid") });
            headers.append('Content-Type', 'application/json');
            console.log(body);
            return this.http.post("" + this.processAccuracyTestTermsAndEntitiesUrl, body, {
                headers: headers
            }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (data) {
                return data;
            }, (function (error) {
                console.log('no data');
            })));
        }
    };
    UtilService.prototype.autoLogin = function () {
        var _this = this;
        var headers = new _angular_http__WEBPACK_IMPORTED_MODULE_2__["Headers"]();
        headers.append('Content-Type', 'application/json');
        headers.append("access-control-allow-origin", "*");
        var body = JSON.stringify({ username: 'username', password: 'password' });
        return this.http.post("" + this.autoLoginUrl, body, {
            headers: headers
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
            var data = response.json();
            if (data.resultObject != null) {
                _this.fullname = data.resultObject.fullUserName;
                localStorage.setItem("userName", data.resultObject.fullUserName);
                localStorage.setItem("userid", data.resultObject.userid);
                localStorage.setItem("userEmail", data.resultObject.email);
                localStorage.setItem('currentUser', JSON.stringify(_this.fullname));
                localStorage.setItem('user', JSON.stringify(data.resultObject.userid));
            }
            ;
            return data;
        }));
    };
    UtilService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"], _domain_termRule__WEBPACK_IMPORTED_MODULE_4__["TermRule"]])
    ], UtilService);
    return UtilService;
}());



/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `.angular-cli.json`.
var environment = {
    production: false
};


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"]);


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Dev\git\opensearch\maxds-aws\maxds-web\src\main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map