
To disable SSL verification for a specific repository If the repository is completely under your control, you can try:

 git config --global http.sslVerify false

PUT _settings
{
  "index.max_result_window": 11000
}

//Select all from an index
GET /index/_search
{
    "query": {
        "match_all": {}
    }
}

//Get total doc counts 
 GET /maxds_termresults/_count

Create mapping for existing index
PUT termrule/_mapping

{
  "properties": {
    "term_id": {
      "type": "text"
    },
	"processing_status": {
      "type": "text"
    },
	"period_type": {
      "type": "text"
    },
	"name": {
      "type": "text"
    },
	"financial_statement": {
      "type": "text"
    },
	"has_validations": {
      "type": "text"
    },
	"description": {
      "type": "text"
    },
	"id": {
      "type": "text"
    },
	"last_modified": {
      "type": "text"
    },
	"type": {
      "type": "text"
    },
	"order": {
      "type": "text"
    }
  }
}

update mapping for existing index: usually can not do it
PUT termrule/_mapping
{
  "properties": {
    "termId": {
          "fields": {
            "keyword": {
              "ignore_above": 256,
              "type": "keyword"
            }
          },
          "type": "text",
		  "index": true
        }
  }
}
		

{
  "properties": {
    "termId": {
          "type": "text",
		  "fielddata": true
        }
  }
}

Add a single document to index
POST termrule/_doc
{
        "term_id":"XPEN",
        "processing_status":"Completed",
        "period_type":"duration",
        "name":"Pension Expense",
        "financial_statement":"Pensions Footnote",
        "has_validations":false,
        "description":"The amount of pension benefit costs recognized during the period for (1) defined benefit plans and (2) defined contribution plans. For defined benefit plans, pension expense includes the following components: service cost, interest cost, expected return on plan assets, gain (loss) on plan assets, prior service cost or credit, transition asset or obligation, and gain (loss) due to settlements or curtailments. For defined contribution plans, the pension expense generally equals the firm's contribution to employees' accounts (if the firm contributes) during the period.",
        "id":"XPEN",
        "last_modified":"2021-08-20T00:04:48.143Z",
        "type":"monetary",
        "order":1
}

Add JSON file to index
curl -H 'Content-Type: application/json' -XPOST -u elastic:4WbDBgMYm8yLwEJ9SVUabv1K  'sec-maxds-dev01.es.us-east-1.aws.found.io:9243/termrule/_bulk?pretty' --data-binary @maxds_term_rule_all_new.json

curl -H 'Content-Type: application/json' -XPOST -u elastic:4WbDBgMYm8yLwEJ9SVUabv1K  'https://sec-maxds-dev01.es.us-east-1.aws.found.io:9243/termmapinformation/_bulk?pretty' --data-binary @maxds_term_map_information.json

curl -H 'Content-Type: application/json' -XPOST 'sec-maxds-dev01.es.us-east-1.aws.found.io:9243/termrule/_bulk?pretty' --data-binary @maxds_term_rule_all_new.json


//Successfully insert data in mazhao.ndjson file to maxds_mzhao index using following cmd in gitbash on 12-9-2021
curl -H 'Content-Type: application/x-ndjson' -XPOST -u elastic:RnyKon2eODvhDGL13u2vnrfj  'https://sec-maxds-dev01.es.us-east-1.aws.found.io:9243/maxds_mzhao/_bulk?pretty' --data-binary @mzhao.ndjson
curl -H 'Content-Type: application/x-ndjson' -XPOST -u elastic:RnyKon2eODvhDGL13u2vnrfj  'https://sec-maxds-dev01.es.us-east-1.aws.found.io:9243/maxds_term_result_new/_bulk?pretty' --data-binary @maxds_term_results_curl.ndjson
curl -H 'Content-Type: application/x-ndjson' -XPOST -u elastic:RnyKon2eODvhDGL13u2vnrfj  'https://sec-maxds-dev01.es.us-east-1.aws.found.io:9243/maxds_idap_favoredfacts/_bulk?pretty' --data-binary @maxds_normalized_facts_curl.ndjson

curl -H 'Content-Type: application/x-ndjson' -XPOST -u elastic:RnyKon2eODvhDGL13u2vnrfj  'https://sec-maxds-dev01.es.us-east-1.aws.found.io:9243/maxds_term_result_new/_bulk?pretty' --data-binary @maxds_showresults_term_results_curl.ndjson

Create a new index:
PUT /indexname

Delete an index 
DELETE /termrule

Get all index info
GET /_cat/indices?v

Reindex to duplicate an index
POST /_reindex
{
  "source": {
    "index": "current_index_name"
  },
  "dest": {
    "index": "new_index_name"
  }
}

Search by property
Post termrule/_search
{
  "query": {
    "match": {
      "term_id": "CHEC"
    }
  }
}

curl -X GET -u elastic:4WbDBgMYm8yLwEJ9SVUabv1K  'sec-maxds-dev01.es.us-east-1.aws.found.io:9243/termrule/_bulk?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "match": {
      "user.id": "kimchy"
    }
  }
}
'

Performance compare:
Start maxds-app and maxds-aws from STS
Start Insomnia
go to Solr folder run Get All
go to Localhost folder run Get All

Sending request POST /_search?typed_keys=true&max_concurrent_shard_requests=5&ignore_unavailable=false&expand_wildcards=open&allow_no_indices=true&ignore_throttled=true&search_type=query_then_fetch&batched_reduce_size=512&ccs_minimize_roundtrips=true with parameters: 
Request body: {"query":{"bool":{"must":[{"wildcard":{"term_id":{"wildcard":"chec*","boost":1.0}}}],"adjust_pure_negative":true,"boost":1.0}}}

Working curl cmd:
 curl -X POST -u elastic:4WbDBgMYm8yLwEJ9SVUabv1K  'https://sec-maxds-dev01.es.us-east-1.aws.found.io:9243/termrule/_search?pretty' -H 'Content-Type: application/json' -d '{"query": { "match": { "term_id": "CHEC"} }}'
 
 d5dcad5bdfd3404d84226cfd738737b1.us-east-1.aws.found.io
 
https://sec-maxds-dev01.ent.us-east-1.aws.found.io/login
424ab1d140cb4a59b13831204729f22d

Delete record by query:
POST /maxds_termrule/_delete_by_query
{
  "query": { 
      "bool": {
          "must": [
                {"match": {"termId": "CHEC"}},
                {"match": {"includeInAccuracyTests": true}}
              ]
    }
  }
}

wildcard search for multiple fields:
{
"query": {
    "bool": {
        "must":
        [
            {
                "wildcard" : { "cik" : "*17*" }
            },
            {
                "wildcard" : { "companyName" : "*a*" }
            }
        ]
    }
}
}

Search all and return selected fields
{
"fields": [ termId, name, description, financialStatement, priorityGroup,hasValidations],
"_source": false
}

"query": {
    "match": {
      "includeInAccuracyTests_b": true
    }
}

@Query(value = "myDocType:(?4) AND termId:(?0) AND entityId:(?1) AND FY:[?2 TO ?3]")
{
"query": {
    "bool": {
        "must":
        [
            {
                "match" : { "myDocType" : "" }
            },
            {
                "match" : { "termId" : "" }
            },
            {
                "match" : { "entityId" : "" }
            },
			{
				"FY": 
			}
        ]
    }
}
}

Rename an existing index field name
PUT _ingest/pipeline/my_rename_pipeline
{
  "description" : "describe pipeline",
  "processors" : [
    {
      "rename": {
        "field": "fieldCamelcase",
        "target_field": "fieldCamelCase"
      }
    }
  ]
}

POST _reindex
{
  "source": {
    "index": "source"
  },
  "dest": {
    "index": "dest",
    "pipeline": "my_rename_pipeline"
  }
} 

to use filter, term(s), the field has to be keyword type not text. TermID here need to be keyword type, no text.
{
  "query": { 
    "bool": {
      "must": [
        {"match" : { "myDocType" : "primaryTermResult" }},  
		{"match" : { "entityId" : "0000320193" }}, 
		{"match": {"FY": 2020 }},
		{"match": {"FQ": "FY" }}
      ], 
      "filter": [
         { "terms":  { "termId": ["CI", "TXT", "NIP", "ACT", "LT", "ETRQ", "LSE", "STAT", "GP", "LCT", "TANEQ", "BW", "SALE", "SEQ", "DT", "MIBT", "CSO", "TEQ", "CHEC", "REVT"] }}
	  ]
    }
  }
}















